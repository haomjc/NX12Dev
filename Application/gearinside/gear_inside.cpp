//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\OneDrive\NX12Dev\Application\gear_inside\gear_inside.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: haomjc
//              Version: NX 12
//              Date: 01-11-2019  (Format: mm-dd-yyyy)
//              Time: 16:23 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "gear_inside.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(gear_inside::theSession) = NULL;
UI *(gear_inside::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
gear_inside::gear_inside()
{
	try
	{
		// Initialize the NX Open C++ API environment
		gear_inside::theSession = NXOpen::Session::GetSession();
		gear_inside::theUI = UI::GetUI();
		theDlxFileName = "gear_inside.dlx";
		theDialog = gear_inside::theUI->CreateDialog(theDlxFileName);
		// Registration of callback functions
		theDialog->AddApplyHandler(make_callback(this, &gear_inside::apply_cb));
		theDialog->AddOkHandler(make_callback(this, &gear_inside::ok_cb));
		theDialog->AddUpdateHandler(make_callback(this, &gear_inside::update_cb));
		theDialog->AddInitializeHandler(make_callback(this, &gear_inside::initialize_cb));
		theDialog->AddDialogShownHandler(make_callback(this, &gear_inside::dialogShown_cb));
	}
	catch (exception& ex)
	{
		//---- Enter your exception handling code here -----
		throw;
	}
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
gear_inside::~gear_inside()
{
	if (theDialog != NULL)
	{
		delete theDialog;
		theDialog = NULL;
	}
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
	gear_inside *thegear_inside = NULL;
	try
	{
		thegear_inside = new gear_inside();
		// The following method shows the dialog immediately
		thegear_inside->Show();
	}
	catch (exception& ex)
	{
		//---- Enter your exception handling code here -----
		gear_inside::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	if (thegear_inside != NULL)
	{
		delete thegear_inside;
		thegear_inside = NULL;
	}
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
	//return (int)Session::LibraryUnloadOptionExplicitly;
	return (int)Session::LibraryUnloadOptionImmediately;
	//return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch (exception& ex)
	{
		//---- Enter your exception handling code here -----
		gear_inside::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

int gear_inside::Show()
{
	try
	{
		theDialog->Show();
	}
	catch (exception& ex)
	{
		//---- Enter your exception handling code here -----
		gear_inside::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void gear_inside::initialize_cb()
{
	try
	{
		group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
		label0 = dynamic_cast<NXOpen::BlockStyler::Label*>(theDialog->TopBlock()->FindBlock("label0"));
		drawingArea0 = dynamic_cast<NXOpen::BlockStyler::DrawingArea*>(theDialog->TopBlock()->FindBlock("drawingArea0"));
		linear_dim0 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim0"));
		linear_dim01 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim01"));
		linear_dim02 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim02"));
		linear_dim03 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim03"));
		linear_dim04 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim04"));
		linear_dim05 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim05"));
		linear_dim06 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim06"));
		linear_dim07 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim07"));
		linear_dim08 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim08"));
		linear_dim09 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim09"));
		linear_dim010 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim010"));
		linear_dim011 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim011"));
		linear_dim012 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim012"));
		linear_dim013 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim013"));
		linear_dim014 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim014"));
		linear_dim015 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim015"));
		linear_dim016 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim016"));
		linear_dim017 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim017"));
		linear_dim018 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim018"));
		integer0 = dynamic_cast<NXOpen::BlockStyler::IntegerBlock*>(theDialog->TopBlock()->FindBlock("integer0"));
		integer01 = dynamic_cast<NXOpen::BlockStyler::IntegerBlock*>(theDialog->TopBlock()->FindBlock("integer01"));


	}
	catch (exception& ex)
	{
		//---- Enter your exception handling code here -----
		gear_inside::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void gear_inside::dialogShown_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch (exception& ex)
	{
		//---- Enter your exception handling code here -----
		gear_inside::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int gear_inside::apply_cb()
{
	int errorCode = 0;
	try
	{
		//---- Enter your callback code here -----
		double s1 = this->linear_dim0->GetProperties()->GetDouble("Value");
		double s2 = this->linear_dim01->GetProperties()->GetDouble("Value");
		double s3 = this->linear_dim02->GetProperties()->GetDouble("Value");
		double s4 = this->linear_dim03->GetProperties()->GetDouble("Value");
		double s5 = this->linear_dim04->GetProperties()->GetDouble("Value");
		double s6 = this->linear_dim05->GetProperties()->GetDouble("Value");
		double s7 = this->linear_dim06->GetProperties()->GetDouble("Value");
		double h1 = this->linear_dim07->GetProperties()->GetDouble("Value") / 2;
		double h2 = this->linear_dim08->GetProperties()->GetDouble("Value");
		double h3 = this->linear_dim09->GetProperties()->GetDouble("Value");
		double h4 = this->linear_dim010->GetProperties()->GetDouble("Value");
		double h5 = this->linear_dim011->GetProperties()->GetDouble("Value");
		double h6 = this->linear_dim012->GetProperties()->GetDouble("Value");
		double h7 = this->linear_dim013->GetProperties()->GetDouble("Value");
		double h8 = this->linear_dim014->GetProperties()->GetDouble("Value");
		double h9 = this->linear_dim015->GetProperties()->GetDouble("Value");
		double h10 = this->linear_dim016->GetProperties()->GetDouble("Value");
		double h11 = this->linear_dim017->GetProperties()->GetDouble("Value");
		double h12 = this->linear_dim018->GetProperties()->GetDouble("Value");



		int n = this->integer0->GetProperties()->GetInteger("Value");
		int zb = this->integer01->GetProperties()->GetInteger("Value");


		double s0 = s1 - s2 - s3;
		double h17 = (h7 - h6) / 2;

		stringstream s_s1, s_s2, s_s3, s_s4, s_s5, s_s6, s_s7, s_h1, s_h2, s_h3, s_h4, s_h5, s_h6, s_h7, s_h8, s_h9, s_h10, s_h11, s_h12, s_n, s_zb,   s_s0, s_h17;

		s_s1 << s1;
		s_s2 << s2;
		s_s3 << s3;
		s_s4 << s4;
		s_s5 << s5;
		s_s6 << s6;
		s_s7 << s7;
		s_h1 << h1;
		s_h2 << h2;
		s_h3 << h3;
		s_h4 << h4;
		s_h5 << h5;
		s_h6 << h6;
		s_h7 << h7;
		s_h8 << h8;
		s_h9 << h9;
		s_h10 << h10;
		s_h11 << h11;
		s_h12 << h12;
		s_n << n;
		s_zb << zb;

		s_s0 << s0;
		s_h17 << h17;

		NXOpen::Session *theSession = NXOpen::Session::GetSession();
		NXOpen::Part *workPart(theSession->Parts()->Work());
		NXOpen::Part *displayPart(theSession->Parts()->Display());

		//   插入(S)->草图(H)...

		NXOpen::Sketch *nullNXOpen_Sketch(NULL);
		NXOpen::SketchInPlaceBuilder *sketchInPlaceBuilder1;
		sketchInPlaceBuilder1 = workPart->Sketches()->CreateSketchInPlaceBuilder2(nullNXOpen_Sketch);

		NXOpen::Point3d origin1(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal1(0.0, 0.0, 1.0);
		NXOpen::Plane *plane1;
		plane1 = workPart->Planes()->CreatePlane(origin1, normal1, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder1->SetPlaneReference(plane1);

		NXOpen::Unit *unit1(dynamic_cast<NXOpen::Unit *>(workPart->UnitCollection()->FindObject("MilliMeter")));
		NXOpen::Expression *expression1;
		expression1 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression2;
		expression2 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::SketchAlongPathBuilder *sketchAlongPathBuilder1;
		sketchAlongPathBuilder1 = workPart->Sketches()->CreateSketchAlongPathBuilder(nullNXOpen_Sketch);

		sketchAlongPathBuilder1->PlaneLocation()->Expression()->SetRightHandSide("0");

		theSession->Preferences()->Sketch()->SetCreateInferredConstraints(true);

		theSession->Preferences()->Sketch()->SetContinuousAutoDimensioning(true);

		theSession->Preferences()->Sketch()->SetDimensionLabel(NXOpen::Preferences::SketchPreferences::DimensionLabelTypeExpression);

		theSession->Preferences()->Sketch()->SetTextSizeFixed(true);

		theSession->Preferences()->Sketch()->SetFixedTextSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayParenthesesOnReferenceDimensions(true);

		theSession->Preferences()->Sketch()->SetDisplayReferenceGeometry(false);

		theSession->Preferences()->Sketch()->SetConstraintSymbolSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayObjectColor(false);

		theSession->Preferences()->Sketch()->SetDisplayObjectName(true);

		NXOpen::NXObject *nXObject1;
		nXObject1 = sketchInPlaceBuilder1->Commit();

		NXOpen::Sketch *sketch1(dynamic_cast<NXOpen::Sketch *>(nXObject1));
		NXOpen::Features::Feature *feature1;
		feature1 = sketch1->Feature();

		sketch1->Activate(NXOpen::Sketch::ViewReorientTrue);

		sketchInPlaceBuilder1->Destroy();

		sketchAlongPathBuilder1->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression2);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression1);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane1->DestroyPlane();

		//   插入(S)->草图曲线(S)->点(T)...


		NXOpen::Expression *expression3;
		expression3 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression4;
		expression4 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression5;
		expression5 = workPart->Expressions()->CreateSystemExpressionWithUnits("p14_x=0.00000000000", unit1);

		NXOpen::Expression *expression6;
		expression6 = workPart->Expressions()->CreateSystemExpressionWithUnits("p15_y=0.00000000000", unit1);

		NXOpen::Expression *expression7;
		expression7 = workPart->Expressions()->CreateSystemExpressionWithUnits("p16_z=0.00000000000", unit1);

		NXOpen::Expression *expression8;
		expression8 = workPart->Expressions()->CreateSystemExpressionWithUnits("p17_xdelta=0.00000000000", unit1);

		NXOpen::Expression *expression9;
		expression9 = workPart->Expressions()->CreateSystemExpressionWithUnits("p18_ydelta=0.00000000000", unit1);

		NXOpen::Expression *expression10;
		expression10 = workPart->Expressions()->CreateSystemExpressionWithUnits("p19_zdelta=0.00000000000", unit1);

		NXOpen::Expression *expression11;
		expression11 = workPart->Expressions()->CreateSystemExpressionWithUnits("p20_radius=0.00000000000", unit1);

		NXOpen::Unit *unit2(dynamic_cast<NXOpen::Unit *>(workPart->UnitCollection()->FindObject("Degrees")));
		NXOpen::Expression *expression12;
		expression12 = workPart->Expressions()->CreateSystemExpressionWithUnits("p21_angle=0.00000000000", unit2);

		NXOpen::Expression *expression13;
		expression13 = workPart->Expressions()->CreateSystemExpressionWithUnits("p22_zdelta=0.00000000000", unit1);

		NXOpen::Expression *expression14;
		expression14 = workPart->Expressions()->CreateSystemExpressionWithUnits("p23_radius=0.00000000000", unit1);

		NXOpen::Expression *expression15;
		expression15 = workPart->Expressions()->CreateSystemExpressionWithUnits("p24_angle1=0.00000000000", unit2);

		NXOpen::Expression *expression16;
		expression16 = workPart->Expressions()->CreateSystemExpressionWithUnits("p25_angle2=0.00000000000", unit2);

		NXOpen::Expression *expression17;
		expression17 = workPart->Expressions()->CreateSystemExpressionWithUnits("p26_distance=0", unit1);

		NXOpen::Expression *expression18;
		expression18 = workPart->Expressions()->CreateSystemExpressionWithUnits("p27_arclen=0", unit1);

		NXOpen::Unit *nullNXOpen_Unit(NULL);
		NXOpen::Expression *expression19;
		expression19 = workPart->Expressions()->CreateSystemExpressionWithUnits("p28_percent=0", nullNXOpen_Unit);

		expression5->SetRightHandSide("0");

		expression6->SetRightHandSide(s_h1.str());

		expression7->SetRightHandSide("0");

		expression8->SetRightHandSide("0");

		expression9->SetRightHandSide("0");

		expression10->SetRightHandSide("0");

		expression11->SetRightHandSide("0");

		expression12->SetRightHandSide("0");

		expression13->SetRightHandSide("0");

		expression14->SetRightHandSide("0");

		expression15->SetRightHandSide("0");

		expression16->SetRightHandSide("0");

		expression17->SetRightHandSide("0");

		expression19->SetRightHandSide("100");

		expression18->SetRightHandSide("0");

		NXOpen::Expression *expression20;
		expression20 = workPart->Expressions()->CreateSystemExpressionWithUnits("p29_x=0.00000000000", unit1);

		NXOpen::Scalar *scalar1;
		scalar1 = workPart->Scalars()->CreateScalarExpression(expression20, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression21;
		expression21 = workPart->Expressions()->CreateSystemExpressionWithUnits("p30_y=0.00000000000", unit1);

		NXOpen::Scalar *scalar2;
		scalar2 = workPart->Scalars()->CreateScalarExpression(expression21, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression22;
		expression22 = workPart->Expressions()->CreateSystemExpressionWithUnits("p31_z=0.00000000000", unit1);

		NXOpen::Scalar *scalar3;
		scalar3 = workPart->Scalars()->CreateScalarExpression(expression22, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point1;
		point1 = workPart->Points()->CreatePoint(scalar1, scalar2, scalar3, NXOpen::SmartObject::UpdateOptionWithinModeling);

		expression5->SetRightHandSide("0.00000000000");

		expression6->SetRightHandSide("0.00000000000");

		expression7->SetRightHandSide("0.00000000000");

		expression8->SetRightHandSide("0.00000000000");

		expression9->SetRightHandSide("0.00000000000");

		expression10->SetRightHandSide("0.00000000000");

		expression11->SetRightHandSide("0.00000000000");

		expression12->SetRightHandSide("0.00000000000");

		expression13->SetRightHandSide("0.00000000000");

		expression14->SetRightHandSide("0.00000000000");

		expression15->SetRightHandSide("0.00000000000");

		expression16->SetRightHandSide("0.00000000000");

		expression19->SetRightHandSide("100.00000000000");

		// ----------------------------------------------
		//   Dialog Begin Point
		// ----------------------------------------------
		expression6->SetRightHandSide(s_h1.str());

		expression5->SetRightHandSide("0.00000000000");

		expression6->SetRightHandSide(s_h1.str());

		expression7->SetRightHandSide(s_h1.str());

		workPart->Points()->DeletePoint(point1);

		NXOpen::Expression *expression23;
		expression23 = workPart->Expressions()->CreateSystemExpressionWithUnits("p15_x=0.00000000000", unit1);

		NXOpen::Scalar *scalar4;
		scalar4 = workPart->Scalars()->CreateScalarExpression(expression23, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression24;
		expression24 = workPart->Expressions()->CreateSystemExpressionWithUnits("p16_y=104", unit1);

		NXOpen::Scalar *scalar5;
		scalar5 = workPart->Scalars()->CreateScalarExpression(expression24, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression25;
		expression25 = workPart->Expressions()->CreateSystemExpressionWithUnits("p17_z=0.00000000000", unit1);

		NXOpen::Scalar *scalar6;
		scalar6 = workPart->Scalars()->CreateScalarExpression(expression25, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point2;
		point2 = workPart->Points()->CreatePoint(scalar4, scalar5, scalar6, NXOpen::SmartObject::UpdateOptionWithinModeling);

		expression5->SetRightHandSide("0.00000000000");

		expression6->SetRightHandSide(s_h1.str());

		expression7->SetRightHandSide("0.00000000000");

		workPart->Points()->DeletePoint(point2);

		NXOpen::Expression *expression26;
		expression26 = workPart->Expressions()->CreateSystemExpressionWithUnits("p15_x=0.00000000000", unit1);

		NXOpen::Scalar *scalar7;
		scalar7 = workPart->Scalars()->CreateScalarExpression(expression26, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression27;
		expression27 = workPart->Expressions()->CreateSystemExpressionWithUnits("p16_y=104", unit1);

		NXOpen::Scalar *scalar8;
		scalar8 = workPart->Scalars()->CreateScalarExpression(expression27, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression28;
		expression28 = workPart->Expressions()->CreateSystemExpressionWithUnits("p17_z=0.00000000000", unit1);

		NXOpen::Scalar *scalar9;
		scalar9 = workPart->Scalars()->CreateScalarExpression(expression28, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point3;
		point3 = workPart->Points()->CreatePoint(scalar7, scalar8, scalar9, NXOpen::SmartObject::UpdateOptionWithinModeling);


		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression5);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression6);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression7);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression8);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression9);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression10);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression11);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression12);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression13);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression14);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression15);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression16);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression17);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression18);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression19);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression4);


		NXOpen::Scalar *scalar10;
		scalar10 = workPart->Scalars()->CreateScalarExpression(expression26, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Scalar *scalar11;
		scalar11 = workPart->Scalars()->CreateScalarExpression(expression27, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Scalar *scalar12;
		scalar12 = workPart->Scalars()->CreateScalarExpression(expression28, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point4;
		point4 = workPart->Points()->CreatePoint(scalar10, scalar11, scalar12, NXOpen::SmartObject::UpdateOptionWithinModeling);

		point3->RemoveParameters();

		NXOpen::Point3d coordinates1(0.0, h1, 0.0);
		point3->SetCoordinates(coordinates1);

		theSession->ActiveSketch()->AddGeometry(point3, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		theSession->ActiveSketch()->Update();



		workPart->Points()->DeletePoint(point4);

		workPart->Expressions()->Delete(expression3);

		NXOpen::Expression *expression29;
		expression29 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		workPart->Expressions()->Delete(expression29);

		//   插入(S)->草图曲线(S)->直线(L)...

		NXOpen::Expression *expression30;
		expression30 = workPart->Expressions()->CreateSystemExpression(s_s0.str());

		NXOpen::Expression *expression31;
		expression31 = workPart->Expressions()->CreateSystemExpression("0");

		NXOpen::Point3d startPoint1(0.0, h1, 0.0);
		NXOpen::Point3d endPoint1(s0, h1, 0.0);
		NXOpen::Line *line1;
		line1 = workPart->Curves()->CreateLine(startPoint1, endPoint1);

		theSession->ActiveSketch()->AddGeometry(line1, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_1;
		geom1_1.Geometry = line1;
		geom1_1.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_1.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_1;
		geom2_1.Geometry = point3;
		geom2_1.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom2_1.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint1;
		sketchGeometricConstraint1 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_1, geom2_1);

		NXOpen::Sketch::ConstraintGeometry geom1;
		geom1.Geometry = line1;
		geom1.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom1.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint2;
		sketchGeometricConstraint2 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom1);

		workPart->Expressions()->Delete(expression31);

		NXOpen::Sketch::DimensionGeometry dimObject1_1;
		dimObject1_1.Geometry = line1;
		dimObject1_1.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_1.AssocValue = 0;
		dimObject1_1.HelpPoint.X = 0.0;
		dimObject1_1.HelpPoint.Y = 0.0;
		dimObject1_1.HelpPoint.Z = 0.0;
		NXOpen::NXObject *nullNXOpen_NXObject(NULL);
		dimObject1_1.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_1;
		dimObject2_1.Geometry = line1;
		dimObject2_1.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_1.AssocValue = 0;
		dimObject2_1.HelpPoint.X = 0.0;
		dimObject2_1.HelpPoint.Y = 0.0;
		dimObject2_1.HelpPoint.Z = 0.0;
		dimObject2_1.View = nullNXOpen_NXObject;
		//NXOpen::Point3d dimOrigin1(s3, 91.05464916157446, 0.0);
		//NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint1;
		//sketchDimensionalConstraint1 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_1, dimObject2_1, dimOrigin1, expression30, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		//NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint1(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint1));
		//NXOpen::Annotations::Dimension *dimension1;
		//dimension1 = sketchHelpedDimensionalConstraint1->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Expression *expression32;
		expression32 = workPart->Expressions()->CreateSystemExpression("1");

		NXOpen::Expression *expression33;
		expression33 = workPart->Expressions()->CreateSystemExpression("0");


		NXOpen::Point3d startPoint2(s0, h1, 0.0);
		NXOpen::Point3d endPoint2(s0+1, h1, 0.0);
		NXOpen::Line *line2;
		line2 = workPart->Curves()->CreateLine(startPoint2, endPoint2);

		theSession->ActiveSketch()->AddGeometry(line2, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_2;
		geom1_2.Geometry = line2;
		geom1_2.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_2.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_2;
		geom2_2.Geometry = line1;
		geom2_2.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_2.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint3;
		sketchGeometricConstraint3 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_2, geom2_2);

		NXOpen::Sketch::ConstraintGeometry geom2;
		geom2.Geometry = line2;
		geom2.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom2.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint4;
		sketchGeometricConstraint4 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom2);

		workPart->Expressions()->Delete(expression33);

		NXOpen::Sketch::DimensionGeometry dimObject1_2;
		dimObject1_2.Geometry = line2;
		dimObject1_2.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_2.AssocValue = 0;
		dimObject1_2.HelpPoint.X = 0.0;
		dimObject1_2.HelpPoint.Y = 0.0;
		dimObject1_2.HelpPoint.Z = 0.0;
		dimObject1_2.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_2;
		dimObject2_2.Geometry = line2;
		dimObject2_2.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_2.AssocValue = 0;
		dimObject2_2.HelpPoint.X = 0.0;
		dimObject2_2.HelpPoint.Y = 0.0;
		dimObject2_2.HelpPoint.Z = 0.0;
		dimObject2_2.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin2(38.5, 91.05464916157446, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint2;
		sketchDimensionalConstraint2 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_2, dimObject2_2, dimOrigin2, expression32, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint2(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint2));
		NXOpen::Annotations::Dimension *dimension2;
		dimension2 = sketchHelpedDimensionalConstraint2->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Expression *expression34;
		expression34 = workPart->Expressions()->CreateSystemExpression(s_s2.str());

		NXOpen::Expression *expression35;
		expression35 = workPart->Expressions()->CreateSystemExpression("0");

		NXOpen::Point3d startPoint3(39.0, h1, 0.0);
		NXOpen::Point3d endPoint3(54.0, h1, 0.0);
		NXOpen::Line *line3;
		line3 = workPart->Curves()->CreateLine(startPoint3, endPoint3);

		theSession->ActiveSketch()->AddGeometry(line3, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_3;
		geom1_3.Geometry = line3;
		geom1_3.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_3.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_3;
		geom2_3.Geometry = line2;
		geom2_3.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_3.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint5;
		sketchGeometricConstraint5 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_3, geom2_3);

		NXOpen::Sketch::ConstraintGeometry geom3;
		geom3.Geometry = line3;
		geom3.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom3.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint6;
		sketchGeometricConstraint6 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom3);

		workPart->Expressions()->Delete(expression35);

		NXOpen::Sketch::DimensionGeometry dimObject1_3;
		dimObject1_3.Geometry = line3;
		dimObject1_3.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_3.AssocValue = 0;
		dimObject1_3.HelpPoint.X = 0.0;
		dimObject1_3.HelpPoint.Y = 0.0;
		dimObject1_3.HelpPoint.Z = 0.0;
		dimObject1_3.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_3;
		dimObject2_3.Geometry = line3;
		dimObject2_3.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_3.AssocValue = 0;
		dimObject2_3.HelpPoint.X = 0.0;
		dimObject2_3.HelpPoint.Y = 0.0;
		dimObject2_3.HelpPoint.Z = 0.0;
		dimObject2_3.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin3(46.5, 91.05464916157446, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint3;
		sketchDimensionalConstraint3 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_3, dimObject2_3, dimOrigin3, expression34, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint3(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint3));
		NXOpen::Annotations::Dimension *dimension3;
		dimension3 = sketchHelpedDimensionalConstraint3->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Expression *expression36;
		expression36 = workPart->Expressions()->CreateSystemExpression("18");

		NXOpen::Expression *expression37;
		expression37 = workPart->Expressions()->CreateSystemExpression("90");


		NXOpen::Point3d startPoint4(54.0, h1, 0.0);
		NXOpen::Point3d endPoint4(54.0, 122.0, 0.0);
		NXOpen::Line *line4;
		line4 = workPart->Curves()->CreateLine(startPoint4, endPoint4);

		theSession->ActiveSketch()->AddGeometry(line4, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_4;
		geom1_4.Geometry = line4;
		geom1_4.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_4.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_4;
		geom2_4.Geometry = line3;
		geom2_4.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_4.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint7;
		sketchGeometricConstraint7 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_4, geom2_4);

		NXOpen::Sketch::ConstraintGeometry geom4;
		geom4.Geometry = line4;
		geom4.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom4.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint8;
		sketchGeometricConstraint8 = theSession->ActiveSketch()->CreateVerticalConstraint(geom4);

		workPart->Expressions()->Delete(expression37);

		NXOpen::Sketch::DimensionGeometry dimObject1_4;
		dimObject1_4.Geometry = line4;
		dimObject1_4.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_4.AssocValue = 0;
		dimObject1_4.HelpPoint.X = 0.0;
		dimObject1_4.HelpPoint.Y = 0.0;
		dimObject1_4.HelpPoint.Z = 0.0;
		dimObject1_4.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_4;
		dimObject2_4.Geometry = line4;
		dimObject2_4.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_4.AssocValue = 0;
		dimObject2_4.HelpPoint.X = 0.0;
		dimObject2_4.HelpPoint.Y = 0.0;
		dimObject2_4.HelpPoint.Z = 0.0;
		dimObject2_4.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin4(66.945350838425554, 113, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint4;
		sketchDimensionalConstraint4 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_4, dimObject2_4, dimOrigin4, expression36, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint4(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint4));
		NXOpen::Annotations::Dimension *dimension4;
		dimension4 = sketchHelpedDimensionalConstraint4->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------
		NXOpen::Expression *expression38;
		expression38 = workPart->Expressions()->CreateSystemExpression(s_s3.str());

		NXOpen::Expression *expression39;
		expression39 = workPart->Expressions()->CreateSystemExpression("0");

		NXOpen::Point3d startPoint5(54, 122.0, 0.0);
		NXOpen::Point3d endPoint5(73, 122.0, 0.0);
		NXOpen::Line *line5;
		line5 = workPart->Curves()->CreateLine(startPoint5, endPoint5);

		theSession->ActiveSketch()->AddGeometry(line5, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_5;
		geom1_5.Geometry = line5;
		geom1_5.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_5.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_5;
		geom2_5.Geometry = line4;
		geom2_5.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_5.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint9;
		sketchGeometricConstraint9 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_5, geom2_5);

		NXOpen::Sketch::ConstraintGeometry geom5;
		geom5.Geometry = line5;
		geom5.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom5.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint10;
		sketchGeometricConstraint10 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom5);

		workPart->Expressions()->Delete(expression39);

		NXOpen::Sketch::DimensionGeometry dimObject1_5;
		dimObject1_5.Geometry = line5;
		dimObject1_5.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_5.AssocValue = 0;
		dimObject1_5.HelpPoint.X = 0.0;
		dimObject1_5.HelpPoint.Y = 0.0;
		dimObject1_5.HelpPoint.Z = 0.0;
		dimObject1_5.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_5;
		dimObject2_5.Geometry = line5;
		dimObject2_5.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_5.AssocValue = 0;
		dimObject2_5.HelpPoint.X = 0.0;
		dimObject2_5.HelpPoint.Y = 0.0;
		dimObject2_5.HelpPoint.Z = 0.0;
		dimObject2_5.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin5(63.500000000000028, 109.05464916157446, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint5;
		sketchDimensionalConstraint5 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_5, dimObject2_5, dimOrigin5, expression38, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint5(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint5));
		NXOpen::Annotations::Dimension *dimension5;
		dimension5 = sketchHelpedDimensionalConstraint5->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Expression *expression40;
		expression40 = workPart->Expressions()->CreateSystemExpression(s_h17.str());

		NXOpen::Expression *expression41;
		expression41 = workPart->Expressions()->CreateSystemExpression("270");

		NXOpen::Point3d startPoint6(73, 122.0, 0.0);
		NXOpen::Point3d endPoint6(73, 105.0, 0.0);
		NXOpen::Line *line6;
		line6 = workPart->Curves()->CreateLine(startPoint6, endPoint6);

		theSession->ActiveSketch()->AddGeometry(line6, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_6;
		geom1_6.Geometry = line6;
		geom1_6.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_6.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_6;
		geom2_6.Geometry = line5;
		geom2_6.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_6.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint11;
		sketchGeometricConstraint11 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_6, geom2_6);

		NXOpen::Sketch::ConstraintGeometry geom6;
		geom6.Geometry = line6;
		geom6.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom6.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint12;
		sketchGeometricConstraint12 = theSession->ActiveSketch()->CreateVerticalConstraint(geom6);

		workPart->Expressions()->Delete(expression41);

		NXOpen::Sketch::DimensionGeometry dimObject1_6;
		dimObject1_6.Geometry = line6;
		dimObject1_6.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_6.AssocValue = 0;
		dimObject1_6.HelpPoint.X = 0.0;
		dimObject1_6.HelpPoint.Y = 0.0;
		dimObject1_6.HelpPoint.Z = 0.0;
		dimObject1_6.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_6;
		dimObject2_6.Geometry = line6;
		dimObject2_6.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_6.AssocValue = 0;
		dimObject2_6.HelpPoint.X = 0.0;
		dimObject2_6.HelpPoint.Y = 0.0;
		dimObject2_6.HelpPoint.Z = 0.0;
		dimObject2_6.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin6(60.05464916157446, 113.50000000000004, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint6;
		sketchDimensionalConstraint6 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_6, dimObject2_6, dimOrigin6, expression40, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint6(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint6));
		NXOpen::Annotations::Dimension *dimension6;
		dimension6 = sketchHelpedDimensionalConstraint6->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Expression *expression42;
		expression42 = workPart->Expressions()->CreateSystemExpression(s_s7.str());

		NXOpen::Expression *expression43;
		expression43 = workPart->Expressions()->CreateSystemExpression("180");

		NXOpen::Point3d startPoint7(s1+1, h6/2, 0.0);    //有一个凸台，1mm长度
		NXOpen::Point3d endPoint7(s1+1-s7, h6/2, 0.0);
		NXOpen::Line *line7;
		line7 = workPart->Curves()->CreateLine(startPoint7, endPoint7);

		theSession->ActiveSketch()->AddGeometry(line7, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_7;
		geom1_7.Geometry = line7;
		geom1_7.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_7.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_7;
		geom2_7.Geometry = line6;
		geom2_7.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_7.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint13;
		sketchGeometricConstraint13 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_7, geom2_7);

		NXOpen::Sketch::ConstraintGeometry geom7;
		geom7.Geometry = line7;
		geom7.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom7.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint14;
		sketchGeometricConstraint14 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom7);

		workPart->Expressions()->Delete(expression43);

		NXOpen::Sketch::DimensionGeometry dimObject1_7;
		dimObject1_7.Geometry = line7;
		dimObject1_7.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_7.AssocValue = 0;
		dimObject1_7.HelpPoint.X = 0.0;
		dimObject1_7.HelpPoint.Y = 0.0;
		dimObject1_7.HelpPoint.Z = 0.0;
		dimObject1_7.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_7;
		dimObject2_7.Geometry = line7;
		dimObject2_7.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_7.AssocValue = 0;
		dimObject2_7.HelpPoint.X = 0.0;
		dimObject2_7.HelpPoint.Y = 0.0;
		dimObject2_7.HelpPoint.Z = 0.0;
		dimObject2_7.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin7(71.625, 117.94535083842554, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint7;
		sketchDimensionalConstraint7 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_7, dimObject2_7, dimOrigin7, expression42, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint7(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint7));
		NXOpen::Annotations::Dimension *dimension7;
		dimension7 = sketchHelpedDimensionalConstraint7->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------


		NXOpen::Expression *expression44;
		expression44 = workPart->Expressions()->CreateSystemExpression("5");

		NXOpen::Expression *expression45;
		expression45 = workPart->Expressions()->CreateSystemExpression("270");

		NXOpen::Point3d startPoint8(s1+1-s7, h6/2, 0.0);
		NXOpen::Point3d endPoint8(s1 + 1 - s7, h6/2-h12, 0.0);
		NXOpen::Line *line8;
		line8 = workPart->Curves()->CreateLine(startPoint8, endPoint8);

		theSession->ActiveSketch()->AddGeometry(line8, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_8;
		geom1_8.Geometry = line8;
		geom1_8.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_8.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_8;
		geom2_8.Geometry = line7;
		geom2_8.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_8.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint15;
		sketchGeometricConstraint15 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_8, geom2_8);

		NXOpen::Sketch::ConstraintGeometry geom8;
		geom8.Geometry = line8;
		geom8.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom8.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint16;
		sketchGeometricConstraint16 = theSession->ActiveSketch()->CreateVerticalConstraint(geom8);

		workPart->Expressions()->Delete(expression45);

		NXOpen::Sketch::DimensionGeometry dimObject1_8;
		dimObject1_8.Geometry = line8;
		dimObject1_8.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_8.AssocValue = 0;
		dimObject1_8.HelpPoint.X = 0.0;
		dimObject1_8.HelpPoint.Y = 0.0;
		dimObject1_8.HelpPoint.Z = 0.0;
		dimObject1_8.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_8;
		dimObject2_8.Geometry = line8;
		dimObject2_8.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_8.AssocValue = 0;
		dimObject2_8.HelpPoint.X = 0.0;
		dimObject2_8.HelpPoint.Y = 0.0;
		dimObject2_8.HelpPoint.Z = 0.0;
		dimObject2_8.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin8(57.304649161574432, (h6-h12)/2, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint8;
		sketchDimensionalConstraint8 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_8, dimObject2_8, dimOrigin8, expression44, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint8(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint8));
		NXOpen::Annotations::Dimension *dimension8;
		dimension8 = sketchHelpedDimensionalConstraint8->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Expression *expression46;
		expression46 = workPart->Expressions()->CreateSystemExpression(s_s7.str());

		NXOpen::Expression *expression47;
		expression47 = workPart->Expressions()->CreateSystemExpression("0");

		NXOpen::Point3d startPoint9(s1+1-s7, h6/2-h12, 0.0);
		NXOpen::Point3d endPoint9(s1+1, h6 / 2 - h12, 0.0);
		NXOpen::Line *line9;
		line9 = workPart->Curves()->CreateLine(startPoint9, endPoint9);

		theSession->ActiveSketch()->AddGeometry(line9, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_9;
		geom1_9.Geometry = line9;
		geom1_9.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_9.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_9;
		geom2_9.Geometry = line8;
		geom2_9.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_9.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint17;
		sketchGeometricConstraint17 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_9, geom2_9);

		NXOpen::Sketch::ConstraintGeometry geom9;
		geom9.Geometry = line9;
		geom9.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom9.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint18;
		sketchGeometricConstraint18 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom9);

		workPart->Expressions()->Delete(expression47);

		NXOpen::Sketch::DimensionGeometry dimObject1_9;
		dimObject1_9.Geometry = line9;
		dimObject1_9.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_9.AssocValue = 0;
		dimObject1_9.HelpPoint.X = 0.0;
		dimObject1_9.HelpPoint.Y = 0.0;
		dimObject1_9.HelpPoint.Z = 0.0;
		dimObject1_9.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_9;
		dimObject2_9.Geometry = line9;
		dimObject2_9.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_9.AssocValue = 0;
		dimObject2_9.HelpPoint.X = 0.0;
		dimObject2_9.HelpPoint.Y = 0.0;
		dimObject2_9.HelpPoint.Z = 0.0;
		dimObject2_9.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin9(71.625, 87.05464916157446, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint9;
		sketchDimensionalConstraint9 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_9, dimObject2_9, dimOrigin9, expression46, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint9(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint9));
		NXOpen::Annotations::Dimension *dimension9;
		dimension9 = sketchHelpedDimensionalConstraint9->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Expression *expression48;
		expression48 = workPart->Expressions()->CreateSystemExpression("4");

		NXOpen::Expression *expression49;
		expression49 = workPart->Expressions()->CreateSystemExpression("270");


		NXOpen::Point3d startPoint10(s1+1, h6/2-h12, 0.0);
		NXOpen::Point3d endPoint10(s1 + 1, h5/2, 0.0);
		NXOpen::Line *line10;
		line10 = workPart->Curves()->CreateLine(startPoint10, endPoint10);

		theSession->ActiveSketch()->AddGeometry(line10, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_10;
		geom1_10.Geometry = line10;
		geom1_10.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_10.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_10;
		geom2_10.Geometry = line9;
		geom2_10.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_10.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint19;
		sketchGeometricConstraint19 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_10, geom2_10);

		NXOpen::Sketch::ConstraintGeometry geom10;
		geom10.Geometry = line10;
		geom10.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom10.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint20;
		sketchGeometricConstraint20 = theSession->ActiveSketch()->CreateVerticalConstraint(geom10);

		workPart->Expressions()->Delete(expression49);

		NXOpen::Sketch::DimensionGeometry dimObject1_10;
		dimObject1_10.Geometry = line10;
		dimObject1_10.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_10.AssocValue = 0;
		dimObject1_10.HelpPoint.X = 0.0;
		dimObject1_10.HelpPoint.Y = 0.0;
		dimObject1_10.HelpPoint.Z = 0.0;
		dimObject1_10.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_10;
		dimObject2_10.Geometry = line10;
		dimObject2_10.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_10.AssocValue = 0;
		dimObject2_10.HelpPoint.X = 0.0;
		dimObject2_10.HelpPoint.Y = 0.0;
		dimObject2_10.HelpPoint.Z = 0.0;
		dimObject2_10.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin10(60.054649161574403, 98, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint10;
		sketchDimensionalConstraint10 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_10, dimObject2_10, dimOrigin10, expression48, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint10(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint10));
		NXOpen::Annotations::Dimension *dimension10;
		dimension10 = sketchHelpedDimensionalConstraint10->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------


		NXOpen::Expression *expression50;
		expression50 = workPart->Expressions()->CreateSystemExpression("14.5");

		NXOpen::Expression *expression51;
		expression51 = workPart->Expressions()->CreateSystemExpression("180");

		NXOpen::Point3d startPoint11(s1+1, h5/2, 0.0);
		NXOpen::Point3d endPoint11(s1 + 1-s4, h5 / 2, 0.0);
		NXOpen::Line *line11;
		line11 = workPart->Curves()->CreateLine(startPoint11, endPoint11);

		theSession->ActiveSketch()->AddGeometry(line11, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_11;
		geom1_11.Geometry = line11;
		geom1_11.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_11.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_11;
		geom2_11.Geometry = line10;
		geom2_11.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_11.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint21;
		sketchGeometricConstraint21 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_11, geom2_11);

		NXOpen::Sketch::ConstraintGeometry geom11;
		geom11.Geometry = line11;
		geom11.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom11.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint22;
		sketchGeometricConstraint22 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom11);

		workPart->Expressions()->Delete(expression51);

		NXOpen::Sketch::DimensionGeometry dimObject1_11;
		dimObject1_11.Geometry = line11;
		dimObject1_11.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_11.AssocValue = 0;
		dimObject1_11.HelpPoint.X = 0.0;
		dimObject1_11.HelpPoint.Y = 0.0;
		dimObject1_11.HelpPoint.Z = 0.0;
		dimObject1_11.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_11;
		dimObject2_11.Geometry = line11;

		dimObject2_11.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_11.AssocValue = 0;
		dimObject2_11.HelpPoint.X = 0.0;
		dimObject2_11.HelpPoint.Y = 0.0;
		dimObject2_11.HelpPoint.Z = 0.0;
		dimObject2_11.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin11(65.75, 108.94535083842555, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint11;
		sketchDimensionalConstraint11 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_11, dimObject2_11, dimOrigin11, expression50, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint11(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint11));
		NXOpen::Annotations::Dimension *dimension11;
		dimension11 = sketchHelpedDimensionalConstraint11->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Expression *expression52;
		expression52 = workPart->Expressions()->CreateSystemExpression("10.5");

		NXOpen::Expression *expression53;
		expression53 = workPart->Expressions()->CreateSystemExpression("270");

		NXOpen::Point3d startPoint12(s1+1-s4, h5/2, 0.0);
		NXOpen::Point3d endPoint12(s1 + 1 - s4, h9/2, 0.0);
		NXOpen::Line *line12;
		line12 = workPart->Curves()->CreateLine(startPoint12, endPoint12);

		theSession->ActiveSketch()->AddGeometry(line12, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_12;
		geom1_12.Geometry = line12;
		geom1_12.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_12.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_12;
		geom2_12.Geometry = line11;
		geom2_12.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_12.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint23;
		sketchGeometricConstraint23 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_12, geom2_12);

		NXOpen::Sketch::ConstraintGeometry geom12;
		geom12.Geometry = line12;
		geom12.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom12.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint24;
		sketchGeometricConstraint24 = theSession->ActiveSketch()->CreateVerticalConstraint(geom12);

		workPart->Expressions()->Delete(expression53);

		NXOpen::Sketch::DimensionGeometry dimObject1_12;
		dimObject1_12.Geometry = line12;
		dimObject1_12.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_12.AssocValue = 0;
		dimObject1_12.HelpPoint.X = 0.0;
		dimObject1_12.HelpPoint.Y = 0.0;
		dimObject1_12.HelpPoint.Z = 0.0;
		dimObject1_12.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_12;
		dimObject2_12.Geometry = line12;
		dimObject2_12.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_12.AssocValue = 0;
		dimObject2_12.HelpPoint.X = 0.0;
		dimObject2_12.HelpPoint.Y = 0.0;
		dimObject2_12.HelpPoint.Z = 0.0;
		dimObject2_12.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin12(45.554649161574375, 90.750000000000085, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint12;
		sketchDimensionalConstraint12 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_12, dimObject2_12, dimOrigin12, expression52, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint12(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint12));
		NXOpen::Annotations::Dimension *dimension12;
		dimension12 = sketchHelpedDimensionalConstraint12->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Expression *expression54;
		expression54 = workPart->Expressions()->CreateSystemExpression(s_s5.str());

		NXOpen::Expression *expression55;
		expression55 = workPart->Expressions()->CreateSystemExpression("180");


		NXOpen::Point3d startPoint13(s1+1-s4, h9/2, 0.0);
		NXOpen::Point3d endPoint13(s1 + 1 - s4-s5, h9 / 2, 0.0);
		NXOpen::Line *line13;
		line13 = workPart->Curves()->CreateLine(startPoint13, endPoint13);

		theSession->ActiveSketch()->AddGeometry(line13, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_13;
		geom1_13.Geometry = line13;
		geom1_13.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_13.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_13;
		geom2_13.Geometry = line12;
		geom2_13.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_13.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint25;
		sketchGeometricConstraint25 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_13, geom2_13);

		NXOpen::Sketch::ConstraintGeometry geom13;
		geom13.Geometry = line13;
		geom13.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom13.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint26;
		sketchGeometricConstraint26 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom13);

		workPart->Expressions()->Delete(expression55);

		NXOpen::Sketch::DimensionGeometry dimObject1_13;
		dimObject1_13.Geometry = line13;
		dimObject1_13.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_13.AssocValue = 0;
		dimObject1_13.HelpPoint.X = 0.0;
		dimObject1_13.HelpPoint.Y = 0.0;
		dimObject1_13.HelpPoint.Z = 0.0;
		dimObject1_13.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_13;
		dimObject2_13.Geometry = line13;
		dimObject2_13.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_13.AssocValue = 0;
		dimObject2_13.HelpPoint.X = 0.0;
		dimObject2_13.HelpPoint.Y = 0.0;
		dimObject2_13.HelpPoint.Z = 0.0;
		dimObject2_13.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin13(44.5, 98.445350838425597, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint13;
		sketchDimensionalConstraint13 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_13, dimObject2_13, dimOrigin13, expression54, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint13(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint13));
		NXOpen::Annotations::Dimension *dimension13;
		dimension13 = sketchHelpedDimensionalConstraint13->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------


		NXOpen::Expression *expression56;
		expression56 = workPart->Expressions()->CreateSystemExpression("10.5");

		NXOpen::Expression *expression57;
		expression57 = workPart->Expressions()->CreateSystemExpression("90");

		NXOpen::Point3d startPoint14(s1 + 1 - s4 - s5, h9/2, 0.0);
		NXOpen::Point3d endPoint14(s1 + 1 - s4 - s5, h5/2, 0.0);
		NXOpen::Line *line14;
		line14 = workPart->Curves()->CreateLine(startPoint14, endPoint14);

		theSession->ActiveSketch()->AddGeometry(line14, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_14;
		geom1_14.Geometry = line14;
		geom1_14.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_14.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_14;
		geom2_14.Geometry = line13;
		geom2_14.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_14.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint27;
		sketchGeometricConstraint27 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_14, geom2_14);

		NXOpen::Sketch::ConstraintGeometry geom14;
		geom14.Geometry = line14;
		geom14.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom14.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint28;
		sketchGeometricConstraint28 = theSession->ActiveSketch()->CreateVerticalConstraint(geom14);

		workPart->Expressions()->Delete(expression57);

		NXOpen::Sketch::DimensionGeometry dimObject1_14;
		dimObject1_14.Geometry = line14;
		dimObject1_14.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_14.AssocValue = 0;
		dimObject1_14.HelpPoint.X = 0.0;
		dimObject1_14.HelpPoint.Y = 0.0;
		dimObject1_14.HelpPoint.Z = 0.0;
		dimObject1_14.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_14;
		dimObject2_14.Geometry = line14;
		dimObject2_14.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_14.AssocValue = 0;
		dimObject2_14.HelpPoint.X = 0.0;
		dimObject2_14.HelpPoint.Y = 0.0;
		dimObject2_14.HelpPoint.Z = 0.0;
		dimObject2_14.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin14(43.445350838425455, 90.750000000000085, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint14;
		sketchDimensionalConstraint14 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_14, dimObject2_14, dimOrigin14, expression56, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint14(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint14));
		NXOpen::Annotations::Dimension *dimension14;
		dimension14 = sketchHelpedDimensionalConstraint14->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Expression *expression58;
		expression58 = workPart->Expressions()->CreateSystemExpression("14.5");

		NXOpen::Expression *expression59;
		expression59 = workPart->Expressions()->CreateSystemExpression("180");

		NXOpen::Point3d startPoint15(s1 + 1 - s4 - s5, h4/2, 0.0);
		NXOpen::Point3d endPoint15(s1 + 1 - s4 - s5-s6, h4/2, 0.0);
		NXOpen::Line *line15;
		line15 = workPart->Curves()->CreateLine(startPoint15, endPoint15);

		theSession->ActiveSketch()->AddGeometry(line15, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_15;
		geom1_15.Geometry = line15;
		geom1_15.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_15.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_15;
		geom2_15.Geometry = line14;
		geom2_15.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_15.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint29;
		sketchGeometricConstraint29 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_15, geom2_15);

		NXOpen::Sketch::ConstraintGeometry geom15;
		geom15.Geometry = line15;
		geom15.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom15.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint30;
		sketchGeometricConstraint30 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom15);

		workPart->Expressions()->Delete(expression59);

		NXOpen::Sketch::DimensionGeometry dimObject1_15;
		dimObject1_15.Geometry = line15;
		dimObject1_15.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_15.AssocValue = 0;
		dimObject1_15.HelpPoint.X = 0.0;
		dimObject1_15.HelpPoint.Y = 0.0;
		dimObject1_15.HelpPoint.Z = 0.0;
		dimObject1_15.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_15;
		dimObject2_15.Geometry = line15;
		dimObject2_15.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_15.AssocValue = 0;
		dimObject2_15.HelpPoint.X = 0.0;
		dimObject2_15.HelpPoint.Y = 0.0;
		dimObject2_15.HelpPoint.Z = 0.0;
		dimObject2_15.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin15(23.25, 108.94535083842565, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint15;
		sketchDimensionalConstraint15 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_15, dimObject2_15, dimOrigin15, expression58, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint15(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint15));
		NXOpen::Annotations::Dimension *dimension15;
		dimension15 = sketchHelpedDimensionalConstraint15->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Expression *expression60;
		expression60 = workPart->Expressions()->CreateSystemExpression("4");

		NXOpen::Expression *expression61;
		expression61 = workPart->Expressions()->CreateSystemExpression("90");


		NXOpen::Point3d startPoint16(s1 + 1 - s4 - s5 - s6, h4/2, 0.0);
		NXOpen::Point3d endPoint16(s1 + 1 - s4 - s5 - s6, h3/2, 0.0);
		NXOpen::Line *line16;
		line16 = workPart->Curves()->CreateLine(startPoint16, endPoint16);

		theSession->ActiveSketch()->AddGeometry(line16, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_16;
		geom1_16.Geometry = line16;
		geom1_16.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_16.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_16;
		geom2_16.Geometry = line15;
		geom2_16.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_16.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint31;
		sketchGeometricConstraint31 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_16, geom2_16);

		NXOpen::Sketch::ConstraintGeometry geom16;
		geom16.Geometry = line16;
		geom16.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom16.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint32;
		sketchGeometricConstraint32 = theSession->ActiveSketch()->CreateVerticalConstraint(geom16);

		workPart->Expressions()->Delete(expression61);

		NXOpen::Sketch::DimensionGeometry dimObject1_16;
		dimObject1_16.Geometry = line16;
		dimObject1_16.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_16.AssocValue = 0;
		dimObject1_16.HelpPoint.X = 0.0;
		dimObject1_16.HelpPoint.Y = 0.0;
		dimObject1_16.HelpPoint.Z = 0.0;
		dimObject1_16.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_16;
		dimObject2_16.Geometry = line16;
		dimObject2_16.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_16.AssocValue = 0;
		dimObject2_16.HelpPoint.X = 0.0;
		dimObject2_16.HelpPoint.Y = 0.0;
		dimObject2_16.HelpPoint.Z = 0.0;
		dimObject2_16.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin16(28, 98, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint16;
		sketchDimensionalConstraint16 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_16, dimObject2_16, dimOrigin16, expression60, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint16(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint16));
		NXOpen::Annotations::Dimension *dimension16;
		dimension16 = sketchHelpedDimensionalConstraint16->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------


		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------


		NXOpen::Expression *expression62;
		expression62 = workPart->Expressions()->CreateSystemExpression("16");

		NXOpen::Expression *expression63;
		expression63 = workPart->Expressions()->CreateSystemExpression("180");

		NXOpen::Point3d startPoint17(s1 + 1 - s4 - s5 - s6, h3/2, 0.0);
		NXOpen::Point3d endPoint17(0, h3/2, 0.0);
		NXOpen::Line *line17;
		line17 = workPart->Curves()->CreateLine(startPoint17, endPoint17);

		theSession->ActiveSketch()->AddGeometry(line17, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_17;
		geom1_17.Geometry = line17;
		geom1_17.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_17.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_17;
		geom2_17.Geometry = line16;
		geom2_17.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_17.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint33;
		sketchGeometricConstraint33 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_17, geom2_17);

		NXOpen::Sketch::ConstraintGeometry geom17;
		geom17.Geometry = line17;
		geom17.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom17.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint34;
		sketchGeometricConstraint34 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom17);

		workPart->Expressions()->Delete(expression63);

		NXOpen::Sketch::DimensionGeometry dimObject1_17;
		dimObject1_17.Geometry = line17;
		dimObject1_17.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_17.AssocValue = 0;
		dimObject1_17.HelpPoint.X = 0.0;
		dimObject1_17.HelpPoint.Y = 0.0;
		dimObject1_17.HelpPoint.Z = 0.0;
		dimObject1_17.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_17;
		dimObject2_17.Geometry = line17;
		dimObject2_17.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_17.AssocValue = 0;
		dimObject2_17.HelpPoint.X = 0.0;
		dimObject2_17.HelpPoint.Y = 0.0;
		dimObject2_17.HelpPoint.Z = 0.0;
		dimObject2_17.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin17(8, 112.94535083842568, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint17;
		sketchDimensionalConstraint17 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_17, dimObject2_17, dimOrigin17, expression62, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint17(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint17));
		NXOpen::Annotations::Dimension *dimension17;
		dimension17 = sketchHelpedDimensionalConstraint17->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Point3d startPoint18(0.0, h3/2, 0.0);
		NXOpen::Point3d endPoint18(0.0, h1, 0.0);
		NXOpen::Line *line18;
		line18 = workPart->Curves()->CreateLine(startPoint18, endPoint18);

		theSession->ActiveSketch()->AddGeometry(line18, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_18;
		geom1_18.Geometry = line18;
		geom1_18.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_18.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_18;
		geom2_18.Geometry = line17;
		geom2_18.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_18.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint35;
		sketchGeometricConstraint35 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_18, geom2_18);

		NXOpen::Sketch::ConstraintGeometry geom18;
		geom18.Geometry = line18;
		geom18.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom18.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint36;
		sketchGeometricConstraint36 = theSession->ActiveSketch()->CreateVerticalConstraint(geom18);

		NXOpen::Sketch::ConstraintGeometry geom1_19;
		geom1_19.Geometry = line18;
		geom1_19.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom1_19.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_19;
		geom2_19.Geometry = point3;
		geom2_19.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom2_19.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint37;
		sketchGeometricConstraint37 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_19, geom2_19);

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------
		// ----------------------------------------------
		//   Menu: 插入(S)->设计特征(E)->旋转(R)...
		// ----------------------------------------------

		NXOpen::Features::Feature *nullNXOpen_Features_Feature(NULL);
		NXOpen::Features::RevolveBuilder *revolveBuilder1;
		revolveBuilder1 = workPart->Features()->CreateRevolveBuilder(nullNXOpen_Features_Feature);

		revolveBuilder1->Limits()->StartExtend()->Value()->SetRightHandSide("0");

		revolveBuilder1->Limits()->EndExtend()->Value()->SetRightHandSide("360");

		revolveBuilder1->SetTolerance(0.001);

		NXOpen::Section *section1;
		section1 = workPart->Sections()->CreateSection(0.00095, 0.001, 0.050000000000000003);

		revolveBuilder1->SetSection(section1);

		NXOpen::GeometricUtilities::SmartVolumeProfileBuilder *smartVolumeProfileBuilder1;
		smartVolumeProfileBuilder1 = revolveBuilder1->SmartVolumeProfile();

		smartVolumeProfileBuilder1->SetOpenProfileSmartVolumeOption(false);

		smartVolumeProfileBuilder1->SetCloseProfileRule(NXOpen::GeometricUtilities::SmartVolumeProfileBuilder::CloseProfileRuleTypeFci);

		section1->SetDistanceTolerance(0.001);

		section1->SetChainingTolerance(0.00095);

		std::vector<double> starthelperpoint1(3);
		const double starthelperpoint1_initial_values[] = {
			0.0, 0.0, 0.0
		};
		starthelperpoint1.assign(starthelperpoint1_initial_values, starthelperpoint1_initial_values + 3);
		revolveBuilder1->SetStartLimitHelperPoint(starthelperpoint1);

		std::vector<double> endhelperpoint1(3);
		const double endhelperpoint1_initial_values[] = {
			0.0, 0.0, 0.0
		};
		endhelperpoint1.assign(endhelperpoint1_initial_values, endhelperpoint1_initial_values + 3);
		revolveBuilder1->SetEndLimitHelperPoint(endhelperpoint1);

		section1->SetAllowedEntityTypes(NXOpen::Section::AllowTypesOnlyCurves);


		std::vector<NXOpen::ICurve *> curves1(18);
		curves1[0] = line4;
		curves1[1] = line6;
		curves1[2] = line16;
		curves1[3] = line9;
		curves1[4] = line12;
		curves1[5] = line17;
		curves1[6] = line1;
		curves1[7] = line2;
		curves1[8] = line3;
		curves1[9] = line15;
		curves1[10] = line18;
		curves1[11] = line14;
		curves1[12] = line13;
		curves1[13] = line8;
		curves1[14] = line5;
		curves1[15] = line11;
		curves1[16] = line10;
		curves1[17] = line7;
		NXOpen::Point3d seedPoint1(60.916666666666636, 100.0, 0.0);
		NXOpen::RegionBoundaryRule *regionBoundaryRule1;
		regionBoundaryRule1 = workPart->ScRuleFactory()->CreateRuleRegionBoundary(theSession->ActiveSketch(), curves1, seedPoint1, 0.001);

		section1->AllowSelfIntersection(false);

		std::vector<NXOpen::SelectionIntentRule *> rules1(1);
		rules1[0] = regionBoundaryRule1;
		NXOpen::Point3d helpPoint1(0.0, 0.0, 0.0);
		section1->AddToSection(rules1, nullNXOpen_NXObject, nullNXOpen_NXObject, nullNXOpen_NXObject, helpPoint1, NXOpen::Section::ModeCreate, false);

		revolveBuilder1->SetSection(section1);

		NXOpen::Expression *expression64;
		expression64 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		revolveBuilder1->SetSection(section1);

		NXOpen::Expression *expression65;
		expression65 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin2(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector1(1.0, 0.0, 0.0);
		NXOpen::Direction *direction1;
		direction1 = workPart->Directions()->CreateDirection(origin2, vector1, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *nullNXOpen_Point(NULL);
		NXOpen::Axis *axis1;
		axis1 = workPart->Axes()->CreateAxis(nullNXOpen_Point, direction1, NXOpen::SmartObject::UpdateOptionWithinModeling);

		revolveBuilder1->SetAxis(axis1);

		NXOpen::Expression *expression66;
		expression66 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);


		NXOpen::Features::DatumCsys *datumCsys1(dynamic_cast<NXOpen::Features::DatumCsys *>(workPart->Features()->FindObject("DATUM_CSYS(0)")));
		NXOpen::Point *point5(dynamic_cast<NXOpen::Point *>(datumCsys1->FindObject("POINT 1")));
		NXOpen::Xform *nullNXOpen_Xform(NULL);
		NXOpen::Point *point6;
		point6 = workPart->Points()->CreatePoint(point5, nullNXOpen_Xform, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point7;
		point7 = axis1->Point();

		axis1->SetPoint(point6);

		revolveBuilder1->SetAxis(axis1);


		revolveBuilder1->SetParentFeatureInternal(false);

		NXOpen::Features::Feature *feature2;
		feature2 = revolveBuilder1->CommitFeature();

		NXOpen::Expression *expression67(revolveBuilder1->Limits()->StartExtend()->Value());
		NXOpen::Expression *expression68(revolveBuilder1->Limits()->EndExtend()->Value());
		revolveBuilder1->Destroy();

		workPart->Expressions()->Delete(expression64);

		workPart->Expressions()->Delete(expression66);

		workPart->Expressions()->Delete(expression65);

		// ----------------------------------------------
		//   Menu: 插入(S)->草图曲线(S)->圆(C)...
		// ----------------------------------------------

		NXOpen::Features::Revolve *revolve1(dynamic_cast<NXOpen::Features::Revolve *>(feature2));
		NXOpen::Edge *edge1(dynamic_cast<NXOpen::Edge *>(revolve1->FindObject("EDGE * 1 * 18 {(0,90,-52)(0,0,s_h1.str())(0,-90,-52) REVOLVED(2)}")));
		NXOpen::Point *point8;
		point8 = workPart->Points()->CreatePoint(edge1, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::DatumAxis *datumAxis1(dynamic_cast<NXOpen::DatumAxis *>(workPart->Datums()->FindObject("DATUM_CSYS(0) Y axis")));
		NXOpen::Direction *direction2;
		direction2 = workPart->Directions()->CreateDirection(datumAxis1, NXOpen::SenseForward, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Face *face1(dynamic_cast<NXOpen::Face *>(revolve1->FindObject("FACE 18")));
		NXOpen::Xform *xform1;
		xform1 = workPart->Xforms()->CreateXformByPlaneXDirPoint(face1, direction2, point8, NXOpen::SmartObject::UpdateOptionWithinModeling, 0.625, false, false);

		NXOpen::CartesianCoordinateSystem *cartesianCoordinateSystem1;
		cartesianCoordinateSystem1 = workPart->CoordinateSystems()->CreateCoordinateSystem(xform1, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Features::DatumCsysBuilder *datumCsysBuilder1;
		datumCsysBuilder1 = workPart->Features()->CreateDatumCsysBuilder(nullNXOpen_Features_Feature);

		datumCsysBuilder1->SetCsys(cartesianCoordinateSystem1);

		datumCsysBuilder1->SetDisplayScaleFactor(1.25);

		NXOpen::Features::Feature *feature3;
		feature3 = datumCsysBuilder1->CommitFeature();

		datumCsysBuilder1->Destroy();

		NXOpen::SketchInPlaceBuilder *sketchInPlaceBuilder2;
		sketchInPlaceBuilder2 = workPart->Sketches()->CreateSketchInPlaceBuilder2(nullNXOpen_Sketch);

		sketchInPlaceBuilder2->SetCsystem(cartesianCoordinateSystem1);

		sketchInPlaceBuilder2->SetPlaneOption(NXOpen::Sketch::PlaneOptionInferred);

		theSession->Preferences()->Sketch()->SetCreateInferredConstraints(true);

		theSession->Preferences()->Sketch()->SetContinuousAutoDimensioning(true);

		theSession->Preferences()->Sketch()->SetDimensionLabel(NXOpen::Preferences::SketchPreferences::DimensionLabelTypeExpression);

		theSession->Preferences()->Sketch()->SetTextSizeFixed(true);

		theSession->Preferences()->Sketch()->SetFixedTextSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayParenthesesOnReferenceDimensions(true);

		theSession->Preferences()->Sketch()->SetDisplayReferenceGeometry(false);

		theSession->Preferences()->Sketch()->SetConstraintSymbolSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayObjectColor(false);

		theSession->Preferences()->Sketch()->SetDisplayObjectName(true);

		NXOpen::NXObject *nXObject2;
		nXObject2 = sketchInPlaceBuilder2->Commit();

		sketchInPlaceBuilder2->Destroy();

		NXOpen::Sketch *sketch2(dynamic_cast<NXOpen::Sketch *>(nXObject2));
		sketch2->Activate(NXOpen::Sketch::ViewReorientFalse);


		theSession->ActiveSketch()->Deactivate(NXOpen::Sketch::ViewReorientFalse, NXOpen::Sketch::UpdateLevelModel);



		int nErrs2;
		nErrs2 = theSession->UpdateManager()->AddToDeleteList(sketch2);

		NXOpen::Features::DatumCsys *datumCsys2(dynamic_cast<NXOpen::Features::DatumCsys *>(feature3));
		int nErrs3;
		nErrs3 = theSession->UpdateManager()->AddToDeleteList(datumCsys2);

		int nErrs4;
		nErrs4 = theSession->UpdateManager()->AddToDeleteList(point8);

		// ----------------------------------------------
		//   Menu: 插入(S)->草图(H)...
		// ----------------------------------------------

		NXOpen::SketchInPlaceBuilder *sketchInPlaceBuilder3;
		sketchInPlaceBuilder3 = workPart->Sketches()->CreateSketchInPlaceBuilder2(nullNXOpen_Sketch);

		NXOpen::Point3d origin3(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal2(0.0, 0.0, 1.0);
		NXOpen::Plane *plane2;
		plane2 = workPart->Planes()->CreatePlane(origin3, normal2, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder3->SetPlaneReference(plane2);

		NXOpen::Expression *expression69;
		expression69 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression70;
		expression70 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::SketchAlongPathBuilder *sketchAlongPathBuilder2;
		sketchAlongPathBuilder2 = workPart->Sketches()->CreateSketchAlongPathBuilder(nullNXOpen_Sketch);

		sketchAlongPathBuilder2->PlaneLocation()->Expression()->SetRightHandSide("0");

		NXOpen::Edge *edge2(dynamic_cast<NXOpen::Edge *>(revolve1->FindObject("EDGE * 5 * 6 {(73,105.6550992617015,-61)(73,0,122)(73,-105.6550992617015,-61) REVOLVED(2)}")));
		NXOpen::Point *point9;
		point9 = workPart->Points()->CreatePoint(edge2, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Direction *direction3;
		direction3 = workPart->Directions()->CreateDirection(datumAxis1, NXOpen::SenseForward, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Face *face2(dynamic_cast<NXOpen::Face *>(revolve1->FindObject("FACE 6")));
		NXOpen::Xform *xform2;
		xform2 = workPart->Xforms()->CreateXformByPlaneXDirPoint(face2, direction3, point9, NXOpen::SmartObject::UpdateOptionWithinModeling, 0.625, false, false);

		NXOpen::CartesianCoordinateSystem *cartesianCoordinateSystem2;
		cartesianCoordinateSystem2 = workPart->CoordinateSystems()->CreateCoordinateSystem(xform2, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder3->SetCsystem(cartesianCoordinateSystem2);

		NXOpen::Point3d origin4(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal3(0.0, 0.0, 1.0);
		NXOpen::Plane *plane3;
		plane3 = workPart->Planes()->CreatePlane(origin4, normal3, NXOpen::SmartObject::UpdateOptionWithinModeling);

		plane3->SetMethod(NXOpen::PlaneTypes::MethodTypeCoincident);

		std::vector<NXOpen::NXObject *> geom19(1);
		geom19[0] = face2;
		plane3->SetGeometry(geom19);

		plane3->SetFlip(false);

		plane3->SetExpression(NULL);

		plane3->SetAlternate(NXOpen::PlaneTypes::AlternateTypeOne);

		plane3->Evaluate();

		NXOpen::Point3d origin5(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal4(0.0, 0.0, 1.0);
		NXOpen::Plane *plane4;
		plane4 = workPart->Planes()->CreatePlane(origin5, normal4, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression71;
		expression71 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression72;
		expression72 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		plane4->SynchronizeToPlane(plane3);

		NXOpen::Point *point10;
		point10 = workPart->Points()->CreatePoint(edge2, NXOpen::SmartObject::UpdateOptionWithinModeling);

		plane4->SetMethod(NXOpen::PlaneTypes::MethodTypeCoincident);

		std::vector<NXOpen::NXObject *> geom20(1);
		geom20[0] = face2;
		plane4->SetGeometry(geom20);

		plane4->SetAlternate(NXOpen::PlaneTypes::AlternateTypeOne);

		plane4->Evaluate();

		NXOpen::Face *face3(dynamic_cast<NXOpen::Face *>(revolve1->FindObject("FACE 11")));
		NXOpen::Line *line19;
		line19 = workPart->Lines()->CreateFaceAxis(face3, NXOpen::SmartObject::UpdateOptionWithinModeling);

		line19->SetVisibility(NXOpen::SmartObject::VisibilityOptionVisible);

		NXOpen::Face *face4(dynamic_cast<NXOpen::Face *>(revolve1->FindObject("FACE 13")));
		NXOpen::Line *line20;
		line20 = workPart->Lines()->CreateFaceAxis(face4, NXOpen::SmartObject::UpdateOptionWithinModeling);

		line20->SetVisibility(NXOpen::SmartObject::VisibilityOptionVisible);

		NXOpen::Face *face5(dynamic_cast<NXOpen::Face *>(revolve1->FindObject("FACE 7")));
		NXOpen::Line *line21;
		line21 = workPart->Lines()->CreateFaceAxis(face5, NXOpen::SmartObject::UpdateOptionWithinModeling);

		line21->SetVisibility(NXOpen::SmartObject::VisibilityOptionVisible);

		NXOpen::Face *face6(dynamic_cast<NXOpen::Face *>(revolve1->FindObject("FACE 5")));
		NXOpen::Line *line22;
		line22 = workPart->Lines()->CreateFaceAxis(face6, NXOpen::SmartObject::UpdateOptionWithinModeling);

		line22->SetVisibility(NXOpen::SmartObject::VisibilityOptionVisible);

		NXOpen::Face *face7(dynamic_cast<NXOpen::Face *>(revolve1->FindObject("FACE 1")));
		NXOpen::Line *line23;
		line23 = workPart->Lines()->CreateFaceAxis(face7, NXOpen::SmartObject::UpdateOptionWithinModeling);

		line23->SetVisibility(NXOpen::SmartObject::VisibilityOptionVisible);


		std::vector<NXOpen::TaggedObject *> objects1(1);
		objects1[0] = line19;
		int nErrs6;
		nErrs6 = theSession->UpdateManager()->AddObjectsToDeleteList(objects1);

		std::vector<NXOpen::TaggedObject *> objects2(1);
		objects2[0] = line22;
		int nErrs7;
		nErrs7 = theSession->UpdateManager()->AddObjectsToDeleteList(objects2);

		std::vector<NXOpen::TaggedObject *> objects3(1);
		objects3[0] = line23;
		int nErrs8;
		nErrs8 = theSession->UpdateManager()->AddObjectsToDeleteList(objects3);

		std::vector<NXOpen::TaggedObject *> objects4(1);
		objects4[0] = line20;
		int nErrs9;
		nErrs9 = theSession->UpdateManager()->AddObjectsToDeleteList(objects4);

		std::vector<NXOpen::TaggedObject *> objects5(1);
		objects5[0] = line21;
		int nErrs10;
		nErrs10 = theSession->UpdateManager()->AddObjectsToDeleteList(objects5);

		theSession->Preferences()->Sketch()->SetCreateInferredConstraints(true);

		theSession->Preferences()->Sketch()->SetContinuousAutoDimensioning(true);

		theSession->Preferences()->Sketch()->SetDimensionLabel(NXOpen::Preferences::SketchPreferences::DimensionLabelTypeExpression);

		theSession->Preferences()->Sketch()->SetTextSizeFixed(true);

		theSession->Preferences()->Sketch()->SetFixedTextSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayParenthesesOnReferenceDimensions(true);

		theSession->Preferences()->Sketch()->SetDisplayReferenceGeometry(false);

		theSession->Preferences()->Sketch()->SetConstraintSymbolSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayObjectColor(false);

		theSession->Preferences()->Sketch()->SetDisplayObjectName(true);

		NXOpen::NXObject *nXObject3;
		nXObject3 = sketchInPlaceBuilder3->Commit();

		NXOpen::Sketch *sketch3(dynamic_cast<NXOpen::Sketch *>(nXObject3));
		NXOpen::Features::Feature *feature4;
		feature4 = sketch3->Feature();

		sketch3->Activate(NXOpen::Sketch::ViewReorientTrue);

		sketchInPlaceBuilder3->Destroy();

		sketchAlongPathBuilder2->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression70);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Points()->DeletePoint(point10);

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression69);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane2->DestroyPlane();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression72);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression71);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane4->DestroyPlane();

		// ----------------------------------------------
		//   Dialog Begin Circle
		// ----------------------------------------------

		std::vector<NXOpen::NXObject *> objects6(1);
		objects6[0] = theSession->ActiveSketch();
		NXOpen::AttributePropertiesBuilder *attributePropertiesBuilder1;
		attributePropertiesBuilder1 = theSession->AttributeManager()->CreateAttributePropertiesBuilder(workPart, objects6, NXOpen::AttributePropertiesBuilder::OperationTypeNone);

		attributePropertiesBuilder1->SetArray(false);

		attributePropertiesBuilder1->SetArray(false);

		attributePropertiesBuilder1->SetArray(false);

		attributePropertiesBuilder1->SetDataType(NXOpen::AttributePropertiesBaseBuilder::DataTypeOptionsString);

		attributePropertiesBuilder1->SetUnits("MilliMeter");

		std::vector<NXOpen::NXObject *> objects7(1);
		objects7[0] = theSession->ActiveSketch();
		NXOpen::FeatureGeneralPropertiesBuilder *featureGeneralPropertiesBuilder1;
		featureGeneralPropertiesBuilder1 = workPart->PropertiesManager()->CreateFeatureGeneralPropertiesBuilder(objects7);

		featureGeneralPropertiesBuilder1->SetApplyToWorkPart(true);

		std::vector<NXOpen::NXObject *> objects8(1);
		objects8[0] = theSession->ActiveSketch();
		attributePropertiesBuilder1->SetAttributeObjects(objects8);

		attributePropertiesBuilder1->SetUnits("MilliMeter");

		attributePropertiesBuilder1->DateValue()->DateItem()->SetDay(NXOpen::DateItemBuilder::DayOfMonthDay11);

		attributePropertiesBuilder1->DateValue()->DateItem()->SetMonth(NXOpen::DateItemBuilder::MonthOfYearJan);

		attributePropertiesBuilder1->DateValue()->DateItem()->SetYear("2019");

		attributePropertiesBuilder1->DateValue()->DateItem()->SetTime("00:00:00");

		attributePropertiesBuilder1->Destroy();

		featureGeneralPropertiesBuilder1->Destroy();


		// ----------------------------------------------
		//   插入(S)->草图曲线(S)->圆(C)...
		// ----------------------------------------------

		NXOpen::Expression *expression79;
		expression79 = workPart->Expressions()->CreateSystemExpression("8");

		NXOpen::NXMatrix *nXMatrix4;
		nXMatrix4 = theSession->ActiveSketch()->Orientation();

		NXOpen::Point3d center4(s1+1, h8/2, 0.0);
		NXOpen::Arc *arc4;
		arc4 = workPart->Curves()->CreateArc(center4, nXMatrix4, h10/2, 0.0, (360.0 * DEGRA));

		theSession->ActiveSketch()->AddGeometry(arc4, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::DimensionGeometry dimObject1_21;
		dimObject1_21.Geometry = arc4;
		dimObject1_21.AssocType = NXOpen::Sketch::AssocTypeNone;
		dimObject1_21.AssocValue = 0;
		dimObject1_21.HelpPoint.X = 0.0;
		dimObject1_21.HelpPoint.Y = 0.0;
		dimObject1_21.HelpPoint.Z = 0.0;
		dimObject1_21.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin21(s1+1, h8/2,h10);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint21;
		sketchDimensionalConstraint21 = theSession->ActiveSketch()->CreateDiameterDimension(dimObject1_21, dimOrigin21, expression79, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::Annotations::Dimension *dimension21;
		dimension21 = sketchDimensionalConstraint21->AssociatedDimension();

		theSession->ActiveSketch()->Update();

		NXOpen::Expression *expression80;
		expression80 = workPart->Expressions()->CreateSystemExpression("8");

		workPart->Expressions()->Edit(expression80, "8");

		workPart->Expressions()->Delete(expression80);

		// 插入(S)->设计特征(E)->拉伸(X)...

		NXOpen::Features::ExtrudeBuilder *extrudeBuilder2;
		extrudeBuilder2 = workPart->Features()->CreateExtrudeBuilder(nullNXOpen_Features_Feature);

		NXOpen::Section *section3;
		section3 = workPart->Sections()->CreateSection(0.00095, 0.001, 0.050000000000000003);

		extrudeBuilder2->SetSection(section3);

		extrudeBuilder2->AllowSelfIntersectingSection(true);

		NXOpen::Expression *expression81;
		expression81 = workPart->Expressions()->CreateSystemExpressionWithUnits("2.00", unit2);

		extrudeBuilder2->SetDistanceTolerance(0.001);

		extrudeBuilder2->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies7(1);
		extrudeBuilder2->BooleanOperation()->SetTargetBodies(targetBodies7);

		extrudeBuilder2->Limits()->StartExtend()->Value()->SetRightHandSide("-30");

		extrudeBuilder2->Limits()->EndExtend()->Value()->SetRightHandSide("5");

		extrudeBuilder2->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies8(1);
		NXOpen::Body *nullNXOpen_Body(NULL);
		targetBodies8[0] = nullNXOpen_Body;
		extrudeBuilder2->BooleanOperation()->SetTargetBodies(targetBodies8);

		extrudeBuilder2->Draft()->FrontDraftAngle()->SetRightHandSide("2");

		extrudeBuilder2->Draft()->BackDraftAngle()->SetRightHandSide("2");

		extrudeBuilder2->Offset()->StartOffset()->SetRightHandSide("0");

		extrudeBuilder2->Offset()->EndOffset()->SetRightHandSide("5");

		NXOpen::GeometricUtilities::SmartVolumeProfileBuilder *smartVolumeProfileBuilder3;
		smartVolumeProfileBuilder3 = extrudeBuilder2->SmartVolumeProfile();

		smartVolumeProfileBuilder3->SetOpenProfileSmartVolumeOption(false);

		section3->SetDistanceTolerance(0.001);

		section3->SetChainingTolerance(0.00095);

		section3->SetAllowedEntityTypes(NXOpen::Section::AllowTypesOnlyCurves);


		std::vector<NXOpen::ICurve *> curves3(1);
		curves3[0] = arc4;
		//NXOpen::Point3d seedPoint3(s1+1, 114.33333333333333, 0.0);

		//NXOpen::RegionBoundaryRule *regionBoundaryRule3;
		//regionBoundaryRule3 = workPart->ScRuleFactory()->CreateRuleRegionBoundary(theSession->ActiveSketch(), curves3, seedPoint3, 0.001);
		CurveFeatureRule *curveFeatureRule1;
		std::vector<Features::Feature *> Rulefeatures(1);


		//添加的 begin
		Rulefeatures[0] = theSession->ActiveSketch()->Feature();
		curveFeatureRule1 = workPart->ScRuleFactory()->CreateRuleCurveFeature(Rulefeatures);
		// end



		//regionBoundaryRule3 = workPart->ScRuleFactory()->CreateRuleRegionBoundary(Rulefeatures);
		section3->AllowSelfIntersection(true);

		std::vector<NXOpen::SelectionIntentRule *> rules3(1);
		//std::vector<NXOpen::CurveFeatureRule *> rules3(1);

		//rules3[0] = regionBoundaryRule3;
		rules3[0] = curveFeatureRule1;

		NXOpen::Point3d helpPoint3(0.0, 0.0, 0.0);
		section3->AddToSection(rules3, nullNXOpen_NXObject, nullNXOpen_NXObject, nullNXOpen_NXObject, helpPoint3, NXOpen::Section::ModeCreate, false);

		NXOpen::Direction *direction6;
		direction6 = workPart->Directions()->CreateDirection(theSession->ActiveSketch(), NXOpen::SenseForward, NXOpen::SmartObject::UpdateOptionWithinModeling);

		extrudeBuilder2->SetDirection(direction6);

		std::vector<NXOpen::Body *> targetBodies9(1);
		NXOpen::Body *body1(dynamic_cast<NXOpen::Body *>(workPart->Bodies()->FindObject("REVOLVED(2)")));
		targetBodies9[0] = body1;
		extrudeBuilder2->BooleanOperation()->SetTargetBodies(targetBodies9);

		extrudeBuilder2->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeUnite);

		std::vector<NXOpen::Body *> targetBodies10(1);
		targetBodies10[0] = body1;
		extrudeBuilder2->BooleanOperation()->SetTargetBodies(targetBodies10);

		NXOpen::Expression *expression82;
		expression82 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		extrudeBuilder2->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeUnite);

		std::vector<NXOpen::Body *> targetBodies11(1);
		targetBodies11[0] = body1;
		extrudeBuilder2->BooleanOperation()->SetTargetBodies(targetBodies11);

		extrudeBuilder2->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeSubtract);

		std::vector<NXOpen::Body *> targetBodies12(1);
		targetBodies12[0] = body1;
		extrudeBuilder2->BooleanOperation()->SetTargetBodies(targetBodies12);

		NXOpen::Direction *direction7;
		direction7 = extrudeBuilder2->Direction();

		bool success2;
		success2 = direction7->ReverseDirection();

		extrudeBuilder2->SetDirection(direction7);

		//extrudeBuilder2->Limits()->EndExtend()->Value()->SetRightHandSide(s_s3.str());
		extrudeBuilder2->Limits()->EndExtend()->Value()->SetRightHandSide("100");


		extrudeBuilder2->SetParentFeatureInternal(false);

		NXOpen::Features::Feature *feature6;
		feature6 = extrudeBuilder2->CommitFeature();

		NXOpen::Expression *expression83(extrudeBuilder2->Limits()->StartExtend()->Value());
		NXOpen::Expression *expression84(extrudeBuilder2->Limits()->EndExtend()->Value());
		extrudeBuilder2->Destroy();

		workPart->Expressions()->Delete(expression81);

		workPart->Expressions()->Delete(expression82);

		//   插入(S)->关联复制(A)->阵列特征(A)...

		NXOpen::Features::PatternFeatureBuilder *patternFeatureBuilder1;
		patternFeatureBuilder1 = workPart->Features()->CreatePatternFeatureBuilder(nullNXOpen_Features_Feature);

		NXOpen::Expression *expression85;
		expression85 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression86;
		expression86 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin6(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal5(0.0, 0.0, 1.0);
		NXOpen::Plane *plane5;
		plane5 = workPart->Planes()->CreatePlane(origin6, normal5, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder1->PatternService()->MirrorDefinition()->SetNewPlane(plane5);

		NXOpen::Expression *expression87;
		expression87 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression88;
		expression88 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression89;
		expression89 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		patternFeatureBuilder1->PatternService()->PatternFill()->FillMargin()->SetRightHandSide("0");

		patternFeatureBuilder1->PatternService()->PatternOrientation()->SetCircularOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder1->PatternService()->PatternOrientation()->SetAlongOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumNormalToPath);

		patternFeatureBuilder1->PatternService()->PatternOrientation()->SetPolygonOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder1->PatternService()->PatternOrientation()->SetSpiralOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder1->PatternService()->PatternOrientation()->SetMirrorOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->XSpacing()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->XSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->XSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->YSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->YSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->YSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->NCopies()->SetRightHandSide(s_n.str());

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->PitchAngle()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->SpanAngle()->SetRightHandSide("360");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->SetXPathOption(NXOpen::GeometricUtilities::AlongPathPattern::PathOptionsOffset);

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->XOnPathSpacing()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->XOnPathSpacing()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->XOnPathSpacing()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->SetYDirectionOption(NXOpen::GeometricUtilities::AlongPathPattern::YDirectionOptionsSection);

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->SetYPathOption(NXOpen::GeometricUtilities::AlongPathPattern::PathOptionsOffset);

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YOnPathSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YOnPathSpacing()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YOnPathSpacing()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->NumberOfTurns()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->TotalAngle()->SetRightHandSide("360");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->RadialPitch()->SetRightHandSide("50");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->PitchAlongSpiral()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->PitchAlongSpiral()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->PitchAlongSpiral()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->PolygonSpacing()->NCopies()->SetRightHandSide("4");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->PolygonSpacing()->PitchDistance()->SetRightHandSide("25");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->PolygonSpacing()->SpanAngle()->SetRightHandSide("360");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->NumberOfSides()->SetRightHandSide("6");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->RadialSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->RadialSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->RadialSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder1->SetPatternMethod(NXOpen::Features::PatternFeatureBuilder::PatternMethodOptionsVariational);

		NXOpen::Point3d origin7(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector2(1.0, 0.0, 0.0);
		NXOpen::Direction *direction8;
		direction8 = workPart->Directions()->CreateDirection(origin7, vector2, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->HorizontalRef()->SetHorizontalRefVector(direction8);

		NXOpen::Expression *expression90;
		expression90 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		std::vector<NXOpen::Features::Feature *> objects10(1);
		NXOpen::Features::Extrude *extrude1(dynamic_cast<NXOpen::Features::Extrude *>(feature6));
		objects10[0] = extrude1;
		bool added1;
		added1 = patternFeatureBuilder1->FeatureList()->Add(objects10);

		// 参考点 (63.500000, 113.000000, 0.000000) 从选定特征自动判断。
		NXOpen::Point3d coordinates2(63.5, 113, 0.0);
		NXOpen::Point *point11;
		point11 = workPart->Points()->CreatePoint(coordinates2);

		patternFeatureBuilder1->ReferencePointService()->SetPoint(point11);

		patternFeatureBuilder1->PatternService()->SetPatternType(NXOpen::GeometricUtilities::PatternDefinition::PatternEnumCircular);

		NXOpen::Point3d origin8(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector3(1.0, 0.0, 0.0);
		NXOpen::Direction *direction9;
		direction9 = workPart->Directions()->CreateDirection(origin8, vector3, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder1->PatternService()->CircularDefinition()->HorizontalRef()->SetHorizontalRefVector(direction9);

		NXOpen::Expression *expression91;
		expression91 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		// ----------------------------------------------
		//   Dialog Begin Pattern Feature
		// ----------------------------------------------
		NXOpen::Expression *expression92;
		expression92 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin9(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector4(1.0, 0.0, 0.0);
		NXOpen::Direction *direction10;
		direction10 = workPart->Directions()->CreateDirection(origin9, vector4, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Axis *axis2;
		axis2 = workPart->Axes()->CreateAxis(nullNXOpen_Point, direction10, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder1->PatternService()->CircularDefinition()->SetRotationAxis(axis2);

		NXOpen::Expression *expression93;
		expression93 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);


		NXOpen::Point *point12;
		point12 = workPart->Points()->CreatePoint(point5, nullNXOpen_Xform, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::NXObject *nXObject6;
		NXOpen::Xform *xform3;
		xform3 = workPart->Xforms()->CreateExtractXform(point5, NXOpen::SmartObject::UpdateOptionWithinModeling, false, &nXObject6);

		NXOpen::Point *point13(dynamic_cast<NXOpen::Point *>(nXObject6));
		NXOpen::Point *point14;
		point14 = workPart->Points()->CreatePoint(point13, nullNXOpen_Xform, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point15;
		point15 = axis2->Point();

		axis2->SetPoint(point14);

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->PitchAngle()->SetRightHandSide("360");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->SetSpaceType(NXOpen::GeometricUtilities::PatternSpacing::SpacingTypeSpan);

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->SpanAngle()->SetRightHandSide("360");


		patternFeatureBuilder1->SetParentFeatureInternal(false);

		NXOpen::NXObject *nXObject7;
		nXObject7 = patternFeatureBuilder1->Commit();

		NXOpen::Expression *expression94(patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->NCopies());
		NXOpen::Expression *expression95(patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->SpanDistance());
		NXOpen::Expression *expression96(patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->PitchDistance());
		NXOpen::Expression *expression97(patternFeatureBuilder1->PatternService()->CircularDefinition()->HorizontalRef()->RotationAngle());
		NXOpen::Expression *expression98(patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->NCopies());
		NXOpen::Expression *expression99(patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->SpanAngle());
		NXOpen::Expression *expression100(patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->PitchDistance());
		NXOpen::Expression *expression101(patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->PitchAngle());
		patternFeatureBuilder1->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression88);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression93);

		workPart->Expressions()->Delete(expression85);

		workPart->Expressions()->Delete(expression86);

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression87);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression89);

		workPart->Expressions()->Delete(expression90);

		workPart->Expressions()->Delete(expression92);

		workPart->Expressions()->Delete(expression91);


		NXOpen::Features::PatternFeatureBuilder *patternFeatureBuilder2;
		patternFeatureBuilder2 = workPart->Features()->CreatePatternFeatureBuilder(nullNXOpen_Features_Feature);

		NXOpen::Expression *expression102;
		expression102 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression103;
		expression103 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin10(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal6(0.0, 0.0, 1.0);
		NXOpen::Plane *plane6;
		plane6 = workPart->Planes()->CreatePlane(origin10, normal6, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder2->PatternService()->MirrorDefinition()->SetNewPlane(plane6);

		NXOpen::Expression *expression104;
		expression104 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression105;
		expression105 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression106;
		expression106 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		patternFeatureBuilder2->PatternService()->SetPatternType(NXOpen::GeometricUtilities::PatternDefinition::PatternEnumCircular);

		patternFeatureBuilder2->PatternService()->PatternFill()->FillMargin()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetCircularOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetAlongOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumNormalToPath);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetPolygonOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetSpiralOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetMirrorOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetHelixOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->AlongPathRotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->XSpacing()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->XSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->XSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->YSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->YSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->YSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->SetSpaceType(NXOpen::GeometricUtilities::PatternSpacing::SpacingTypeSpan);

		patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->NCopies()->SetRightHandSide("12");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->PitchAngle()->SetRightHandSide("360");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->SpanAngle()->SetRightHandSide("360");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->RadialSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->RadialSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->RadialSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->SetXPathOption(NXOpen::GeometricUtilities::AlongPathPattern::PathOptionsOffset);

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->XOnPathSpacing()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->XOnPathSpacing()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->XOnPathSpacing()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->SetYDirectionOption(NXOpen::GeometricUtilities::AlongPathPattern::YDirectionOptionsSection);

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->SetYPathOption(NXOpen::GeometricUtilities::AlongPathPattern::PathOptionsOffset);

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YOnPathSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YOnPathSpacing()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YOnPathSpacing()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->NumberOfTurns()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->TotalAngle()->SetRightHandSide("360");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->RadialPitch()->SetRightHandSide("50");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->PitchAlongSpiral()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->PitchAlongSpiral()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->PitchAlongSpiral()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->PolygonSpacing()->NCopies()->SetRightHandSide("4");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->PolygonSpacing()->PitchDistance()->SetRightHandSide("25");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->PolygonSpacing()->SpanAngle()->SetRightHandSide("360");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->NumberOfSides()->SetRightHandSide("6");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->RadialSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->RadialSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->RadialSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->CountOfInstances()->SetRightHandSide("6");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->NumberOfTurns()->SetRightHandSide("2");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->AnglePitch()->SetRightHandSide("30");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->DistancePitch()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->HelixPitch()->SetRightHandSide("50");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->HelixSpan()->SetRightHandSide("100");

		patternFeatureBuilder2->SetPatternMethod(NXOpen::Features::PatternFeatureBuilder::PatternMethodOptionsVariational);

		NXOpen::Point3d origin11(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector5(1.0, 0.0, 0.0);
		NXOpen::Direction *direction11;
		direction11 = workPart->Directions()->CreateDirection(origin11, vector5, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder2->PatternService()->CircularDefinition()->HorizontalRef()->SetHorizontalRefVector(direction11);

		NXOpen::Expression *expression107;
		expression107 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		// ----------------------------------------------
		//   Dialog Begin Pattern Feature
		// ----------------------------------------------
		patternFeatureBuilder2->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression105);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression102);

		workPart->Expressions()->Delete(expression103);

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression104);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression106);

		workPart->Expressions()->Delete(expression107);

		// ----------------------------------------------
		//   Menu: 插入(S)->草图(H)...
		// ----------------------------------------------

		NXOpen::SketchInPlaceBuilder *sketchInPlaceBuilder4;
		sketchInPlaceBuilder4 = workPart->Sketches()->CreateSketchInPlaceBuilder2(nullNXOpen_Sketch);

		NXOpen::Point3d origin12(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal7(0.0, 0.0, 1.0);
		NXOpen::Plane *plane7;
		plane7 = workPart->Planes()->CreatePlane(origin12, normal7, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder4->SetPlaneReference(plane7);

		NXOpen::Expression *expression108;
		expression108 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression109;
		expression109 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::SketchAlongPathBuilder *sketchAlongPathBuilder3;
		sketchAlongPathBuilder3 = workPart->Sketches()->CreateSketchAlongPathBuilder(nullNXOpen_Sketch);

		sketchAlongPathBuilder3->PlaneLocation()->Expression()->SetRightHandSide("0");

		NXOpen::Edge *edge4(dynamic_cast<NXOpen::Edge *>(revolve1->FindObject("EDGE * 11 * 12 {(58.4999999999999,83.1384387633061,-48)(58.4999999999999,0,96)(58.4999999999999,-83.1384387633061,-48.0000000000001) REVOLVED(2)}")));
		NXOpen::Point *point16;
		point16 = workPart->Points()->CreatePoint(edge4, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Direction *direction12;
		direction12 = workPart->Directions()->CreateDirection(datumAxis1, NXOpen::SenseForward, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Face *face8(dynamic_cast<NXOpen::Face *>(revolve1->FindObject("FACE 12")));
		NXOpen::Xform *xform4;
		xform4 = workPart->Xforms()->CreateXformByPlaneXDirPoint(face8, direction12, point16, NXOpen::SmartObject::UpdateOptionWithinModeling, 0.625, false, false);

		NXOpen::CartesianCoordinateSystem *cartesianCoordinateSystem3;
		cartesianCoordinateSystem3 = workPart->CoordinateSystems()->CreateCoordinateSystem(xform4, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder4->SetCsystem(cartesianCoordinateSystem3);

		NXOpen::Point3d origin13(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal8(0.0, 0.0, 1.0);
		NXOpen::Plane *plane8;
		plane8 = workPart->Planes()->CreatePlane(origin13, normal8, NXOpen::SmartObject::UpdateOptionWithinModeling);

		plane8->SetMethod(NXOpen::PlaneTypes::MethodTypeCoincident);

		std::vector<NXOpen::NXObject *> geom21(1);
		geom21[0] = face8;
		plane8->SetGeometry(geom21);

		plane8->SetFlip(false);

		plane8->SetExpression(NULL);

		plane8->SetAlternate(NXOpen::PlaneTypes::AlternateTypeOne);

		plane8->Evaluate();

		NXOpen::Point3d origin14(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal9(0.0, 0.0, 1.0);
		NXOpen::Plane *plane9;
		plane9 = workPart->Planes()->CreatePlane(origin14, normal9, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression110;
		expression110 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression111;
		expression111 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		plane9->SynchronizeToPlane(plane8);

		NXOpen::Point *point17;
		point17 = workPart->Points()->CreatePoint(edge4, NXOpen::SmartObject::UpdateOptionWithinModeling);

		plane9->SetMethod(NXOpen::PlaneTypes::MethodTypeCoincident);

		std::vector<NXOpen::NXObject *> geom22(1);
		geom22[0] = face8;
		plane9->SetGeometry(geom22);

		plane9->SetAlternate(NXOpen::PlaneTypes::AlternateTypeOne);

		plane9->Evaluate();

		theSession->Preferences()->Sketch()->SetCreateInferredConstraints(true);

		theSession->Preferences()->Sketch()->SetContinuousAutoDimensioning(true);

		theSession->Preferences()->Sketch()->SetDimensionLabel(NXOpen::Preferences::SketchPreferences::DimensionLabelTypeExpression);

		theSession->Preferences()->Sketch()->SetTextSizeFixed(true);

		theSession->Preferences()->Sketch()->SetFixedTextSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayParenthesesOnReferenceDimensions(true);

		theSession->Preferences()->Sketch()->SetDisplayReferenceGeometry(false);

		theSession->Preferences()->Sketch()->SetConstraintSymbolSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayObjectColor(false);

		theSession->Preferences()->Sketch()->SetDisplayObjectName(true);

		NXOpen::NXObject *nXObject8;
		nXObject8 = sketchInPlaceBuilder4->Commit();

		NXOpen::Sketch *sketch4(dynamic_cast<NXOpen::Sketch *>(nXObject8));
		NXOpen::Features::Feature *feature7;
		feature7 = sketch4->Feature();

		sketch4->Activate(NXOpen::Sketch::ViewReorientTrue);


		sketchInPlaceBuilder4->Destroy();

		sketchAlongPathBuilder3->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression109);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Points()->DeletePoint(point17);

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression108);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane7->DestroyPlane();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression111);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression110);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane9->DestroyPlane();

		//  插入(S)->草图曲线(S)->圆(C)...                       绘制针齿部分


		NXOpen::NXMatrix *nXMatrix5;
		nXMatrix5 = theSession->ActiveSketch()->Orientation();

		NXOpen::Point3d center5(s1+1-s4, h9/2, 0.0);
		NXOpen::Arc *arc5;
		arc5 = workPart->Curves()->CreateArc(center5, nXMatrix5, h11, 0.0, (360.0 * DEGRA));

		theSession->ActiveSketch()->AddGeometry(arc5, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_24;
		geom1_24.Geometry = arc5;
		geom1_24.PointType = NXOpen::Sketch::ConstraintPointTypeArcCenter;
		geom1_24.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_24;
		geom2_24.Geometry = line12;
		geom2_24.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_24.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint38;
		sketchGeometricConstraint38 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_24, geom2_24);

		NXOpen::Sketch::ConstraintGeometry conGeom1_2;
		NXOpen::Edge *edge5(dynamic_cast<NXOpen::Edge *>(revolve1->FindObject("EDGE * 12 * 13 {(58.4999999999999,74.0451720235695,-42.75)(58.4999999999999,0,85.5)(58.4999999999999,-74.0451720235695,-42.75) REVOLVED(2)}")));
		conGeom1_2.Geometry = edge5;
		conGeom1_2.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		conGeom1_2.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry conGeom2_2;
		conGeom2_2.Geometry = arc5;
		conGeom2_2.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		conGeom2_2.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometryHelp help2;
		help2.Type = NXOpen::Sketch::ConstraintGeometryHelpTypePoint;
		help2.Point.X = 0;
			help2.Point.Y = 0;
		help2.Point.Z = 0;
		help2.Parameter = 0.0;
		NXOpen::SketchHelpedGeometricConstraint *sketchHelpedGeometricConstraint2;
		try
		{
			// 输入对象不是有效顶点
			sketchHelpedGeometricConstraint2 = theSession->ActiveSketch()->CreatePointOnCurveConstraint(conGeom1_2, conGeom2_2, help2);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(910035);
		}

		NXOpen::Sketch::DimensionGeometry dimObject1_22;
		dimObject1_22.Geometry = arc5;
		dimObject1_22.AssocType = NXOpen::Sketch::AssocTypeNone;
		dimObject1_22.AssocValue = 0;
		dimObject1_22.HelpPoint.X = 0.0;
		dimObject1_22.HelpPoint.Y = 0.0;
		dimObject1_22.HelpPoint.Z = 0.0;
		dimObject1_22.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin22(s1 + 1 - s4, h9/2, 4.3151169461418482);   //最后这个是直径吗？
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint22;
		NXOpen::Expression *nullNXOpen_Expression(NULL);
		sketchDimensionalConstraint22 = theSession->ActiveSketch()->CreateDiameterDimension(dimObject1_22, dimOrigin22, nullNXOpen_Expression, NXOpen::Sketch::DimensionOptionCreateAsAutomatic);

		NXOpen::Annotations::Dimension *dimension22;
		dimension22 = sketchDimensionalConstraint22->AssociatedDimension();

		NXOpen::Expression *expression112;
		expression112 = sketchDimensionalConstraint22->AssociatedExpression();

		theSession->ActiveSketch()->Update();

		// ----------------------------------------------
		//   Dialog Begin Circle
		// ----------------------------------------------
		// ----------------------------------------------
		//   Menu: 插入(S)->设计特征(E)->拉伸(X)...
		// ----------------------------------------------
		NXOpen::Features::ExtrudeBuilder *extrudeBuilder3;
		extrudeBuilder3 = workPart->Features()->CreateExtrudeBuilder(nullNXOpen_Features_Feature);

		NXOpen::Section *section4;
		section4 = workPart->Sections()->CreateSection(0.00095, 0.001, 0.050000000000000003);

		extrudeBuilder3->SetSection(section4);

		extrudeBuilder3->AllowSelfIntersectingSection(true);

		NXOpen::Expression *expression113;
		expression113 = workPart->Expressions()->CreateSystemExpressionWithUnits("2.00", unit2);

		extrudeBuilder3->SetDistanceTolerance(0.001);

		extrudeBuilder3->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies13(1);
		targetBodies13[0] = nullNXOpen_Body;
		extrudeBuilder3->BooleanOperation()->SetTargetBodies(targetBodies13);

		extrudeBuilder3->Limits()->StartExtend()->Value()->SetRightHandSide("-30");

		extrudeBuilder3->Limits()->EndExtend()->Value()->SetRightHandSide(s_s5.str());

		extrudeBuilder3->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeSubtract);

		std::vector<NXOpen::Body *> targetBodies14(1);
		targetBodies14[0] = body1;
		extrudeBuilder3->BooleanOperation()->SetTargetBodies(targetBodies14);

		extrudeBuilder3->Draft()->FrontDraftAngle()->SetRightHandSide("2");

		extrudeBuilder3->Draft()->BackDraftAngle()->SetRightHandSide("2");

		extrudeBuilder3->Offset()->StartOffset()->SetRightHandSide("0");

		extrudeBuilder3->Offset()->EndOffset()->SetRightHandSide("5");

		NXOpen::GeometricUtilities::SmartVolumeProfileBuilder *smartVolumeProfileBuilder4;
		smartVolumeProfileBuilder4 = extrudeBuilder3->SmartVolumeProfile();

		smartVolumeProfileBuilder4->SetOpenProfileSmartVolumeOption(false);

		smartVolumeProfileBuilder4->SetCloseProfileRule(NXOpen::GeometricUtilities::SmartVolumeProfileBuilder::CloseProfileRuleTypeFci);

		section4->SetDistanceTolerance(0.001);

		section4->SetChainingTolerance(0.00095);

		section4->SetAllowedEntityTypes(NXOpen::Section::AllowTypesOnlyCurves);


		std::vector<NXOpen::ICurve *> curves4(1);
		curves4[0] = arc5;






		//NXOpen::Point3d seedPoint3(s1+1, 114.33333333333333, 0.0);

		//NXOpen::RegionBoundaryRule *regionBoundaryRule3;
		//regionBoundaryRule3 = workPart->ScRuleFactory()->CreateRuleRegionBoundary(theSession->ActiveSketch(), curves3, seedPoint3, 0.001);
		CurveFeatureRule *curveFeatureRule2;
		std::vector<Features::Feature *> Rulefeaturess(1);

		//
		//添加的 begin
		          Rulefeaturess[0] = theSession->ActiveSketch()->Feature();
		         curveFeatureRule2 = workPart->ScRuleFactory()->CreateRuleCurveFeature(Rulefeaturess);
		// end



		//regionBoundaryRule3 = workPart->ScRuleFactory()->CreateRuleRegionBoundary(Rulefeatures);
		           section4->AllowSelfIntersection(true);

		            std::vector<NXOpen::SelectionIntentRule *> rules4(1);
		//std::vector<NXOpen::CurveFeatureRule *> rules3(1);

		//rules3[0] = regionBoundaryRule3;
		//







					rules4[0] = curveFeatureRule2;


		//NXOpen::Point3d seedPoint4(s1+1-s4, 86.974031603862542, 0.0);
		//NXOpen::RegionBoundaryRule *regionBoundaryRule4;
		//regionBoundaryRule4 = workPart->ScRuleFactory()->CreateRuleRegionBoundary(theSession->ActiveSketch(), curves4, seedPoint4, 0.001);

		//section4->AllowSelfIntersection(true);

		//std::vector<NXOpen::SelectionIntentRule *> rules4(1);
		//rules4[0] = regionBoundaryRule4;






		NXOpen::Point3d helpPoint4(0.0, 0.0, 0.0);
		section4->AddToSection(rules4, nullNXOpen_NXObject, nullNXOpen_NXObject, nullNXOpen_NXObject, helpPoint4, NXOpen::Section::ModeCreate, false);

		NXOpen::Direction *direction13;
		direction13 = workPart->Directions()->CreateDirection(theSession->ActiveSketch(), NXOpen::SenseForward, NXOpen::SmartObject::UpdateOptionWithinModeling);

		extrudeBuilder3->SetDirection(direction13);

		NXOpen::Expression *expression114;
		expression114 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Direction *direction14;
		direction14 = extrudeBuilder3->Direction();

		bool success3;
		success3 = direction14->ReverseDirection();

		extrudeBuilder3->SetDirection(direction14);

		//extrudeBuilder3->Limits()->EndExtend()->Value()->SetRightHandSide(s_s5.str());


		extrudeBuilder3->Limits()->EndExtend()->Value()->SetRightHandSide("100");
		extrudeBuilder3->SetParentFeatureInternal(false);

		NXOpen::Features::Feature *feature8;
		feature8 = extrudeBuilder3->CommitFeature();

		NXOpen::Expression *expression115(extrudeBuilder3->Limits()->StartExtend()->Value());
		NXOpen::Expression *expression116(extrudeBuilder3->Limits()->EndExtend()->Value());
		extrudeBuilder3->Destroy();

		workPart->Expressions()->Delete(expression113);

		workPart->Expressions()->Delete(expression114);

		// ----------------------------------------------
		//   Menu: 插入(S)->关联复制(A)->阵列特征(A)...
		// ----------------------------------------------

		NXOpen::Features::PatternFeatureBuilder *patternFeatureBuilder3;
		patternFeatureBuilder3 = workPart->Features()->CreatePatternFeatureBuilder(nullNXOpen_Features_Feature);

		NXOpen::Expression *expression117;
		expression117 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression118;
		expression118 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin15(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal10(0.0, 0.0, 1.0);
		NXOpen::Plane *plane10;
		plane10 = workPart->Planes()->CreatePlane(origin15, normal10, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder3->PatternService()->MirrorDefinition()->SetNewPlane(plane10);

		NXOpen::Expression *expression119;
		expression119 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression120;
		expression120 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression121;
		expression121 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		patternFeatureBuilder3->PatternService()->SetPatternType(NXOpen::GeometricUtilities::PatternDefinition::PatternEnumCircular);

		patternFeatureBuilder3->PatternService()->PatternFill()->FillMargin()->SetRightHandSide("0");

		patternFeatureBuilder3->PatternService()->PatternOrientation()->SetCircularOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder3->PatternService()->PatternOrientation()->SetAlongOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumNormalToPath);

		patternFeatureBuilder3->PatternService()->PatternOrientation()->SetPolygonOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder3->PatternService()->PatternOrientation()->SetSpiralOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder3->PatternService()->PatternOrientation()->SetMirrorOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder3->PatternService()->PatternOrientation()->SetHelixOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder3->PatternService()->PatternOrientation()->AlongPathRotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder3->PatternService()->RectangularDefinition()->XSpacing()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder3->PatternService()->RectangularDefinition()->XSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder3->PatternService()->RectangularDefinition()->XSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder3->PatternService()->RectangularDefinition()->YSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder3->PatternService()->RectangularDefinition()->YSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder3->PatternService()->RectangularDefinition()->YSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder3->PatternService()->RectangularDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder3->PatternService()->CircularDefinition()->AngularSpacing()->SetSpaceType(NXOpen::GeometricUtilities::PatternSpacing::SpacingTypeSpan);

		patternFeatureBuilder3->PatternService()->CircularDefinition()->AngularSpacing()->NCopies()->SetRightHandSide("12");

		patternFeatureBuilder3->PatternService()->CircularDefinition()->AngularSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder3->PatternService()->CircularDefinition()->AngularSpacing()->PitchAngle()->SetRightHandSide("360");

		patternFeatureBuilder3->PatternService()->CircularDefinition()->AngularSpacing()->SpanAngle()->SetRightHandSide("360");

		patternFeatureBuilder3->PatternService()->CircularDefinition()->RadialSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder3->PatternService()->CircularDefinition()->RadialSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder3->PatternService()->CircularDefinition()->RadialSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder3->PatternService()->CircularDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->SetXPathOption(NXOpen::GeometricUtilities::AlongPathPattern::PathOptionsOffset);

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->XOnPathSpacing()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->XOnPathSpacing()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->XOnPathSpacing()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->SetYDirectionOption(NXOpen::GeometricUtilities::AlongPathPattern::YDirectionOptionsSection);

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->SetYPathOption(NXOpen::GeometricUtilities::AlongPathPattern::PathOptionsOffset);

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->YOnPathSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->YOnPathSpacing()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->YOnPathSpacing()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->YSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->YSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder3->PatternService()->AlongPathDefinition()->YSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder3->PatternService()->SpiralDefinition()->NumberOfTurns()->SetRightHandSide("1");

		patternFeatureBuilder3->PatternService()->SpiralDefinition()->TotalAngle()->SetRightHandSide("360");

		patternFeatureBuilder3->PatternService()->SpiralDefinition()->RadialPitch()->SetRightHandSide("50");

		patternFeatureBuilder3->PatternService()->SpiralDefinition()->PitchAlongSpiral()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder3->PatternService()->SpiralDefinition()->PitchAlongSpiral()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder3->PatternService()->SpiralDefinition()->PitchAlongSpiral()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder3->PatternService()->SpiralDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder3->PatternService()->PolygonDefinition()->PolygonSpacing()->NCopies()->SetRightHandSide("4");

		patternFeatureBuilder3->PatternService()->PolygonDefinition()->PolygonSpacing()->PitchDistance()->SetRightHandSide("25");

		patternFeatureBuilder3->PatternService()->PolygonDefinition()->PolygonSpacing()->SpanAngle()->SetRightHandSide("360");

		patternFeatureBuilder3->PatternService()->PolygonDefinition()->NumberOfSides()->SetRightHandSide("6");

		patternFeatureBuilder3->PatternService()->PolygonDefinition()->RadialSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder3->PatternService()->PolygonDefinition()->RadialSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder3->PatternService()->PolygonDefinition()->RadialSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder3->PatternService()->PolygonDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder3->PatternService()->HelixDefinition()->CountOfInstances()->SetRightHandSide("6");

		patternFeatureBuilder3->PatternService()->HelixDefinition()->NumberOfTurns()->SetRightHandSide("2");

		patternFeatureBuilder3->PatternService()->HelixDefinition()->AnglePitch()->SetRightHandSide("30");

		patternFeatureBuilder3->PatternService()->HelixDefinition()->DistancePitch()->SetRightHandSide("10");

		patternFeatureBuilder3->PatternService()->HelixDefinition()->HelixPitch()->SetRightHandSide("50");

		patternFeatureBuilder3->PatternService()->HelixDefinition()->HelixSpan()->SetRightHandSide("100");

		patternFeatureBuilder3->SetPatternMethod(NXOpen::Features::PatternFeatureBuilder::PatternMethodOptionsVariational);

		NXOpen::Point3d origin16(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector6(1.0, 0.0, 0.0);
		NXOpen::Direction *direction15;
		direction15 = workPart->Directions()->CreateDirection(origin16, vector6, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder3->PatternService()->CircularDefinition()->HorizontalRef()->SetHorizontalRefVector(direction15);

		NXOpen::Expression *expression122;
		expression122 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		std::vector<NXOpen::Features::Feature *> objects11(1);
		NXOpen::Features::Extrude *extrude2(dynamic_cast<NXOpen::Features::Extrude *>(feature8));
		objects11[0] = extrude2;
		bool added2;
		added2 = patternFeatureBuilder3->FeatureList()->Add(objects11);

		// 参考点 (63.500000, 113.000000, 0.000000) 从选定特征自动判断。
		NXOpen::Point3d coordinates3(44.5, 88.268665557897137, 0);
		NXOpen::Point *point18;
		point18 = workPart->Points()->CreatePoint(coordinates3);

		patternFeatureBuilder3->ReferencePointService()->SetPoint(point18);

		NXOpen::Expression *expression123;
		expression123 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin17(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector7(1.0, 0.0, 0.0);
		NXOpen::Direction *direction16;
		direction16 = workPart->Directions()->CreateDirection(origin17, vector7, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Axis *axis3;
		axis3 = workPart->Axes()->CreateAxis(nullNXOpen_Point, direction16, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder3->PatternService()->CircularDefinition()->SetRotationAxis(axis3);

		NXOpen::Expression *expression124;
		expression124 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point *point19;
		point19 = workPart->Points()->CreatePoint(point13, nullNXOpen_Xform, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point20;
		point20 = axis3->Point();

		axis3->SetPoint(point19);

		patternFeatureBuilder3->PatternService()->CircularDefinition()->AngularSpacing()->NCopies()->SetRightHandSide(s_zb.str());

		patternFeatureBuilder3->SetParentFeatureInternal(false);

		NXOpen::NXObject *nXObject9;
		nXObject9 = patternFeatureBuilder3->Commit();

		NXOpen::Expression *expression125(patternFeatureBuilder3->PatternService()->CircularDefinition()->RadialSpacing()->NCopies());
		NXOpen::Expression *expression126(patternFeatureBuilder3->PatternService()->CircularDefinition()->RadialSpacing()->SpanDistance());
		NXOpen::Expression *expression127(patternFeatureBuilder3->PatternService()->CircularDefinition()->RadialSpacing()->PitchDistance());
		NXOpen::Expression *expression128(patternFeatureBuilder3->PatternService()->CircularDefinition()->HorizontalRef()->RotationAngle());
		NXOpen::Expression *expression129(patternFeatureBuilder3->PatternService()->CircularDefinition()->AngularSpacing()->NCopies());
		NXOpen::Expression *expression130(patternFeatureBuilder3->PatternService()->CircularDefinition()->AngularSpacing()->SpanAngle());
		NXOpen::Expression *expression131(patternFeatureBuilder3->PatternService()->CircularDefinition()->AngularSpacing()->PitchDistance());
		NXOpen::Expression *expression132(patternFeatureBuilder3->PatternService()->CircularDefinition()->AngularSpacing()->PitchAngle());
		patternFeatureBuilder3->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression120);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression124);

		workPart->Expressions()->Delete(expression117);

		workPart->Expressions()->Delete(expression118);

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression119);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression121);

		workPart->Expressions()->Delete(expression123);

		workPart->Expressions()->Delete(expression122);







	}
	catch (exception& ex)
	{
		//---- Enter your exception handling code here -----
		errorCode = 1;
		gear_inside::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int gear_inside::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
	try
	{
		if (block == label0)
		{
			//---------Enter your code here-----------
		}
		else if (block == drawingArea0)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim0)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim01)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim02)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim03)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim04)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim05)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim06)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim07)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim08)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim09)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim010)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim011)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim012)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim013)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim014)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim015)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim016)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim017)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_dim018)
		{
			//---------Enter your code here-----------
		}
		else if (block == integer0)
		{
			//---------Enter your code here-----------
		}
	}
	catch (exception& ex)
	{
		//---- Enter your exception handling code here -----
		gear_inside::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int gear_inside::ok_cb()
{
	int errorCode = 0;
	try
	{
		errorCode = apply_cb();
	}
	catch (exception& ex)
	{
		//---- Enter your exception handling code here -----
		errorCode = 1;
		gear_inside::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* gear_inside::GetBlockProperties(const char *blockID)
{
	return theDialog->GetBlockProperties(blockID);
}
