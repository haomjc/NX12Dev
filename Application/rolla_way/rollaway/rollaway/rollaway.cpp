//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\OneDrive\NX12Dev\Application\rollaway\rollaway\rollaway.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: haomjc
//              Version: NX 12
//              Date: 01-03-2019  (Format: mm-dd-yyyy)
//              Time: 15:30 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "rollaway.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(rollaway::theSession) = NULL;
UI *(rollaway::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
rollaway::rollaway()
{
    try
    {
        // Initialize the NX Open C++ API environment
        rollaway::theSession = NXOpen::Session::GetSession();
        rollaway::theUI = UI::GetUI();
        theDlxFileName = "rollaway.dlx";
        theDialog = rollaway::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &rollaway::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &rollaway::ok_cb));

        theDialog->AddInitializeHandler(make_callback(this, &rollaway::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &rollaway::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
rollaway::~rollaway()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    rollaway *therollaway = NULL;
    try
    {
        therollaway = new rollaway();
        // The following method shows the dialog immediately
        therollaway->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(therollaway != NULL)
    {
        delete therollaway;
        therollaway = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----

    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int rollaway::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void rollaway::initialize_cb()
{
    try
    {
        label0 = dynamic_cast<NXOpen::BlockStyler::Label*>(theDialog->TopBlock()->FindBlock("label0"));
        linear_l = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_l"));
        linear_m = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_m"));
        linear_s = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_s"));
        linear_h = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_h"));
        linear_h1 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_h1"));
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void rollaway::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int rollaway::apply_cb()
{
    int errorCode = 0;
    try
    {
		double linear_L = this->linear_l->GetProperties()->GetDouble("Value");
		double linear_M = this->linear_m->GetProperties()->GetDouble("Value");
		double linear_S = this->linear_s->GetProperties()->GetDouble("Value");
		double linear_H = this->linear_h->GetProperties()->GetDouble("Value");
		double linear_H1 = this->linear_h1->GetProperties()->GetDouble("Value");
		double linear_H2 = linear_H - linear_H1;
		stringstream s_linear_L, s_linear_M, s_linear_S ,s_linear_H2, s_linear_H1;
		s_linear_L << linear_L;
		s_linear_M << linear_M;
		s_linear_S << linear_S;   
		s_linear_H2 << linear_H2;
		s_linear_H1 << linear_H1;

		NXOpen::Session *theSession = NXOpen::Session::GetSession();
		NXOpen::Part *workPart(theSession->Parts()->Work());
		NXOpen::Part *displayPart(theSession->Parts()->Display());


		NXOpen::Features::Feature *nullNXOpen_Features_Feature(NULL);
		NXOpen::Features::DatumPlaneBuilder *datumPlaneBuilder1;
		datumPlaneBuilder1 = workPart->Features()->CreateDatumPlaneBuilder(nullNXOpen_Features_Feature);

		NXOpen::Plane *plane1;
		plane1 = datumPlaneBuilder1->GetPlane();

		NXOpen::Unit *unit1(dynamic_cast<NXOpen::Unit *>(workPart->UnitCollection()->FindObject("MilliMeter")));

		NXOpen::Point3d coordinates1(0.0, 0.0, 0.0);
		NXOpen::Point *point1;
		point1 = workPart->Points()->CreatePoint(coordinates1);


		plane1->SetUpdateOption(NXOpen::SmartObject::UpdateOptionWithinModeling);

		plane1->SetMethod(NXOpen::PlaneTypes::MethodTypeDistance);

		std::vector<NXOpen::NXObject *> geom1(1);
		NXOpen::DatumPlane *datumPlane1(dynamic_cast<NXOpen::DatumPlane *>(workPart->Datums()->FindObject("DATUM_CSYS(0) YZ plane")));
		geom1[0] = datumPlane1;
		plane1->SetGeometry(geom1);


		NXOpen::Expression *expression3;
		expression3 = plane1->Expression();

		expression3->SetRightHandSide("0");

		plane1->SetAlternate(NXOpen::PlaneTypes::AlternateTypeOne);

		plane1->Evaluate();

		plane1->SetMethod(NXOpen::PlaneTypes::MethodTypeDistance);

		std::vector<NXOpen::NXObject *> geom2(1);
		geom2[0] = datumPlane1;
		plane1->SetGeometry(geom2);

		plane1->SetFlip(false);

		plane1->SetReverseSide(false);

		NXOpen::Expression *expression4;
		expression4 = plane1->Expression();

		expression4->SetRightHandSide("0");

		plane1->SetAlternate(NXOpen::PlaneTypes::AlternateTypeOne);

		plane1->Evaluate();

		workPart->Points()->DeletePoint(point1);

		NXOpen::Point3d coordinates5(0.0, 0.0, 0.0);
		NXOpen::Point *point5;
		point5 = workPart->Points()->CreatePoint(coordinates5);


		NXOpen::DatumPlane *datumPlane2;

		datumPlane2->SetReverseSection(false);

		datumPlaneBuilder1->Destroy();

		// ----------------------------------------------
		//   Menu: 插入(S)->草图曲线(S)->圆(C)...
		// ----------------------------------------------

		NXOpen::NXMatrix *nXMatrix1;
		nXMatrix1 = theSession->ActiveSketch()->Orientation();

		NXOpen::Point3d center1(0.0, 0.0, 0.0);
		NXOpen::Arc *arc1;
		arc1 = workPart->Curves()->CreateArc(center1, nXMatrix1, linear_S/2, 0.0, (360.0 * DEGRA));

		theSession->ActiveSketch()->AddGeometry(arc1, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);
		theSession->ActiveSketch()->Update();


		//  插入(S)->草图曲线(S)->圆(C)...


		NXOpen::NXMatrix *nXMatrix2;
		nXMatrix2 = theSession->ActiveSketch()->Orientation();

		NXOpen::Point3d center2(0.0, 0.0, 0.0);
		NXOpen::Arc *arc2;
		arc2 = workPart->Curves()->CreateArc(center2, nXMatrix2, linear_L/2, 0.0, (360.0 * DEGRA));

		theSession->ActiveSketch()->AddGeometry(arc2, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		theSession->ActiveSketch()->Update();

		//   插入(S)->设计特征(E)->拉伸(X)...
	

		NXOpen::Features::ExtrudeBuilder *extrudeBuilder1;
		extrudeBuilder1 = workPart->Features()->CreateExtrudeBuilder(nullNXOpen_Features_Feature);

		NXOpen::Section *section1;
		section1 = workPart->Sections()->CreateSection(0.00095, 0.001, 0.050000000000000003);

		extrudeBuilder1->SetSection(section1);

		extrudeBuilder1->AllowSelfIntersectingSection(true);

		NXOpen::Unit *unit2;
		unit2 = extrudeBuilder1->Draft()->FrontDraftAngle()->Units();

		NXOpen::Expression *expression7;
		expression7 = workPart->Expressions()->CreateSystemExpressionWithUnits("2.00", unit2);

		extrudeBuilder1->SetDistanceTolerance(0.001);

		extrudeBuilder1->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies1(1);
		NXOpen::Body *nullNXOpen_Body(NULL);
		targetBodies1[0] = nullNXOpen_Body;
		extrudeBuilder1->BooleanOperation()->SetTargetBodies(targetBodies1);



		NXOpen::GeometricUtilities::SmartVolumeProfileBuilder *smartVolumeProfileBuilder1;
		smartVolumeProfileBuilder1 = extrudeBuilder1->SmartVolumeProfile();

		smartVolumeProfileBuilder1->SetOpenProfileSmartVolumeOption(false);

		smartVolumeProfileBuilder1->SetCloseProfileRule(NXOpen::GeometricUtilities::SmartVolumeProfileBuilder::CloseProfileRuleTypeFci);

		section1->SetAllowedEntityTypes(NXOpen::Section::AllowTypesOnlyCurves);

		std::vector<NXOpen::ICurve *> curves1(2);
		curves1[0] = arc1;
		curves1[1] = arc2;

		section1->AllowSelfIntersection(true);

		std::vector<NXOpen::SelectionIntentRule *> rules1(1);

		NXOpen::Point3d helpPoint1(0.0, 0.0, 0.0);

		NXOpen::Direction *direction2;
		direction2 = workPart->Directions()->CreateDirection(theSession->ActiveSketch(), NXOpen::SenseForward, NXOpen::SmartObject::UpdateOptionWithinModeling);

		extrudeBuilder1->SetDirection(direction2);


		extrudeBuilder1->Limits()->EndExtend()->Value()->SetRightHandSide(s_linear_H2.str());

		NXOpen::Features::Feature *feature3;
		feature3 = extrudeBuilder1->CommitFeature();

		NXOpen::Expression *expression10(extrudeBuilder1->Limits()->StartExtend()->Value());
		NXOpen::Expression *expression11(extrudeBuilder1->Limits()->EndExtend()->Value());
		extrudeBuilder1->Destroy();

		workPart->Expressions()->Delete(expression7);


		// ----------------------------------------------
		//   Menu: 插入(S)->基准/点(D)->基准平面(D)...
		// ----------------------------------------------


		// ----------------------------------------------
		//   Menu: 插入(S)->草图曲线(S)->圆(C)...
		// ----------------------------------------------

		NXOpen::NXMatrix *nXMatrix3;
		nXMatrix3 = theSession->ActiveSketch()->Orientation();

		NXOpen::Point3d center3(0.0, 0.0, linear_H2);
		NXOpen::Arc *arc3;
		arc3 = workPart->Curves()->CreateArc(center3, nXMatrix3, linear_S, 0.0, (360.0 * DEGRA));

		theSession->ActiveSketch()->AddGeometry(arc3, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_3;
		geom1_3.Geometry = arc3;
		geom1_3.PointType = NXOpen::Sketch::ConstraintPointTypeArcCenter;
		geom1_3.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_3;

		theSession->ActiveSketch()->Update();

		// ----------------------------------------------
		//   Menu: 插入(S)->草图曲线(S)->圆(C)...
		// ----------------------------------------------

		NXOpen::NXMatrix *nXMatrix4;
		nXMatrix4 = theSession->ActiveSketch()->Orientation();

		NXOpen::Point3d center4(0.0, 0.0, linear_H2);
		NXOpen::Arc *arc4;
		arc4 = workPart->Curves()->CreateArc(center4, nXMatrix4, linear_M/2, 0.0, (360.0 * DEGRA));

		theSession->ActiveSketch()->AddGeometry(arc4, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);


		theSession->ActiveSketch()->Update();

		// ----------------------------------------------
		//   Menu: 插入(S)->设计特征(E)->拉伸(X)...
		// ----------------------------------------------

		NXOpen::Features::ExtrudeBuilder *extrudeBuilder2;
		extrudeBuilder2 = workPart->Features()->CreateExtrudeBuilder(nullNXOpen_Features_Feature);

		NXOpen::Section *section2;
		section2 = workPart->Sections()->CreateSection(0.00095, 0.001, 0.050000000000000003);

		extrudeBuilder2->SetSection(section2);

		extrudeBuilder2->AllowSelfIntersectingSection(true);


		extrudeBuilder2->SetDistanceTolerance(0.001);

		extrudeBuilder2->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies2(1);
		targetBodies2[0] = nullNXOpen_Body;
		extrudeBuilder2->BooleanOperation()->SetTargetBodies(targetBodies2);


		extrudeBuilder2->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies3(1);
		targetBodies3[0] = nullNXOpen_Body;


		NXOpen::GeometricUtilities::SmartVolumeProfileBuilder *smartVolumeProfileBuilder2;
		smartVolumeProfileBuilder2 = extrudeBuilder2->SmartVolumeProfile();

		smartVolumeProfileBuilder2->SetOpenProfileSmartVolumeOption(false);

		smartVolumeProfileBuilder2->SetCloseProfileRule(NXOpen::GeometricUtilities::SmartVolumeProfileBuilder::CloseProfileRuleTypeFci);


		std::vector<NXOpen::ICurve *> curves2(2);
		curves2[0] = arc4;
		curves2[1] = arc3;

		NXOpen::Direction *direction4;
		direction4 = workPart->Directions()->CreateDirection(theSession->ActiveSketch(), NXOpen::SenseForward, NXOpen::SmartObject::UpdateOptionWithinModeling);

		extrudeBuilder2->SetDirection(direction4);

		extrudeBuilder2->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeUnite);

		std::vector<NXOpen::Body *> targetBodies6(1);
		extrudeBuilder2->BooleanOperation()->SetTargetBodies(targetBodies6);

		extrudeBuilder2->Limits()->EndExtend()->Value()->SetRightHandSide(s_linear_H1.str());

		extrudeBuilder2->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeUnite);

		std::vector<NXOpen::Body *> targetBodies7(1);



		NXOpen::Features::Feature *feature6;
		feature6 = extrudeBuilder2->CommitFeature();

		NXOpen::Expression *expression19(extrudeBuilder2->Limits()->StartExtend()->Value());
		NXOpen::Expression *expression20(extrudeBuilder2->Limits()->EndExtend()->Value());
		extrudeBuilder2->Destroy();

		// ----------------------------------------------
		//   Menu: 插入(S)->细节特征(L)->倒斜角(M)...
		// ----------------------------------------------
	
		NXOpen::Features::ChamferBuilder *chamferBuilder1;
		chamferBuilder1 = workPart->Features()->CreateChamferBuilder(nullNXOpen_Features_Feature);
		chamferBuilder1->FirstOffsetExp()->SetRightHandSide("1");
		chamferBuilder1->SecondOffsetExp()->SetRightHandSide("0.577350269189625");
		chamferBuilder1->AngleExp()->SetRightHandSide("30");
		chamferBuilder1->SetOption(NXOpen::Features::ChamferBuilder::ChamferOptionOffsetAndAngle);
		chamferBuilder1->SetMethod(NXOpen::Features::ChamferBuilder::OffsetMethodEdgesAlongFaces);
		chamferBuilder1->SetFirstOffset("1");
		chamferBuilder1->SetSecondOffset("0.577350269189625");
		chamferBuilder1->SetAngle("30");
		chamferBuilder1->SetTolerance(0.001);

		chamferBuilder1->CommitFeature();

		chamferBuilder1->Destroy();

    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int rollaway::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
	try
	{
		if (block == label0)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_l)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_m)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_s)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_h)
		{
			//---------Enter your code here-----------
		}
		else if (block == linear_h1)
		{
			//---------Enter your code here-----------
		}
	}
	catch (exception& ex)
	{
		//---- Enter your exception handling code here -----
		rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}
//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int rollaway::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* rollaway::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
