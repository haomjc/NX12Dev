//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\OneDrive\NX12Dev\Application\rollaway.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: haomjc
//              Version: NX 12
//              Date: 01-14-2019  (Format: mm-dd-yyyy)
//              Time: 16:57 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "rollaway.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(rollaway::theSession) = NULL;
UI *(rollaway::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
rollaway::rollaway()
{
    try
    {
        // Initialize the NX Open C++ API environment
        rollaway::theSession = NXOpen::Session::GetSession();
        rollaway::theUI = UI::GetUI();
        theDlxFileName = "rollaway.dlx";
        theDialog = rollaway::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &rollaway::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &rollaway::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &rollaway::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &rollaway::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &rollaway::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
rollaway::~rollaway()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    rollaway *therollaway = NULL;
    try
    {
        therollaway = new rollaway();
        // The following method shows the dialog immediately
        therollaway->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(therollaway != NULL)
    {
        delete therollaway;
        therollaway = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int rollaway::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void rollaway::initialize_cb()
{
    try
    {
        label0 = dynamic_cast<NXOpen::BlockStyler::Label*>(theDialog->TopBlock()->FindBlock("label0"));
        linear_l = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_l"));
        linear_m = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_m"));
        linear_s = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_s"));
        linear_h = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_h"));
        linear_h1 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_h1"));
        linear_h3 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim0"));
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));

		linear_t = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_t"));


    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void rollaway::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int rollaway::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----

		double linear_L = this->linear_l->GetProperties()->GetDouble("Value");
		double linear_M = this->linear_m->GetProperties()->GetDouble("Value");
		double linear_S = this->linear_s->GetProperties()->GetDouble("Value");

		double linear_T = this->linear_t->GetProperties()->GetDouble("Value");


		double linear_H = this->linear_h->GetProperties()->GetDouble("Value");
		double linear_H1 = this->linear_h1->GetProperties()->GetDouble("Value");
		double linear_H2 = linear_H - linear_H1;
		double linear_H3 = this->linear_h3->GetProperties()->GetDouble("Value");

		double linear_L_d = linear_L / 2;
		double linear_M_d = linear_M / 2;
		double linear_S_d = linear_S / 2;


		stringstream s_linear_L, s_linear_M, s_linear_S, s_linear_H2, s_linear_H1,s_linear_H3    ,   s_linear_L_d, s_linear_M_d,s_linear_S_d;
		s_linear_L << linear_L;
		s_linear_M << linear_M;
		s_linear_S << linear_S;
		s_linear_H2 << linear_H2;
		s_linear_H1 << linear_H1;
		s_linear_H3 << linear_H3;


		s_linear_L_d << linear_L_d;
			s_linear_M_d << linear_M_d;
			s_linear_S_d << linear_S_d;




		NXOpen::Session *theSession = NXOpen::Session::GetSession();
		NXOpen::Part *workPart(theSession->Parts()->Work());
		NXOpen::Part *displayPart(theSession->Parts()->Display());
		// ----------------------------------------------
		//   Menu: 插入(S)->草图(H)...
		// ----------------------------------------------

		NXOpen::Sketch *nullNXOpen_Sketch(NULL);
		NXOpen::SketchInPlaceBuilder *sketchInPlaceBuilder1;
		sketchInPlaceBuilder1 = workPart->Sketches()->CreateSketchInPlaceBuilder2(nullNXOpen_Sketch);

		NXOpen::Point3d origin1(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal1(0.0, 0.0, 1.0);
		NXOpen::Plane *plane1;
		plane1 = workPart->Planes()->CreatePlane(origin1, normal1, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder1->SetPlaneReference(plane1);

		NXOpen::Unit *unit1(dynamic_cast<NXOpen::Unit *>(workPart->UnitCollection()->FindObject("MilliMeter")));
		NXOpen::Expression *expression1;
		expression1 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression2;
		expression2 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::SketchAlongPathBuilder *sketchAlongPathBuilder1;
		sketchAlongPathBuilder1 = workPart->Sketches()->CreateSketchAlongPathBuilder(nullNXOpen_Sketch);

		sketchAlongPathBuilder1->PlaneLocation()->Expression()->SetRightHandSide("0");

		theSession->Preferences()->Sketch()->SetCreateInferredConstraints(true);

		theSession->Preferences()->Sketch()->SetContinuousAutoDimensioning(true);

		theSession->Preferences()->Sketch()->SetDimensionLabel(NXOpen::Preferences::SketchPreferences::DimensionLabelTypeExpression);

		theSession->Preferences()->Sketch()->SetTextSizeFixed(true);

		theSession->Preferences()->Sketch()->SetFixedTextSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayParenthesesOnReferenceDimensions(true);

		theSession->Preferences()->Sketch()->SetDisplayReferenceGeometry(false);

		theSession->Preferences()->Sketch()->SetConstraintSymbolSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayObjectColor(false);

		theSession->Preferences()->Sketch()->SetDisplayObjectName(true);

		NXOpen::NXObject *nXObject1;
		nXObject1 = sketchInPlaceBuilder1->Commit();

		NXOpen::Sketch *sketch1(dynamic_cast<NXOpen::Sketch *>(nXObject1));
		NXOpen::Features::Feature *feature1;
		feature1 = sketch1->Feature();

		sketch1->Activate(NXOpen::Sketch::ViewReorientTrue);

		sketchInPlaceBuilder1->Destroy();

		sketchAlongPathBuilder1->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression2);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression1);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane1->DestroyPlane();

		// ----------------------------------------------
		//   Menu: 插入(S)->草图曲线(S)->点(T)...
		// ----------------------------------------------

		NXOpen::Expression *expression3;
		expression3 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression4;
		expression4 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression5;
		expression5 = workPart->Expressions()->CreateSystemExpressionWithUnits("p14_x=0.00000000000", unit1);

		NXOpen::Expression *expression6;
		expression6 = workPart->Expressions()->CreateSystemExpressionWithUnits("p15_y=0.00000000000", unit1);

		NXOpen::Expression *expression7;
		expression7 = workPart->Expressions()->CreateSystemExpressionWithUnits("p16_z=0.00000000000", unit1);

		NXOpen::Expression *expression8;
		expression8 = workPart->Expressions()->CreateSystemExpressionWithUnits("p17_xdelta=0.00000000000", unit1);

		NXOpen::Expression *expression9;
		expression9 = workPart->Expressions()->CreateSystemExpressionWithUnits("p18_ydelta=0.00000000000", unit1);

		NXOpen::Expression *expression10;
		expression10 = workPart->Expressions()->CreateSystemExpressionWithUnits("p19_zdelta=0.00000000000", unit1);

		NXOpen::Expression *expression11;
		expression11 = workPart->Expressions()->CreateSystemExpressionWithUnits("p20_radius=0.00000000000", unit1);

		NXOpen::Unit *unit2(dynamic_cast<NXOpen::Unit *>(workPart->UnitCollection()->FindObject("Degrees")));
		NXOpen::Expression *expression12;
		expression12 = workPart->Expressions()->CreateSystemExpressionWithUnits("p21_angle=0.00000000000", unit2);

		NXOpen::Expression *expression13;
		expression13 = workPart->Expressions()->CreateSystemExpressionWithUnits("p22_zdelta=0.00000000000", unit1);

		NXOpen::Expression *expression14;
		expression14 = workPart->Expressions()->CreateSystemExpressionWithUnits("p23_radius=0.00000000000", unit1);

		NXOpen::Expression *expression15;
		expression15 = workPart->Expressions()->CreateSystemExpressionWithUnits("p24_angle1=0.00000000000", unit2);

		NXOpen::Expression *expression16;
		expression16 = workPart->Expressions()->CreateSystemExpressionWithUnits("p25_angle2=0.00000000000", unit2);

		NXOpen::Expression *expression17;
		expression17 = workPart->Expressions()->CreateSystemExpressionWithUnits("p26_distance=0", unit1);

		NXOpen::Expression *expression18;
		expression18 = workPart->Expressions()->CreateSystemExpressionWithUnits("p27_arclen=0", unit1);

		NXOpen::Unit *nullNXOpen_Unit(NULL);
		NXOpen::Expression *expression19;
		expression19 = workPart->Expressions()->CreateSystemExpressionWithUnits("p28_percent=0", nullNXOpen_Unit);

		expression5->SetRightHandSide("0");

		expression6->SetRightHandSide(s_linear_S_d.str());

		expression7->SetRightHandSide("0");

		expression8->SetRightHandSide("0");

		expression9->SetRightHandSide("0");

		expression10->SetRightHandSide("0");

		expression11->SetRightHandSide("0");

		expression12->SetRightHandSide("0");

		expression13->SetRightHandSide("0");

		expression14->SetRightHandSide("0");

		expression15->SetRightHandSide("0");

		expression16->SetRightHandSide("0");

		expression17->SetRightHandSide("0");

		expression19->SetRightHandSide("100");

		expression18->SetRightHandSide("0");

		NXOpen::Expression *expression20;
		expression20 = workPart->Expressions()->CreateSystemExpressionWithUnits("p29_x=0.00000000000", unit1);

		NXOpen::Scalar *scalar1;
		scalar1 = workPart->Scalars()->CreateScalarExpression(expression20, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression21;
		expression21 = workPart->Expressions()->CreateSystemExpressionWithUnits("p30_y=0.00000000000", unit1);

		NXOpen::Scalar *scalar2;
		scalar2 = workPart->Scalars()->CreateScalarExpression(expression21, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression22;
		expression22 = workPart->Expressions()->CreateSystemExpressionWithUnits("p31_z=0.00000000000", unit1);

		NXOpen::Scalar *scalar3;
		scalar3 = workPart->Scalars()->CreateScalarExpression(expression22, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point1;
		point1 = workPart->Points()->CreatePoint(scalar1, scalar2, scalar3, NXOpen::SmartObject::UpdateOptionWithinModeling);

		expression5->SetRightHandSide("0.00000000000");

		expression6->SetRightHandSide("0.00000000000");

		expression7->SetRightHandSide("0.00000000000");

		expression8->SetRightHandSide("0.00000000000");

		expression9->SetRightHandSide("0.00000000000");

		expression10->SetRightHandSide("0.00000000000");

		expression11->SetRightHandSide("0.00000000000");

		expression12->SetRightHandSide("0.00000000000");

		expression13->SetRightHandSide("0.00000000000");

		expression14->SetRightHandSide("0.00000000000");

		expression15->SetRightHandSide("0.00000000000");

		expression16->SetRightHandSide("0.00000000000");

		expression19->SetRightHandSide("100.00000000000");

		// ----------------------------------------------
		//   Dialog Begin Point
		// ----------------------------------------------
		expression6->SetRightHandSide(s_linear_S_d.str());

		expression5->SetRightHandSide("0.00000000000");

		expression6->SetRightHandSide(s_linear_S_d.str());

		expression7->SetRightHandSide("0.00000000000");

		workPart->Points()->DeletePoint(point1);

		NXOpen::Expression *expression23;
		expression23 = workPart->Expressions()->CreateSystemExpressionWithUnits("p15_x=0.00000000000", unit1);

		NXOpen::Scalar *scalar4;
		scalar4 = workPart->Scalars()->CreateScalarExpression(expression23, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression24;
		expression24 = workPart->Expressions()->CreateSystemExpressionWithUnits("p16_y=74", unit1);

		NXOpen::Scalar *scalar5;
		scalar5 = workPart->Scalars()->CreateScalarExpression(expression24, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression25;
		expression25 = workPart->Expressions()->CreateSystemExpressionWithUnits("p17_z=0.00000000000", unit1);

		NXOpen::Scalar *scalar6;
		scalar6 = workPart->Scalars()->CreateScalarExpression(expression25, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point2;
		point2 = workPart->Points()->CreatePoint(scalar4, scalar5, scalar6, NXOpen::SmartObject::UpdateOptionWithinModeling);

		expression5->SetRightHandSide("0.00000000000");

		expression6->SetRightHandSide(s_linear_S_d.str());

		expression7->SetRightHandSide("0.00000000000");

		workPart->Points()->DeletePoint(point2);

		NXOpen::Expression *expression26;
		expression26 = workPart->Expressions()->CreateSystemExpressionWithUnits("p15_x=0.00000000000", unit1);

		NXOpen::Scalar *scalar7;
		scalar7 = workPart->Scalars()->CreateScalarExpression(expression26, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression27;
		expression27 = workPart->Expressions()->CreateSystemExpressionWithUnits("p16_y=74", unit1);

		NXOpen::Scalar *scalar8;
		scalar8 = workPart->Scalars()->CreateScalarExpression(expression27, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression28;
		expression28 = workPart->Expressions()->CreateSystemExpressionWithUnits("p17_z=0.00000000000", unit1);

		NXOpen::Scalar *scalar9;
		scalar9 = workPart->Scalars()->CreateScalarExpression(expression28, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point3;
		point3 = workPart->Points()->CreatePoint(scalar7, scalar8, scalar9, NXOpen::SmartObject::UpdateOptionWithinModeling);

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression5);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression6);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression7);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression8);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression9);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression10);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression11);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression12);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression13);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression14);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression15);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression16);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression17);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression18);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression19);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression4);

		NXOpen::Scalar *scalar10;
		scalar10 = workPart->Scalars()->CreateScalarExpression(expression26, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Scalar *scalar11;
		scalar11 = workPart->Scalars()->CreateScalarExpression(expression27, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Scalar *scalar12;
		scalar12 = workPart->Scalars()->CreateScalarExpression(expression28, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point4;
		point4 = workPart->Points()->CreatePoint(scalar10, scalar11, scalar12, NXOpen::SmartObject::UpdateOptionWithinModeling);

		point3->RemoveParameters();

		NXOpen::Point3d coordinates1(0.0, linear_S / 2, 0.0);
		point3->SetCoordinates(coordinates1);

		theSession->ActiveSketch()->AddGeometry(point3, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		theSession->ActiveSketch()->Update();

		workPart->Points()->DeletePoint(point4);

		workPart->Expressions()->Delete(expression3);

		NXOpen::Expression *expression29;
		expression29 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		workPart->Expressions()->Delete(expression29);

		// ----------------------------------------------
		//   Menu: 插入(S)->草图曲线(S)->直线(L)...
		// ----------------------------------------------
	
		stringstream s_linear_t_s;
		s_linear_t_s << (linear_T - linear_S) / 2;


		NXOpen::Expression *expression30;
		expression30 = workPart->Expressions()->CreateSystemExpression(s_linear_t_s.str());

		NXOpen::Expression *expression31;
		expression31 = workPart->Expressions()->CreateSystemExpression("90");

		NXOpen::Point3d startPoint1(0.0, linear_S/2, 0.0);
		NXOpen::Point3d endPoint1(0, linear_T/2, 0.0);
		NXOpen::Line *line1;
		line1 = workPart->Curves()->CreateLine(startPoint1, endPoint1);

		theSession->ActiveSketch()->AddGeometry(line1, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_1;
		geom1_1.Geometry = line1;
		geom1_1.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_1.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_1;
		geom2_1.Geometry = point3;
		geom2_1.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom2_1.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint1;
		sketchGeometricConstraint1 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_1, geom2_1);

		NXOpen::Sketch::ConstraintGeometry geom1;
		geom1.Geometry = line1;
		geom1.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom1.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint2;
		sketchGeometricConstraint2 = theSession->ActiveSketch()->CreateVerticalConstraint(geom1);

		workPart->Expressions()->Delete(expression31);

		NXOpen::Sketch::DimensionGeometry dimObject1_1;
		dimObject1_1.Geometry = line1;
		dimObject1_1.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_1.AssocValue = 0;
		dimObject1_1.HelpPoint.X = 0.0;
		dimObject1_1.HelpPoint.Y = 0.0;
		dimObject1_1.HelpPoint.Z = 0.0;
		NXOpen::NXObject *nullNXOpen_NXObject(NULL);
		dimObject1_1.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_1;
		dimObject2_1.Geometry = line1;
		dimObject2_1.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_1.AssocValue = 0;
		dimObject2_1.HelpPoint.X = 0.0;
		dimObject2_1.HelpPoint.Y = 0.0;
		dimObject2_1.HelpPoint.Z = 0.0;
		dimObject2_1.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin1(12.945350838425549, 78, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint1;
		sketchDimensionalConstraint1 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_1, dimObject2_1, dimOrigin1, expression30, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint1(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint1));
		NXOpen::Annotations::Dimension *dimension1;
		dimension1 = sketchHelpedDimensionalConstraint1->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------
		stringstream s_linear_h1_h3_d;
		s_linear_h1_h3_d << linear_H1 - linear_H3;
		NXOpen::Expression *expression32;
		expression32 = workPart->Expressions()->CreateSystemExpression(s_linear_h1_h3_d.str());

		NXOpen::Expression *expression33;
		expression33 = workPart->Expressions()->CreateSystemExpression("0");

		NXOpen::Point3d startPoint2(0.0, linear_T/2, 0.0);
		NXOpen::Point3d endPoint2(linear_H1-linear_H3, linear_T / 2, 0.0);
		NXOpen::Line *line2;
		line2 = workPart->Curves()->CreateLine(startPoint2, endPoint2);

		theSession->ActiveSketch()->AddGeometry(line2, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_2;
		geom1_2.Geometry = line2;
		geom1_2.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_2.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_2;
		geom2_2.Geometry = line1;
		geom2_2.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_2.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint3;
		sketchGeometricConstraint3 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_2, geom2_2);

		NXOpen::Sketch::ConstraintGeometry geom2;
		geom2.Geometry = line2;
		geom2.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom2.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint4;
		sketchGeometricConstraint4 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom2);

		workPart->Expressions()->Delete(expression33);

		NXOpen::Sketch::DimensionGeometry dimObject1_2;
		dimObject1_2.Geometry = line2;
		dimObject1_2.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_2.AssocValue = 0;
		dimObject1_2.HelpPoint.X = 0.0;
		dimObject1_2.HelpPoint.Y = 0.0;
		dimObject1_2.HelpPoint.Z = 0.0;
		dimObject1_2.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_2;
		dimObject2_2.Geometry = line2;
		dimObject2_2.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_2.AssocValue = 0;
		dimObject2_2.HelpPoint.X = 0.0;
		dimObject2_2.HelpPoint.Y = 0.0;
		dimObject2_2.HelpPoint.Z = 0.0;
		dimObject2_2.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin2(0.475, 69.05464916157446, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint2;
		sketchDimensionalConstraint2 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_2, dimObject2_2, dimOrigin2, expression32, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint2(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint2));
		NXOpen::Annotations::Dimension *dimension2;
		dimension2 = sketchHelpedDimensionalConstraint2->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		double linear_m_t = linear_M - linear_T;
		stringstream s_linear_m_t;

		s_linear_m_t << linear_m_t;


			NXOpen::Expression *expression34;        //(M-T)  /2
		expression34 = workPart->Expressions()->CreateSystemExpression(s_linear_m_t.str());

		NXOpen::Expression *expression35;
		expression35 = workPart->Expressions()->CreateSystemExpression("90");

		NXOpen::Point3d startPoint3(linear_H1-linear_H3, linear_T/2, 0.0);
		NXOpen::Point3d endPoint3(linear_H1 - linear_H3, linear_M/2, 0.0);
		NXOpen::Line *line3;
		line3 = workPart->Curves()->CreateLine(startPoint3, endPoint3);

		theSession->ActiveSketch()->AddGeometry(line3, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_3;
		geom1_3.Geometry = line3;
		geom1_3.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_3.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_3;
		geom2_3.Geometry = line2;
		geom2_3.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_3.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint5;
		sketchGeometricConstraint5 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_3, geom2_3);

		NXOpen::Sketch::ConstraintGeometry geom3;
		geom3.Geometry = line3;
		geom3.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom3.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint6;
		sketchGeometricConstraint6 = theSession->ActiveSketch()->CreateVerticalConstraint(geom3);

		workPart->Expressions()->Delete(expression35);

		NXOpen::Sketch::DimensionGeometry dimObject1_3;
		dimObject1_3.Geometry = line3;
		dimObject1_3.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_3.AssocValue = 0;
		dimObject1_3.HelpPoint.X = 0.0;
		dimObject1_3.HelpPoint.Y = 0.0;
		dimObject1_3.HelpPoint.Z = 0.0;
		dimObject1_3.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_3;
		dimObject2_3.Geometry = line3;
		dimObject2_3.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_3.AssocValue = 0;
		dimObject2_3.HelpPoint.X = 0.0;
		dimObject2_3.HelpPoint.Y = 0.0;
		dimObject2_3.HelpPoint.Z = 0.0;
		dimObject2_3.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin3(6.2524157034191061, 84.0, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint3;
		sketchDimensionalConstraint3 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_3, dimObject2_3, dimOrigin3, expression34, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint3(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint3));
		NXOpen::Annotations::Dimension *dimension3;
		dimension3 = sketchHelpedDimensionalConstraint3->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------
		NXOpen::Expression *expression36;
		expression36 = workPart->Expressions()->CreateSystemExpression(s_linear_H3.str());

		NXOpen::Expression *expression37;
		expression37 = workPart->Expressions()->CreateSystemExpression("0");

		NXOpen::Point3d startPoint4(linear_H1-linear_H3, linear_M/2, 0.0);
		NXOpen::Point3d endPoint4(linear_H1, linear_M / 2, 0.0);
		NXOpen::Line *line4;
		line4 = workPart->Curves()->CreateLine(startPoint4, endPoint4);

		theSession->ActiveSketch()->AddGeometry(line4, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_4;
		geom1_4.Geometry = line4;
		geom1_4.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_4.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_4;
		geom2_4.Geometry = line3;
		geom2_4.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_4.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint7;
		sketchGeometricConstraint7 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_4, geom2_4);

		NXOpen::Sketch::ConstraintGeometry geom4;
		geom4.Geometry = line4;
		geom4.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom4.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint8;
		sketchGeometricConstraint8 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom4);

		workPart->Expressions()->Delete(expression37);

		NXOpen::Sketch::DimensionGeometry dimObject1_4;
		dimObject1_4.Geometry = line4;
		dimObject1_4.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_4.AssocValue = 0;
		dimObject1_4.HelpPoint.X = 0.0;
		dimObject1_4.HelpPoint.Y = 0.0;
		dimObject1_4.HelpPoint.Z = 0.0;
		dimObject1_4.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_4;
		dimObject2_4.Geometry = line4;
		dimObject2_4.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_4.AssocValue = 0;
		dimObject2_4.HelpPoint.X = 0.0;
		dimObject2_4.HelpPoint.Y = 0.0;
		dimObject2_4.HelpPoint.Z = 0.0;
		dimObject2_4.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin4(5.5750000000000046, 80.697584296580899, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint4;
		sketchDimensionalConstraint4 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_4, dimObject2_4, dimOrigin4, expression36, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint4(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint4));
		NXOpen::Annotations::Dimension *dimension4;
		dimension4 = sketchHelpedDimensionalConstraint4->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		stringstream  s_linear_L_M;
		s_linear_L_M << (linear_L - linear_M)/2;

		NXOpen::Expression *expression38;
		expression38 = workPart->Expressions()->CreateSystemExpression(s_linear_L_M.str());

		NXOpen::Expression *expression39;
		expression39 = workPart->Expressions()->CreateSystemExpression("90");

		NXOpen::Point3d startPoint5(linear_H1, linear_M/2, 0.0);
		NXOpen::Point3d endPoint5(linear_H1, linear_L/2, 0.0);
		NXOpen::Line *line5;
		line5 = workPart->Curves()->CreateLine(startPoint5, endPoint5);

		theSession->ActiveSketch()->AddGeometry(line5, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_5;
		geom1_5.Geometry = line5;
		geom1_5.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_5.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_5;
		geom2_5.Geometry = line4;
		geom2_5.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_5.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint9;
		sketchGeometricConstraint9 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_5, geom2_5);

		NXOpen::Sketch::ConstraintGeometry geom5;
		geom5.Geometry = line5;
		geom5.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom5.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint10;
		sketchGeometricConstraint10 = theSession->ActiveSketch()->CreateVerticalConstraint(geom5);

		workPart->Expressions()->Delete(expression39);

		NXOpen::Sketch::DimensionGeometry dimObject1_5;
		dimObject1_5.Geometry = line5;
		dimObject1_5.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_5.AssocValue = 0;
		dimObject1_5.HelpPoint.X = 0.0;
		dimObject1_5.HelpPoint.Y = 0.0;
		dimObject1_5.HelpPoint.Z = 0.0;
		dimObject1_5.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_5;
		dimObject2_5.Geometry = line5;
		dimObject2_5.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_5.AssocValue = 0;
		dimObject2_5.HelpPoint.X = 0.0;
		dimObject2_5.HelpPoint.Y = 0.0;
		dimObject2_5.HelpPoint.Z = 0.0;
		dimObject2_5.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin5(15.502415703419114, 90.5, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint5;
		sketchDimensionalConstraint5 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_5, dimObject2_5, dimOrigin5, expression38, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint5(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint5));
		NXOpen::Annotations::Dimension *dimension5;
		dimension5 = sketchHelpedDimensionalConstraint5->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------
		stringstream s_linear_h_h1;
		s_linear_h_h1 << linear_H - linear_H1;

			NXOpen::Expression *expression40;
		expression40 = workPart->Expressions()->CreateSystemExpression(s_linear_h_h1.str());

		NXOpen::Expression *expression41;
		expression41 = workPart->Expressions()->CreateSystemExpression("0");

		NXOpen::Point3d startPoint6(linear_H1, linear_L/2, 0.0);
		NXOpen::Point3d endPoint6(linear_H, linear_L / 2, 0.0);
		NXOpen::Line *line6;
		line6 = workPart->Curves()->CreateLine(startPoint6, endPoint6);

		theSession->ActiveSketch()->AddGeometry(line6, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_6;
		geom1_6.Geometry = line6;
		geom1_6.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_6.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_6;
		geom2_6.Geometry = line5;
		geom2_6.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_6.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint11;
		sketchGeometricConstraint11 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_6, geom2_6);

		NXOpen::Sketch::ConstraintGeometry geom6;
		geom6.Geometry = line6;
		geom6.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom6.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint12;
		sketchGeometricConstraint12 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom6);

		workPart->Expressions()->Delete(expression41);

		NXOpen::Sketch::DimensionGeometry dimObject1_6;
		dimObject1_6.Geometry = line6;
		dimObject1_6.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_6.AssocValue = 0;
		dimObject1_6.HelpPoint.X = 0.0;
		dimObject1_6.HelpPoint.Y = 0.0;
		dimObject1_6.HelpPoint.Z = 0.0;
		dimObject1_6.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_6;
		dimObject2_6.Geometry = line6;
		dimObject2_6.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_6.AssocValue = 0;
		dimObject2_6.HelpPoint.X = 0.0;
		dimObject2_6.HelpPoint.Y = 0.0;
		dimObject2_6.HelpPoint.Z = 0.0;
		dimObject2_6.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin6(12.45, 89.697584296580899, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint6;
		sketchDimensionalConstraint6 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_6, dimObject2_6, dimOrigin6, expression40, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint6(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint6));
		NXOpen::Annotations::Dimension *dimension6;
		dimension6 = sketchHelpedDimensionalConstraint6->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		stringstream s_linear_L_S_d;
		s_linear_L_S_d << (linear_L - linear_S)/2;

		NXOpen::Expression *expression42;
		expression42 = workPart->Expressions()->CreateSystemExpression(s_linear_L_S_d.str());

		NXOpen::Expression *expression43;
		expression43 = workPart->Expressions()->CreateSystemExpression("270");

		NXOpen::Point3d startPoint7(linear_H, linear_L/2, 0.0);
		NXOpen::Point3d endPoint7(linear_H, linear_S/2, 0.0);
		NXOpen::Line *line7;
		line7 = workPart->Curves()->CreateLine(startPoint7, endPoint7);

		theSession->ActiveSketch()->AddGeometry(line7, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_7;
		geom1_7.Geometry = line7;
		geom1_7.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_7.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_7;
		geom2_7.Geometry = line6;
		geom2_7.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_7.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint13;
		sketchGeometricConstraint13 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_7, geom2_7);

		NXOpen::Sketch::ConstraintGeometry geom7;
		geom7.Geometry = line7;
		geom7.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom7.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint14;
		sketchGeometricConstraint14 = theSession->ActiveSketch()->CreateVerticalConstraint(geom7);

		workPart->Expressions()->Delete(expression43);

		NXOpen::Sketch::DimensionGeometry dimObject1_7;
		dimObject1_7.Geometry = line7;
		dimObject1_7.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_7.AssocValue = 0;
		dimObject1_7.HelpPoint.X = 0.0;
		dimObject1_7.HelpPoint.Y = 0.0;
		dimObject1_7.HelpPoint.Z = 0.0;
		dimObject1_7.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_7;
		dimObject2_7.Geometry = line7;
		dimObject2_7.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_7.AssocValue = 0;
		dimObject2_7.HelpPoint.X = 0.0;
		dimObject2_7.HelpPoint.Y = 0.0;
		dimObject2_7.HelpPoint.Z = 0.0;
		dimObject2_7.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin7(9.397584296580872, 84.500000000000014, 0.0);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint7;
		sketchDimensionalConstraint7 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_7, dimObject2_7, dimOrigin7, expression42, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint7(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint7));
		NXOpen::Annotations::Dimension *dimension7;
		dimension7 = sketchHelpedDimensionalConstraint7->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Point3d startPoint8(linear_H, linear_S / 2, 0.0);
		NXOpen::Point3d endPoint8(0.0, linear_S / 2, 0.0);
		NXOpen::Line *line8;
		line8 = workPart->Curves()->CreateLine(startPoint8, endPoint8);

		theSession->ActiveSketch()->AddGeometry(line8, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_8;
		geom1_8.Geometry = line8;
		geom1_8.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_8.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_8;
		geom2_8.Geometry = line7;
		geom2_8.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_8.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint15;
		sketchGeometricConstraint15 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_8, geom2_8);

		NXOpen::Sketch::ConstraintGeometry geom8;
		geom8.Geometry = line8;
		geom8.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom8.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint16;
		sketchGeometricConstraint16 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom8);

		NXOpen::Sketch::ConstraintGeometry geom1_9;
		geom1_9.Geometry = line8;
		geom1_9.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom1_9.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_9;
		geom2_9.Geometry = point3;
		geom2_9.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom2_9.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint17;
		sketchGeometricConstraint17 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_9, geom2_9);

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------
		// ----------------------------------------------
		//   Menu: 插入(S)->设计特征(E)->旋转(R)...
		// ----------------------------------------------

		NXOpen::Features::Feature *nullNXOpen_Features_Feature(NULL);
		NXOpen::Features::RevolveBuilder *revolveBuilder1;
		revolveBuilder1 = workPart->Features()->CreateRevolveBuilder(nullNXOpen_Features_Feature);

		revolveBuilder1->Limits()->StartExtend()->Value()->SetRightHandSide("0");

		revolveBuilder1->Limits()->EndExtend()->Value()->SetRightHandSide("360");

		revolveBuilder1->Limits()->StartExtend()->Value()->SetRightHandSide("0");

		revolveBuilder1->Limits()->EndExtend()->Value()->SetRightHandSide("360");

		revolveBuilder1->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies1(1);
		NXOpen::Body *nullNXOpen_Body(NULL);
		targetBodies1[0] = nullNXOpen_Body;
		revolveBuilder1->BooleanOperation()->SetTargetBodies(targetBodies1);

		revolveBuilder1->Offset()->StartOffset()->SetRightHandSide("0");

		revolveBuilder1->Offset()->EndOffset()->SetRightHandSide("5");

		revolveBuilder1->SetTolerance(0.001);

		NXOpen::Section *section1;
		section1 = workPart->Sections()->CreateSection(0.00095, 0.001, 0.050000000000000003);

		revolveBuilder1->SetSection(section1);

		NXOpen::GeometricUtilities::SmartVolumeProfileBuilder *smartVolumeProfileBuilder1;
		smartVolumeProfileBuilder1 = revolveBuilder1->SmartVolumeProfile();

		smartVolumeProfileBuilder1->SetOpenProfileSmartVolumeOption(false);

		smartVolumeProfileBuilder1->SetCloseProfileRule(NXOpen::GeometricUtilities::SmartVolumeProfileBuilder::CloseProfileRuleTypeFci);

		section1->SetDistanceTolerance(0.001);

		section1->SetChainingTolerance(0.00095);

		std::vector<double> starthelperpoint1(3);
		const double starthelperpoint1_initial_values[] = {
			0.0, 0.0, 0.0
		};
		starthelperpoint1.assign(starthelperpoint1_initial_values, starthelperpoint1_initial_values + 3);
		revolveBuilder1->SetStartLimitHelperPoint(starthelperpoint1);

		std::vector<double> endhelperpoint1(3);
		const double endhelperpoint1_initial_values[] = {
			0.0, 0.0, 0.0
		};
		endhelperpoint1.assign(endhelperpoint1_initial_values, endhelperpoint1_initial_values + 3);
		revolveBuilder1->SetEndLimitHelperPoint(endhelperpoint1);

		section1->SetAllowedEntityTypes(NXOpen::Section::AllowTypesOnlyCurves);

		std::vector<NXOpen::ICurve *> curves1(8);
		curves1[0] = line1;
		curves1[1] = line2;
		curves1[2] = line6;
		curves1[3] = line7;
		curves1[4] = line8;
		curves1[5] = line3;
		curves1[6] = line5;
		curves1[7] = line4;
		//NXOpen::Point3d seedPoint1(5.2166666666666712, 76.666666666666657, 0.0);

		CurveFeatureRule *curveFeatureRule1;
		std::vector<Features::Feature *> Rulefeatures(1);

		Rulefeatures[0] = theSession->ActiveSketch()->Feature();
		curveFeatureRule1 = workPart->ScRuleFactory()->CreateRuleCurveFeature(Rulefeatures);






		//NXOpen::RegionBoundaryRule *regionBoundaryRule1;
		//regionBoundaryRule1 = workPart->ScRuleFactory()->CreateRuleRegionBoundary(theSession->ActiveSketch(), curves1, seedPoint1, 0.001);

		section1->AllowSelfIntersection(false);

		std::vector<NXOpen::SelectionIntentRule *> rules1(1);
		//rules1[0] = regionBoundaryRule1;
		rules1[0] = curveFeatureRule1;
		NXOpen::Point3d helpPoint1(0.0, 0.0, 0.0);
		section1->AddToSection(rules1, nullNXOpen_NXObject, nullNXOpen_NXObject, nullNXOpen_NXObject, helpPoint1, NXOpen::Section::ModeCreate, false);

	
		revolveBuilder1->SetSection(section1);

		NXOpen::Expression *expression44;
		expression44 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

			revolveBuilder1->SetSection(section1);

		NXOpen::Expression *expression45;
		expression45 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin2(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector1(1.0, 0.0, 0.0);
		NXOpen::Direction *direction1;
		direction1 = workPart->Directions()->CreateDirection(origin2, vector1, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *nullNXOpen_Point(NULL);
		NXOpen::Axis *axis1;
		axis1 = workPart->Axes()->CreateAxis(nullNXOpen_Point, direction1, NXOpen::SmartObject::UpdateOptionWithinModeling);

		revolveBuilder1->SetAxis(axis1);

		NXOpen::Expression *expression46;
		expression46 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin3(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector2(1.0, 0.0, 0.0);
		NXOpen::Direction *direction2;
		direction2 = workPart->Directions()->CreateDirection(origin3, vector2, NXOpen::SmartObject::UpdateOptionWithinModeling);

		axis1->SetDirection(direction2);

		revolveBuilder1->SetAxis(axis1);

		NXOpen::Features::DatumCsys *datumCsys1(dynamic_cast<NXOpen::Features::DatumCsys *>(workPart->Features()->FindObject("DATUM_CSYS(0)")));
		NXOpen::Point *point5(dynamic_cast<NXOpen::Point *>(datumCsys1->FindObject("POINT 1")));
		NXOpen::Xform *nullNXOpen_Xform(NULL);
		NXOpen::Point *point6;
		point6 = workPart->Points()->CreatePoint(point5, nullNXOpen_Xform, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::NXObject *nXObject2;
		NXOpen::Xform *xform1;
		xform1 = workPart->Xforms()->CreateExtractXform(point5, NXOpen::SmartObject::UpdateOptionWithinModeling, false, &nXObject2);

		NXOpen::Point *point7(dynamic_cast<NXOpen::Point *>(nXObject2));
		NXOpen::Point *point8;
		point8 = workPart->Points()->CreatePoint(point7, nullNXOpen_Xform, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point9;
		point9 = axis1->Point();

		axis1->SetPoint(point8);

		revolveBuilder1->SetAxis(axis1);

		revolveBuilder1->SetParentFeatureInternal(false);

		NXOpen::Features::Feature *feature2;
		feature2 = revolveBuilder1->CommitFeature();

			NXOpen::Expression *expression47(revolveBuilder1->Limits()->StartExtend()->Value());
		NXOpen::Expression *expression48(revolveBuilder1->Limits()->EndExtend()->Value());
		revolveBuilder1->Destroy();

		workPart->Expressions()->Delete(expression44);

		workPart->Expressions()->Delete(expression46);

		workPart->Expressions()->Delete(expression45);






    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int rollaway::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == label0)
        {
        //---------Enter your code here-----------
        }
        else if(block == linear_l)
        {
        //---------Enter your code here-----------
        }
        else if(block == linear_m)
        {
        //---------Enter your code here-----------
        }
        else if(block == linear_s)
        {
        //---------Enter your code here-----------
        }
        else if(block == linear_h)
        {
        //---------Enter your code here-----------
        }
        else if(block == linear_h1)
        {
        //---------Enter your code here-----------
        }
        else if(block == linear_h3)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int rollaway::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        rollaway::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* rollaway::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
