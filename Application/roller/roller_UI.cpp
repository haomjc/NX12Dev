//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\OneDrive\NX12Dev\roller_UI.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: haomjc
//              Version: NX 12
//              Date: 12-23-2018  (Format: mm-dd-yyyy)
//              Time: 11:42 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "roller_UI.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(roller_UI::theSession) = NULL;
UI *(roller_UI::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
roller_UI::roller_UI()
{
    try
    {
        // Initialize the NX Open C++ API environment
        roller_UI::theSession = NXOpen::Session::GetSession();
        roller_UI::theUI = UI::GetUI();
        theDlxFileName = "roller_UI.dlx";
        theDialog = roller_UI::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &roller_UI::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &roller_UI::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &roller_UI::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &roller_UI::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &roller_UI::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
roller_UI::~roller_UI()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Remove the following conditional definitions:
//                a) #if USER_EXIT_OR_MENU
//                    #endif//USER_EXIT_OR_MENU
//
//                b) #if USER_EXIT
//                    #endif//USER_EXIT
//        2) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        3) Invoke the Shared Library through File->Execute->NX Open menu.
//
//    2. THROUGH CALLBACK OF ANOTHER DIALOG
//
//        1) Remove the following conditional definition:
//             #if CALLBACK
//             #endif//CALLBACK
//        2) Call the following line of code from where ever you want to lauch this dialog.
//             roller_UI->Show_roller_UI();
//        3) Integrate this file with your main application file.
//
//    3. MENU BAR
//    
//        1) Remove the following conditional definition:
//                a) #if USER_EXIT_OR_MENU
//                   #endif//USER_EXIT_OR_MENU
//        2) Add the following lines to your MenuScript file in order to
//           associate a menu bar button with your dialog.  In this
//           example, a cascade menu will be created and will be
//           located just before the Help button on the main menubar.
//           The button, SAMPLEVB_BTN is set up to launch your dialog and
//           will be positioned as the first button on your pulldown menu.
//           If you wish to add the button to an existing cascade, simply
//           add the 3 lines between MENU LAUNCH_CASCADE and END_OF_MENU
//           to your menuscript file.
//           The MenuScript file requires an extension of ".men".
//           Move the contents between the dashed lines to your Menuscript file.
//        
//           !-----------------------------------------------------------------------------
//           VERSION 120
//        
//           EDIT UG_GATEWAY_MAIN_MENUBAR
//        
//           BEFORE UG_HELP
//           CASCADE_BUTTON BLOCKSTYLER_DLX_CASCADE_BTN
//           LABEL Dialog Launcher
//           END_OF_BEFORE
//        
//           MENU BLOCKSTYLER_DLX_CASCADE_BTN
//           BUTTON SAMPLEVB_BTN
//           LABEL Display SampleVB dialog
//           ACTIONS <path of Shared library> !For example: D:\temp\SampleVB.dll
//           END_OF_MENU
//           !-----------------------------------------------------------------------------
//        
//        3) Make sure the .men file is in one of the following locations:
//        
//           - $UGII_USER_DIR/startup   
//           - For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//             recommended. This variable is set to a full directory path to a file 
//             containing a list of root directories for all custom applications.
//             e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//    
//------------------------------------------------------------------------------

    extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
    {
        roller_UI *theroller_UI = NULL;
        try
        {
            theroller_UI = new roller_UI();
            // The following method shows the dialog immediately
            theroller_UI->Show();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            roller_UI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        if(theroller_UI != NULL)
        {
            delete theroller_UI;
            theroller_UI = NULL;
        }
    }

#if USER_EXIT
    
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
    extern "C" DllExport int ufusr_ask_unload()
    {
        //return (int)Session::LibraryUnloadOptionExplicitly;
        return (int)Session::LibraryUnloadOptionImmediately;
        //return (int)Session::LibraryUnloadOptionAtTermination;
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    extern "C" DllExport void ufusr_cleanup(void)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            roller_UI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
    }
#endif//USER_EXIT
    
    int roller_UI::Show()
    {
        try
        {
            theDialog->Show();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            roller_UI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }
    
#if CALLBACK
    //------------------------------------------------------------------------------
    //Method name: Show_roller_UI
    //------------------------------------------------------------------------------
    void roller_UI::Show_roller_UI()
    {
        roller_UI *theroller_UI = NULL;
        try
        {
            theroller_UI = new roller_UI();
            // The following method shows the dialog immediately
            theroller_UI->Show();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            roller_UI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        if(theroller_UI != NULL)
        {
            delete theroller_UI;
            theroller_UI = NULL;
        }
    }
#endif//CALLBACK
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    void roller_UI::initialize_cb()
    {
        try
        {
            group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
            linear_dim0 = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_dim0"));
            radius_dim0 = dynamic_cast<NXOpen::BlockStyler::RadiusDimension*>(theDialog->TopBlock()->FindBlock("radius_dim0"));
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            roller_UI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    void roller_UI::dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            roller_UI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    int roller_UI::apply_cb()
    {
        int errorCode = 0;
        try
        {
			NXOpen::Session *theSession = NXOpen::Session::GetSession();
			NXOpen::Part *workPart(theSession->Parts()->Work());
			NXOpen::Part *displayPart(theSession->Parts()->Display());


			double linear = this->linear_dim0->GetProperties()->GetDouble("Value");
			double radius = this->radius_dim0->GetProperties()->GetDouble("Value");

			

			stringstream s_roller_linear,s_roller_diameter;
			s_roller_linear << linear;
			s_roller_diameter << radius;


			// ----------------------------------------------
			//   Menu: 插入(S)->设计特征(E)->圆柱(C)...
			// ----------------------------------------------
			NXOpen::Session::UndoMarkId markId1;
			markId1 = theSession->SetUndoMark(NXOpen::Session::MarkVisibilityVisible, NXOpen::NXString("\345\274\200\345\247\213", NXOpen::NXString::UTF8));

			NXOpen::Features::Feature *nullNXOpen_Features_Feature(NULL);
			NXOpen::Features::CylinderBuilder *cylinderBuilder1;
			cylinderBuilder1 = workPart->Features()->CreateCylinderBuilder(nullNXOpen_Features_Feature);

			cylinderBuilder1->BooleanOption()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

			std::vector<NXOpen::Body *> targetBodies1(1);
			NXOpen::Body *nullNXOpen_Body(NULL);
			targetBodies1[0] = nullNXOpen_Body;
			cylinderBuilder1->BooleanOption()->SetTargetBodies(targetBodies1);

			cylinderBuilder1->Diameter()->SetRightHandSide("50");

			cylinderBuilder1->Height()->SetRightHandSide("100");

			cylinderBuilder1->BooleanOption()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

			std::vector<NXOpen::Body *> targetBodies2(1);
			targetBodies2[0] = nullNXOpen_Body;
			cylinderBuilder1->BooleanOption()->SetTargetBodies(targetBodies2);

			theSession->SetUndoMarkName(markId1, NXOpen::NXString("\345\234\206\346\237\261 \345\257\271\350\257\235\346\241\206", NXOpen::NXString::UTF8));

			NXOpen::Unit *unit1;
			unit1 = cylinderBuilder1->Height()->Units();

			NXOpen::Expression *expression1;
			expression1 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

			//滚子的半径和长度

			cylinderBuilder1->Diameter()->SetRightHandSide(s_roller_diameter.str());
			cylinderBuilder1->Height()->SetRightHandSide(s_roller_linear.str());



			NXOpen::Session::UndoMarkId markId2;
			markId2 = theSession->SetUndoMark(NXOpen::Session::MarkVisibilityInvisible, NXOpen::NXString("\345\234\206\346\237\261", NXOpen::NXString::UTF8));

			theSession->DeleteUndoMark(markId2, NULL);

			NXOpen::Session::UndoMarkId markId3;
			markId3 = theSession->SetUndoMark(NXOpen::Session::MarkVisibilityInvisible, NXOpen::NXString("\345\234\206\346\237\261", NXOpen::NXString::UTF8));

			NXOpen::NXObject *nXObject1;
			nXObject1 = cylinderBuilder1->Commit();

			theSession->DeleteUndoMark(markId3, NULL);

			theSession->SetUndoMarkName(markId1, NXOpen::NXString("\345\234\206\346\237\261", NXOpen::NXString::UTF8));

			NXOpen::Expression *expression2(cylinderBuilder1->Height());
			NXOpen::Expression *expression3(cylinderBuilder1->Diameter());
			cylinderBuilder1->Destroy();

			workPart->Expressions()->Delete(expression1);

			// ----------------------------------------------
			//   Menu: 视图(V)->最小化功能区(Z)
			// ----------------------------------------------
			// ----------------------------------------------
			//   Menu: 插入(S)->细节特征(L)->倒斜角(M)...
			// ----------------------------------------------
			NXOpen::Session::UndoMarkId markId4;
			markId4 = theSession->SetUndoMark(NXOpen::Session::MarkVisibilityVisible, NXOpen::NXString("\345\274\200\345\247\213", NXOpen::NXString::UTF8));

			NXOpen::Features::ChamferBuilder *chamferBuilder1;
			chamferBuilder1 = workPart->Features()->CreateChamferBuilder(nullNXOpen_Features_Feature);

			chamferBuilder1->FirstOffsetExp()->SetRightHandSide("5");

			chamferBuilder1->SecondOffsetExp()->SetRightHandSide("5");

			chamferBuilder1->AngleExp()->SetRightHandSide("45");

			chamferBuilder1->SetOption(NXOpen::Features::ChamferBuilder::ChamferOptionSymmetricOffsets);

			chamferBuilder1->SetMethod(NXOpen::Features::ChamferBuilder::OffsetMethodEdgesAlongFaces);

			chamferBuilder1->SetFirstOffset("5");

			chamferBuilder1->SetSecondOffset("5");

			chamferBuilder1->SetAngle("45");

			chamferBuilder1->SetTolerance(0.001);

			theSession->SetUndoMarkName(markId4, NXOpen::NXString("\345\200\222\346\226\234\350\247\222 \345\257\271\350\257\235\346\241\206", NXOpen::NXString::UTF8));

			NXOpen::ScCollector *scCollector1;
			scCollector1 = workPart->ScCollectors()->CreateCollector();

			NXOpen::Features::Cylinder *cylinder1(dynamic_cast<NXOpen::Features::Cylinder *>(nXObject1));
			NXOpen::Edge *edge1(dynamic_cast<NXOpen::Edge *>(cylinder1->FindObject("EDGE * 1 * 3 {(-2,-3.4641016151378,12)(4,0,12)(-2,3.4641016151378,12) CYLINDER(1)}")));
			NXOpen::Edge *nullNXOpen_Edge(NULL);
			NXOpen::EdgeTangentRule *edgeTangentRule1;
			edgeTangentRule1 = workPart->ScRuleFactory()->CreateRuleEdgeTangent(edge1, nullNXOpen_Edge, false, 0.050000000000000003, true, false);

			std::vector<NXOpen::SelectionIntentRule *> rules1(1);
			rules1[0] = edgeTangentRule1;
			scCollector1->ReplaceRules(rules1, false);

			chamferBuilder1->SetSmartCollector(scCollector1);

			NXOpen::Point3d scaleAboutPoint1(7.7476746810990917, -2.9387731548996419, 0.0);
			NXOpen::Point3d viewCenter1(-7.7476746810990917, 2.9387731548996419, 0.0);
			workPart->ModelingViews()->WorkView()->ZoomAboutPoint(1.25, scaleAboutPoint1, viewCenter1);

			NXOpen::Point3d scaleAboutPoint2(6.198139744879299, -2.3510185239197381, 0.0);
			NXOpen::Point3d viewCenter2(-6.1981397448792501, 2.3510185239197137, 0.0);
			workPart->ModelingViews()->WorkView()->ZoomAboutPoint(1.25, scaleAboutPoint2, viewCenter2);

			NXOpen::Point3d scaleAboutPoint3(4.9585117959034388, -1.8808148191357905, 0.0);
			NXOpen::Point3d viewCenter3(-4.9585117959033997, 1.8808148191357512, 0.0);
			workPart->ModelingViews()->WorkView()->ZoomAboutPoint(1.25, scaleAboutPoint3, viewCenter3);

			NXOpen::Point3d scaleAboutPoint4(3.9668094367227664, -1.5046518553086323, 0.0);
			NXOpen::Point3d viewCenter4(-3.9668094367227038, 1.504651855308601, 0.0);
			workPart->ModelingViews()->WorkView()->ZoomAboutPoint(1.25, scaleAboutPoint4, viewCenter4);

			NXOpen::EdgeTangentRule *edgeTangentRule2;
			edgeTangentRule2 = workPart->ScRuleFactory()->CreateRuleEdgeTangent(edge1, nullNXOpen_Edge, false, 0.050000000000000003, true, false);

			NXOpen::Edge *edge2(dynamic_cast<NXOpen::Edge *>(cylinder1->FindObject("EDGE * 2 * 3 {(-2,3.4641016151378,0)(4,0,0)(-2,-3.4641016151378,0) CYLINDER(1)}")));
			NXOpen::EdgeTangentRule *edgeTangentRule3;
			edgeTangentRule3 = workPart->ScRuleFactory()->CreateRuleEdgeTangent(edge2, nullNXOpen_Edge, false, 0.050000000000000003, true, false);

			std::vector<NXOpen::SelectionIntentRule *> rules2(2);
			rules2[0] = edgeTangentRule2;
			rules2[1] = edgeTangentRule3;
			scCollector1->ReplaceRules(rules2, false);

			chamferBuilder1->SetSmartCollector(scCollector1);

			chamferBuilder1->FirstOffsetExp()->SetRightHandSide("1");

			chamferBuilder1->SecondOffsetExp()->SetRightHandSide("1");

			NXOpen::Session::UndoMarkId markId5;
			markId5 = theSession->SetUndoMark(NXOpen::Session::MarkVisibilityInvisible, NXOpen::NXString("\345\200\222\346\226\234\350\247\222", NXOpen::NXString::UTF8));

			theSession->DeleteUndoMark(markId5, NULL);

			NXOpen::Session::UndoMarkId markId6;
			markId6 = theSession->SetUndoMark(NXOpen::Session::MarkVisibilityInvisible, NXOpen::NXString("\345\200\222\346\226\234\350\247\222", NXOpen::NXString::UTF8));

			NXOpen::Features::Feature *feature1;
			feature1 = chamferBuilder1->CommitFeature();

			theSession->DeleteUndoMark(markId6, NULL);

			theSession->SetUndoMarkName(markId4, NXOpen::NXString("\345\200\222\346\226\234\350\247\222", NXOpen::NXString::UTF8));

			NXOpen::Expression *expression4(chamferBuilder1->FirstOffsetExp());
			chamferBuilder1->Destroy();

			//---- Enter your callback code here -----
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            roller_UI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    int roller_UI::update_cb(NXOpen::BlockStyler::UIBlock* block)
    {
        try
        {
            if(block == linear_dim0)
            {
            //---------Enter your code here-----------
            }
            else if(block == radius_dim0)
            {
            //---------Enter your code here-----------
            }
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            roller_UI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    int roller_UI::ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            roller_UI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Description: Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    PropertyList* roller_UI::GetBlockProperties(const char *blockID)
    {
        return theDialog->GetBlockProperties(blockID);
    }
