//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\OneDrive\NX12Dev\Application\cycloidgear.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: haomjc
//              Version: NX 12
//              Date: 01-16-2019  (Format: mm-dd-yyyy)
//              Time: 11:04 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "cycloidgear.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(cycloidgear::theSession) = NULL;
UI *(cycloidgear::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
cycloidgear::cycloidgear()
{
    try
    {
        // Initialize the NX Open C++ API environment
        cycloidgear::theSession = NXOpen::Session::GetSession();
        cycloidgear::theUI = UI::GetUI();
        theDlxFileName = "cycloidgear.dlx";
        theDialog = cycloidgear::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &cycloidgear::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &cycloidgear::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &cycloidgear::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &cycloidgear::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &cycloidgear::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
cycloidgear::~cycloidgear()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    cycloidgear *thecycloidgear = NULL;
    try
    {
        thecycloidgear = new cycloidgear();
        // The following method shows the dialog immediately
        thecycloidgear->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        cycloidgear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(thecycloidgear != NULL)
    {
        delete thecycloidgear;
        thecycloidgear = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        cycloidgear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int cycloidgear::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        cycloidgear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void cycloidgear::initialize_cb()
{
    try
    {
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
        integer_zc = dynamic_cast<NXOpen::BlockStyler::IntegerBlock*>(theDialog->TopBlock()->FindBlock("integer_zc"));
        double_e = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_e"));
        double_rp = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_rp"));
        double_rrp = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_rrp"));
        double_r1 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_r1"));
        double_r2 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_r2"));
        double_r3 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_r3"));
        double_d1 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_d1"));
        double_d2 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_d2"));
        integer_alpha = dynamic_cast<NXOpen::BlockStyler::IntegerBlock*>(theDialog->TopBlock()->FindBlock("integer_alpha"));
        integer_beta = dynamic_cast<NXOpen::BlockStyler::IntegerBlock*>(theDialog->TopBlock()->FindBlock("integer_beta"));
        double_v1 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_v1"));
        double_v2 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_v2"));
        double_v3 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_v3"));
        double_v4 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_v4"));
        double_v5 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_v5"));
        double_h1 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_h1"));
        double_h2 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_h2"));
        double_h3 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double_h3"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        cycloidgear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void cycloidgear::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        cycloidgear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int cycloidgear::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----
		int zc = this->integer_zc->GetProperties()->GetInteger("Value");

		double e = this->double_e->GetProperties()->GetDouble("Value");
		double rp = this->double_rp->GetProperties()->GetDouble("Value");
		double rrp = this->double_rrp->GetProperties()->GetDouble("Value");
		double r1 = this->double_r1->GetProperties()->GetDouble("Value");
		double r2 = this->double_r2->GetProperties()->GetDouble("Value");
		double r3 = this->double_r3->GetProperties()->GetDouble("Value");
		double d1 = this->double_d1->GetProperties()->GetDouble("Value");
		double d2 = this->double_d2->GetProperties()->GetDouble("Value");
		int alpha = this->integer_alpha->GetProperties()->GetInteger("Value");
		int beta = this->integer_beta->GetProperties()->GetInteger("Value");
		double v1 = this->double_v1->GetProperties()->GetDouble("Value");
		double v2 = this->double_v2->GetProperties()->GetDouble("Value");
		double v3 = this->double_v3->GetProperties()->GetDouble("Value");
		double v4 = this->double_v4->GetProperties()->GetDouble("Value");
		double v5 = this->double_v5->GetProperties()->GetDouble("Value");
		double h1 = this->double_h1->GetProperties()->GetDouble("Value");
		double h2 = this->double_h2->GetProperties()->GetDouble("Value");
		double h3 = this->double_h3->GetProperties()->GetDouble("Value");


		stringstream s_zc ,s_e  ,s_rp,s_rrp                           ;

		s_zc << zc;
		s_e << e;
		s_rp << rp;
		s_rrp << rrp;






		NXOpen::Session *theSession = NXOpen::Session::GetSession();
		NXOpen::Part *workPart(theSession->Parts()->Work());
		NXOpen::Part *displayPart(theSession->Parts()->Display());
		
		//    工具(T)->表达式(X)...
		theSession->Preferences()->Modeling()->SetUpdatePending(false);


		NXOpen::Unit *nullNXOpen_Unit(NULL);
		NXOpen::Expression *expression1;
		expression1 = workPart->Expressions()->CreateWithUnits("zc="+ s_zc.str(), nullNXOpen_Unit);


		std::vector<NXOpen::NXObject *> objects1(1);
		objects1[0] = expression1;

		expression1->EditComment("");


		NXOpen::Expression *expression2;
		expression2 = workPart->Expressions()->CreateWithUnits("e="+s_e.str(), nullNXOpen_Unit);

		std::vector<NXOpen::NXObject *> objects2(1);
		objects2[0] = expression2;

		expression2->EditComment("");


		NXOpen::Expression *expression3;
		expression3 = workPart->Expressions()->CreateWithUnits("rp="+s_rp.str(), nullNXOpen_Unit);

		std::vector<NXOpen::NXObject *> objects3(1);
		objects3[0] = expression3;

		expression3->EditComment("");


		NXOpen::Expression *expression4;
		expression4 = workPart->Expressions()->CreateWithUnits("rrp="+s_rrp.str(), nullNXOpen_Unit);


		std::vector<NXOpen::NXObject *> objects4(1);
		objects4[0] = expression4;
		expression4->EditComment("");

		NXOpen::Expression *expression5;
		expression5 = workPart->Expressions()->CreateWithUnits("t=0", nullNXOpen_Unit);


		std::vector<NXOpen::NXObject *> objects5(1);
		objects5[0] = expression5;

		expression5->EditComment("");


		NXOpen::Expression *expression6;
		expression6 = workPart->Expressions()->CreateWithUnits("zt=0", nullNXOpen_Unit);


		std::vector<NXOpen::NXObject *> objects6(1);
		objects6[0] = expression6;

		expression6->EditComment("");

		NXOpen::Expression *expression7;
		expression7 = workPart->Expressions()->CreateWithUnits("a1=360*t*zc", nullNXOpen_Unit);


		std::vector<NXOpen::NXObject *> objects7(1);
		objects7[0] = expression7;

		expression7->EditComment("");

		NXOpen::Expression *expression8;
		try
		{
			// 数据类型错误匹配（二元运算）
			expression8 = workPart->Expressions()->CreateWithUnits("f=1/sqrt(1+k1*k1-2*k1*cos(a1))", nullNXOpen_Unit);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(3270018);
		}


		NXOpen::Expression *expression9;
		expression9 = workPart->Expressions()->CreateWithUnits("zp=zc+1", nullNXOpen_Unit);


		std::vector<NXOpen::NXObject *> objects8(1);
		objects8[0] = expression9;

		expression9->EditComment("");

		NXOpen::Expression *expression10;
		expression10 = workPart->Expressions()->CreateWithUnits("i=zp/zc", nullNXOpen_Unit);

		std::vector<NXOpen::NXObject *> objects9(1);
		objects9[0] = expression10;

		expression10->EditComment("");

		NXOpen::Expression *expression11;
		expression11 = workPart->Expressions()->CreateWithUnits("k1=e*zc/rp", nullNXOpen_Unit);

		std::vector<NXOpen::NXObject *> objects10(1);
		objects10[0] = expression11;
		expression11->EditComment("");

		NXOpen::Expression *expression12;
		try
		{
			// 指定的表达式变量不存在。
			expression12 = workPart->Expressions()->CreateWithUnits("xt=(rp-rrp*f)*cos((1-i)*a1)-(e-k1*rrp*f)*cos(i*a1)", nullNXOpen_Unit);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050007);
		}


		NXOpen::Expression *expression13;
		try
		{
			// 指定的表达式变量不存在。
			expression13 = workPart->Expressions()->CreateWithUnits("yt=(rp-rrp*f)*sin((1-i)*a1)+(e-k1*rrp*f)*sin(i*a1)", nullNXOpen_Unit);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050007);
		}

		NXOpen::Expression *expression14;
		expression14 = workPart->Expressions()->CreateWithUnits("f=1/sqrt(1+k1*k1-2*k1*cos(a1))", nullNXOpen_Unit);


		std::vector<NXOpen::NXObject *> objects11(1);
		objects11[0] = expression14;

		expression14->EditComment("");

		NXOpen::Expression *expression15;
		expression15 = workPart->Expressions()->CreateWithUnits("xt=(rp-rrp*f)*cos((1-i)*a1)-(e-k1*rrp*f)*cos(i*a1)", nullNXOpen_Unit);

		std::vector<NXOpen::NXObject *> objects12(1);
		objects12[0] = expression15;

		expression15->EditComment("");

		NXOpen::Expression *expression16;
		expression16 = workPart->Expressions()->CreateWithUnits("yt=(rp-rrp*f)*sin((1-i)*a1)+(e-k1*rrp*f)*sin(i*a1)", nullNXOpen_Unit);

		std::vector<NXOpen::NXObject *> objects13(1);
		objects13[0] = expression16;

		expression16->EditComment("");

		std::vector<NXOpen::NXObject *> objects14(13);
		objects14[0] = expression1;
		objects14[1] = expression2;
		objects14[2] = expression3;
		objects14[3] = expression4;
		objects14[4] = expression5;
		objects14[5] = expression6;
		objects14[6] = expression7;
		objects14[7] = expression9;
		objects14[8] = expression10;
		objects14[9] = expression11;
		objects14[10] = expression14;
		objects14[11] = expression15;
		objects14[12] = expression16;


		// ----------------------------------------------
		//   插入(S)->草图(H)...
		// ----------------------------------------------

		NXOpen::Sketch *nullNXOpen_Sketch(NULL);
		NXOpen::SketchInPlaceBuilder *sketchInPlaceBuilder1;
		sketchInPlaceBuilder1 = workPart->Sketches()->CreateSketchInPlaceBuilder2(nullNXOpen_Sketch);

		NXOpen::Point3d origin1(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal1(0.0, 0.0, 1.0);
		NXOpen::Plane *plane1;
		plane1 = workPart->Planes()->CreatePlane(origin1, normal1, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder1->SetPlaneReference(plane1);

		NXOpen::Unit *unit1(dynamic_cast<NXOpen::Unit *>(workPart->UnitCollection()->FindObject("MilliMeter")));
		NXOpen::Expression *expression17;
		expression17 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression18;
		expression18 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::SketchAlongPathBuilder *sketchAlongPathBuilder1;
		sketchAlongPathBuilder1 = workPart->Sketches()->CreateSketchAlongPathBuilder(nullNXOpen_Sketch);

		sketchAlongPathBuilder1->PlaneLocation()->Expression()->SetRightHandSide("0");

		theSession->Preferences()->Sketch()->SetCreateInferredConstraints(true);

		theSession->Preferences()->Sketch()->SetContinuousAutoDimensioning(true);

		theSession->Preferences()->Sketch()->SetDimensionLabel(NXOpen::Preferences::SketchPreferences::DimensionLabelTypeExpression);

		theSession->Preferences()->Sketch()->SetTextSizeFixed(true);

		theSession->Preferences()->Sketch()->SetFixedTextSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayParenthesesOnReferenceDimensions(true);

		theSession->Preferences()->Sketch()->SetDisplayReferenceGeometry(false);

		theSession->Preferences()->Sketch()->SetConstraintSymbolSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayObjectColor(false);

		theSession->Preferences()->Sketch()->SetDisplayObjectName(true);

		NXOpen::NXObject *nXObject1;
		nXObject1 = sketchInPlaceBuilder1->Commit();

		NXOpen::Sketch *sketch1(dynamic_cast<NXOpen::Sketch *>(nXObject1));
		NXOpen::Features::Feature *feature1;
		feature1 = sketch1->Feature();

		sketch1->Activate(NXOpen::Sketch::ViewReorientTrue);

		sketchInPlaceBuilder1->Destroy();

		sketchAlongPathBuilder1->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression18);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression17);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane1->DestroyPlane();

		// ----------------------------------------------
		//   插入(S)->草图曲线(S)->直线(L)...
		// ----------------------------------------------

		NXOpen::Point3d startPoint1(0.0, v2/2, 0.0);
		NXOpen::Point3d endPoint1(0, v1/2, 0.0);
		NXOpen::Line *line1;
		line1 = workPart->Curves()->CreateLine(startPoint1, endPoint1);

		theSession->ActiveSketch()->AddGeometry(line1, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);



		NXOpen::Sketch::ConstraintGeometry geom1;
		geom1.Geometry = line1;
		geom1.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom1.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint2;
		sketchGeometricConstraint2 = theSession->ActiveSketch()->CreateVerticalConstraint(geom1);


		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Point3d startPoint2(0.0, v1/2, 0.0);
		NXOpen::Point3d endPoint2(-h1, v1 / 2, 0.0);
		NXOpen::Line *line2;
		line2 = workPart->Curves()->CreateLine(startPoint2, endPoint2);

		theSession->ActiveSketch()->AddGeometry(line2, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

	

		NXOpen::Sketch::ConstraintGeometry geom2;
		geom2.Geometry = line2;
		geom2.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom2.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint5;
		sketchGeometricConstraint5 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom2);


		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Point3d startPoint3(-h1, v1/2, 0.0);
		NXOpen::Point3d endPoint3(-h1, v5/2, 0.0);
		NXOpen::Line *line3;
		line3 = workPart->Curves()->CreateLine(startPoint3, endPoint3);

		theSession->ActiveSketch()->AddGeometry(line3, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

	
		NXOpen::Sketch::ConstraintGeometry geom3;
		geom3.Geometry = line3;
		geom3.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom3.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint8;
		sketchGeometricConstraint8 = theSession->ActiveSketch()->CreateVerticalConstraint(geom3);


		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Point3d startPoint4(-h1, v5/2, 0.0);
		NXOpen::Point3d endPoint4(12.0, v5 / 2, 0.0);
		NXOpen::Line *line4;
		line4 = workPart->Curves()->CreateLine(startPoint4, endPoint4);

		theSession->ActiveSketch()->AddGeometry(line4, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_7;
		geom1_7.Geometry = line4;
		geom1_7.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_7.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_7;
		geom2_7.Geometry = line3;
		geom2_7.PointType = NXOpen::Sketch::ConstraintPointTypeEndVertex;
		geom2_7.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint10;
		sketchGeometricConstraint10 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_7, geom2_7);

		NXOpen::Sketch::ConstraintGeometry geom4;
		geom4.Geometry = line4;
		geom4.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom4.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint11;
		sketchGeometricConstraint11 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom4);

	
		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Point3d startPoint5(h3-h1, v5/2, 0.0);
		NXOpen::Point3d endPoint5(h3-h1, v3/2, 0.0);
		NXOpen::Line *line5;
		line5 = workPart->Curves()->CreateLine(startPoint5, endPoint5);

		theSession->ActiveSketch()->AddGeometry(line5, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

	

		NXOpen::Sketch::ConstraintGeometry geom5;
		geom5.Geometry = line5;
		geom5.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom5.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint14;
		sketchGeometricConstraint14 = theSession->ActiveSketch()->CreateVerticalConstraint(geom5);


		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Point3d startPoint6(h3-h1, v3/2, 0.0);
		NXOpen::Point3d endPoint6(h3 - h1-h2, v3 / 2, 0.0);
		NXOpen::Line *line6;
		line6 = workPart->Curves()->CreateLine(startPoint6, endPoint6);

		theSession->ActiveSketch()->AddGeometry(line6, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);


		NXOpen::Sketch::ConstraintGeometry geom6;
		geom6.Geometry = line6;
		geom6.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom6.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint17;
		sketchGeometricConstraint17 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom6);


		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Point3d startPoint7(h3 - h1 - h2, v3/2, 0.0);
		NXOpen::Point3d endPoint7(h3 - h1 - h2, v2/2, 0.0);
		NXOpen::Line *line7;
		line7 = workPart->Curves()->CreateLine(startPoint7, endPoint7);

		theSession->ActiveSketch()->AddGeometry(line7, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom7;
		geom7.Geometry = line7;
		geom7.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom7.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint20;
		sketchGeometricConstraint20 = theSession->ActiveSketch()->CreateVerticalConstraint(geom7);


		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		NXOpen::Point3d startPoint8(h3 - h1 - h2, v2/2, 0.0);
		NXOpen::Point3d endPoint8(0.0, v2/2, 0.0);
		NXOpen::Line *line8;
		line8 = workPart->Curves()->CreateLine(startPoint8, endPoint8);

		theSession->ActiveSketch()->AddGeometry(line8, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);



		NXOpen::Sketch::ConstraintGeometry geom8;
		geom8.Geometry = line8;
		geom8.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom8.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint23;
		sketchGeometricConstraint23 = theSession->ActiveSketch()->CreateHorizontalConstraint(geom8);



		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		//   Dialog Begin Line
		//    插入(S)->草图曲线(S)->倒斜角(H)...

		stringstream s_h1, s_h2;

		s_h1 << h1;
		s_h2 << h2;


		NXOpen::SketchChamferBuilder *sketchChamferBuilder1;
		sketchChamferBuilder1 = workPart->Sketches()->CreateSketchChamferBuilder();

		sketchChamferBuilder1->Distance1()->SetRightHandSide("1");

		sketchChamferBuilder1->Distance2()->SetRightHandSide("0.5");

		sketchChamferBuilder1->Angle()->SetRightHandSide("45");



		NXOpen::Point3d point39(-0.77720068989039248, 76.3, 0.0);
		bool added1;
		added1 = sketchChamferBuilder1->CurvesToChamfer()->Add(line2, workPart->ModelingViews()->WorkView(), point39);

		NXOpen::Point3d point40(0, 74.82068577624085, 0.0);
		bool added2;
		added2 = sketchChamferBuilder1->CurvesToChamfer()->Add(line1, workPart->ModelingViews()->WorkView(), point40);

		NXOpen::Expression *expression246;
		expression246 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);




		sketchChamferBuilder1->Distance1()->SetRightHandSide(s_h1.str());

		sketchChamferBuilder1->SetCreateDistance1Dimension(true);

		NXOpen::Point3d coordinates9(-0.29774254312874238, 75.300143923002523, 0.0);
		NXOpen::Point *point41;
		point41 = workPart->Points()->CreatePoint(coordinates9);

		sketchChamferBuilder1->SetHelpPoint(point41);

		sketchChamferBuilder1->Distance2()->SetRightHandSide("1.3");

		sketchChamferBuilder1->Angle()->SetRightHandSide("45");

		NXOpen::NXObject *nXObject2;
		nXObject2 = sketchChamferBuilder1->Commit();

		NXOpen::Expression *expression247(sketchChamferBuilder1->Distance1());
		sketchChamferBuilder1->Destroy();

		workPart->Expressions()->Delete(expression246);

		NXOpen::SketchChamferBuilder *sketchChamferBuilder2;
		sketchChamferBuilder2 = workPart->Sketches()->CreateSketchChamferBuilder();

		sketchChamferBuilder2->Distance1()->SetRightHandSide("2");

		sketchChamferBuilder2->Distance2()->SetRightHandSide("1.3");

		sketchChamferBuilder2->Angle()->SetRightHandSide("45");

		NXOpen::Point3d point42(11.488936898095202, 76.3, 0.0);
		bool added3;
		added3 = sketchChamferBuilder2->CurvesToChamfer()->Add(line6, workPart->ModelingViews()->WorkView(), point42);

		NXOpen::Point3d point43(11, 75.300143923002523, 0.0);
		bool added4;
		added4 = sketchChamferBuilder2->CurvesToChamfer()->Add(line7, workPart->ModelingViews()->WorkView(), point43);

		NXOpen::Expression *expression248;
		expression248 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		sketchChamferBuilder2->Distance1()->SetRightHandSide(s_h2.str());

		sketchChamferBuilder2->SetCreateDistance1Dimension(true);

		NXOpen::Point3d coordinates10(11.409027206968261, 75.939421452018053, 0.0);
		NXOpen::Point *point44;
		point44 = workPart->Points()->CreatePoint(coordinates10);

		sketchChamferBuilder2->SetHelpPoint(point44);

		sketchChamferBuilder2->Distance2()->SetRightHandSide("0.8");

		sketchChamferBuilder2->Angle()->SetRightHandSide("45");


		NXOpen::NXObject *nXObject3;
		nXObject3 = sketchChamferBuilder2->Commit();

		NXOpen::Expression *expression249(sketchChamferBuilder2->Distance1());
		sketchChamferBuilder2->Destroy();

		workPart->Expressions()->Delete(expression248);


		//   插入(S)->设计特征(E)->旋转(R)...

		NXOpen::Features::Feature *nullNXOpen_Features_Feature(NULL);
		NXOpen::Features::RevolveBuilder *revolveBuilder1;
		revolveBuilder1 = workPart->Features()->CreateRevolveBuilder(nullNXOpen_Features_Feature);

		revolveBuilder1->Limits()->StartExtend()->Value()->SetRightHandSide("0");

		revolveBuilder1->Limits()->EndExtend()->Value()->SetRightHandSide("360");

		revolveBuilder1->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies1(1);
		NXOpen::Body *nullNXOpen_Body(NULL);
		targetBodies1[0] = nullNXOpen_Body;
		revolveBuilder1->BooleanOperation()->SetTargetBodies(targetBodies1);

		revolveBuilder1->Offset()->StartOffset()->SetRightHandSide("0");

		revolveBuilder1->Offset()->EndOffset()->SetRightHandSide("5");

		revolveBuilder1->SetTolerance(0.001);

		NXOpen::Section *section1;
		section1 = workPart->Sections()->CreateSection(0.00095, 0.001, 0.050000000000000003);

		revolveBuilder1->SetSection(section1);

		NXOpen::GeometricUtilities::SmartVolumeProfileBuilder *smartVolumeProfileBuilder1;
		smartVolumeProfileBuilder1 = revolveBuilder1->SmartVolumeProfile();

		smartVolumeProfileBuilder1->SetOpenProfileSmartVolumeOption(false);

		smartVolumeProfileBuilder1->SetCloseProfileRule(NXOpen::GeometricUtilities::SmartVolumeProfileBuilder::CloseProfileRuleTypeFci);

		section1->SetDistanceTolerance(0.001);

		section1->SetChainingTolerance(0.00095);

		std::vector<double> starthelperpoint1(3);
		const double starthelperpoint1_initial_values[] = {
			0.0, 0.0, 0.0
		};
		starthelperpoint1.assign(starthelperpoint1_initial_values, starthelperpoint1_initial_values + 3);
		revolveBuilder1->SetStartLimitHelperPoint(starthelperpoint1);

		std::vector<double> endhelperpoint1(3);
		const double endhelperpoint1_initial_values[] = {
			0.0, 0.0, 0.0
		};
		endhelperpoint1.assign(endhelperpoint1_initial_values, endhelperpoint1_initial_values + 3);
		revolveBuilder1->SetEndLimitHelperPoint(endhelperpoint1);

		section1->SetAllowedEntityTypes(NXOpen::Section::AllowTypesOnlyCurves);

		std::vector<NXOpen::ICurve *> curves1(10);
		curves1[0] = line2;
		curves1[1] = line8;
		NXOpen::Line *line9(dynamic_cast<NXOpen::Line *>(nXObject2));
		curves1[2] = line9;
		curves1[3] = line4;
		NXOpen::Line *line10(dynamic_cast<NXOpen::Line *>(nXObject3));
		curves1[4] = line10;
		curves1[5] = line5;
		curves1[6] = line3;
		curves1[7] = line7;
		curves1[8] = line6;
		curves1[9] = line1;


		std::vector<NXOpen::SelectionIntentRule *> rules1(1);
		NXOpen::Point3d seedPoint1(7.6666666666666652, 76.700000000000003, 0.0);
	NXOpen::RegionBoundaryRule *regionBoundaryRule1;
		regionBoundaryRule1 = workPart->ScRuleFactory()->CreateRuleRegionBoundary(theSession->ActiveSketch(), curves1, seedPoint1, 0.001);
		rules1[0] = regionBoundaryRule1;

		
		//std::vector<NXOpen::SelectionIntentRule *> rules1(1);
		//CurveFeatureRule *curveFeatureRule2;
		//std::vector<Features::Feature *> Rulefeatures(1);
		//Rulefeatures[0] = theSession->ActiveSketch()->Feature();
		//curveFeatureRule2 = workPart->ScRuleFactory()->CreateRuleCurveFeature(Rulefeatures);
		//rules1[0] = curveFeatureRule2;

		section1->AllowSelfIntersection(false);


		NXOpen::NXObject *nullNXOpen_NXObject(NULL);
		NXOpen::Point3d helpPoint1(0.0, 0.0, 0.0);
		section1->AddToSection(rules1, nullNXOpen_NXObject, nullNXOpen_NXObject, nullNXOpen_NXObject, helpPoint1, NXOpen::Section::ModeCreate, false);

		revolveBuilder1->SetSection(section1);

		NXOpen::Expression *expression250;
		expression250 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		revolveBuilder1->SetSection(section1);

		NXOpen::Expression *expression251;
		expression251 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin4(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector1(1.0, 0.0, 0.0);
		NXOpen::Direction *direction1;
		direction1 = workPart->Directions()->CreateDirection(origin4, vector1, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *nullNXOpen_Point(NULL);
		NXOpen::Axis *axis1;
		axis1 = workPart->Axes()->CreateAxis(nullNXOpen_Point, direction1, NXOpen::SmartObject::UpdateOptionWithinModeling);

		revolveBuilder1->SetAxis(axis1);

		NXOpen::Expression *expression252;
		expression252 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);



		NXOpen::Features::DatumCsys *datumCsys1(dynamic_cast<NXOpen::Features::DatumCsys *>(workPart->Features()->FindObject("DATUM_CSYS(0)")));
		NXOpen::Point *point45(dynamic_cast<NXOpen::Point *>(datumCsys1->FindObject("POINT 1")));
		NXOpen::Xform *nullNXOpen_Xform(NULL);
		NXOpen::Point *point46;
		point46 = workPart->Points()->CreatePoint(point45, nullNXOpen_Xform, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::NXObject *nXObject4;
		NXOpen::Xform *xform1;
		xform1 = workPart->Xforms()->CreateExtractXform(point45, NXOpen::SmartObject::UpdateOptionWithinModeling, false, &nXObject4);

		NXOpen::Point *point47(dynamic_cast<NXOpen::Point *>(nXObject4));
		NXOpen::Point *point48;
		point48 = workPart->Points()->CreatePoint(point47, nullNXOpen_Xform, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point49;
		point49 = axis1->Point();

		axis1->SetPoint(point48);

		revolveBuilder1->SetAxis(axis1);

		revolveBuilder1->SetParentFeatureInternal(false);


		NXOpen::Features::Feature *feature2;
		feature2 = revolveBuilder1->CommitFeature();


		NXOpen::Expression *expression253(revolveBuilder1->Limits()->StartExtend()->Value());
		NXOpen::Expression *expression254(revolveBuilder1->Limits()->EndExtend()->Value());
		revolveBuilder1->Destroy();

		workPart->Expressions()->Delete(expression250);

		workPart->Expressions()->Delete(expression252);

		workPart->Expressions()->Delete(expression251);

		// ----------------------------------------------
		//  插入(S)->曲线(C)->规律曲线(W)...
		// ----------------------------------------------

		NXOpen::Features::LawCurve *nullNXOpen_Features_LawCurve(NULL);
		NXOpen::Features::LawCurveBuilder *lawCurveBuilder1;
		lawCurveBuilder1 = workPart->Features()->CreateLawCurveBuilder(nullNXOpen_Features_LawCurve);

		NXOpen::Expression *expression255;
		expression255 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression256;
		expression256 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression257;
		expression257 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		lawCurveBuilder1->XLaw()->SetLawType(NXOpen::GeometricUtilities::LawBuilder::TypeByEquation);

		lawCurveBuilder1->XLaw()->Value()->SetRightHandSide("0");

		lawCurveBuilder1->XLaw()->StartValue()->SetRightHandSide("0");

		lawCurveBuilder1->XLaw()->EndValue()->SetRightHandSide("0");

		lawCurveBuilder1->XLaw()->SetFunction("zt");

		lawCurveBuilder1->YLaw()->SetLawType(NXOpen::GeometricUtilities::LawBuilder::TypeByEquation);

		lawCurveBuilder1->YLaw()->Value()->SetRightHandSide("0");

		lawCurveBuilder1->YLaw()->StartValue()->SetRightHandSide("0");

		lawCurveBuilder1->YLaw()->EndValue()->SetRightHandSide("0");

		lawCurveBuilder1->ZLaw()->SetLawType(NXOpen::GeometricUtilities::LawBuilder::TypeByEquation);

		lawCurveBuilder1->ZLaw()->Value()->SetRightHandSide("0");

		lawCurveBuilder1->ZLaw()->StartValue()->SetRightHandSide("0");

		lawCurveBuilder1->ZLaw()->EndValue()->SetRightHandSide("0");

		lawCurveBuilder1->ZLaw()->SetFunction("xt");

		lawCurveBuilder1->XLaw()->AlongSpineData()->Spine()->SetDistanceTolerance(0.001);

		lawCurveBuilder1->XLaw()->AlongSpineData()->Spine()->SetChainingTolerance(0.00095);

		lawCurveBuilder1->XLaw()->LawCurve()->SetDistanceTolerance(0.001);

		lawCurveBuilder1->XLaw()->LawCurve()->SetChainingTolerance(0.00095);

		lawCurveBuilder1->YLaw()->AlongSpineData()->Spine()->SetDistanceTolerance(0.001);

		lawCurveBuilder1->YLaw()->AlongSpineData()->Spine()->SetChainingTolerance(0.00095);

		lawCurveBuilder1->YLaw()->LawCurve()->SetDistanceTolerance(0.001);

		lawCurveBuilder1->YLaw()->LawCurve()->SetChainingTolerance(0.00095);

		lawCurveBuilder1->ZLaw()->AlongSpineData()->Spine()->SetDistanceTolerance(0.001);

		lawCurveBuilder1->ZLaw()->AlongSpineData()->Spine()->SetChainingTolerance(0.00095);

		lawCurveBuilder1->ZLaw()->LawCurve()->SetDistanceTolerance(0.001);

		lawCurveBuilder1->ZLaw()->LawCurve()->SetChainingTolerance(0.00095);


		NXOpen::NXObject *nXObject5;
		nXObject5 = lawCurveBuilder1->Commit();

		lawCurveBuilder1->Destroy();

		workPart->Expressions()->Delete(expression255);

		workPart->Expressions()->Delete(expression256);

		workPart->Expressions()->Delete(expression257);

		// ----------------------------------------------
		//    插入(S)->设计特征(E)->拉伸(X)...
		// ----------------------------------------------

		NXOpen::Features::ExtrudeBuilder *extrudeBuilder1;
		extrudeBuilder1 = workPart->Features()->CreateExtrudeBuilder(nullNXOpen_Features_Feature);

		NXOpen::Section *section2;
		section2 = workPart->Sections()->CreateSection(0.00095, 0.001, 0.050000000000000003);

		extrudeBuilder1->SetSection(section2);

		extrudeBuilder1->AllowSelfIntersectingSection(true);


		extrudeBuilder1->SetDistanceTolerance(0.001);

		extrudeBuilder1->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies2(1);
		targetBodies2[0] = nullNXOpen_Body;
		extrudeBuilder1->BooleanOperation()->SetTargetBodies(targetBodies2);

		extrudeBuilder1->Limits()->StartExtend()->Value()->SetRightHandSide("-34");

		extrudeBuilder1->Limits()->EndExtend()->Value()->SetRightHandSide("25");

		extrudeBuilder1->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeIntersect);

		std::vector<NXOpen::Body *> targetBodies3(1);
		NXOpen::Body *body1(dynamic_cast<NXOpen::Body *>(workPart->Bodies()->FindObject("REVOLVED(2)")));
		targetBodies3[0] = body1;
		extrudeBuilder1->BooleanOperation()->SetTargetBodies(targetBodies3);

		extrudeBuilder1->Draft()->FrontDraftAngle()->SetRightHandSide("2");

		extrudeBuilder1->Draft()->BackDraftAngle()->SetRightHandSide("2");

		extrudeBuilder1->Offset()->StartOffset()->SetRightHandSide("0");

		extrudeBuilder1->Offset()->EndOffset()->SetRightHandSide("5");

		NXOpen::GeometricUtilities::SmartVolumeProfileBuilder *smartVolumeProfileBuilder2;
		smartVolumeProfileBuilder2 = extrudeBuilder1->SmartVolumeProfile();

		smartVolumeProfileBuilder2->SetOpenProfileSmartVolumeOption(false);

		smartVolumeProfileBuilder2->SetCloseProfileRule(NXOpen::GeometricUtilities::SmartVolumeProfileBuilder::CloseProfileRuleTypeFci);

		section2->SetDistanceTolerance(0.001);

		section2->SetChainingTolerance(0.00095);

		section2->SetAllowedEntityTypes(NXOpen::Section::AllowTypesOnlyCurves);

		std::vector<NXOpen::Features::Feature *> features1(1);
		NXOpen::Features::LawCurve *lawCurve1(dynamic_cast<NXOpen::Features::LawCurve *>(nXObject5));
		features1[0] = lawCurve1;
		NXOpen::CurveFeatureRule *curveFeatureRule1;
		curveFeatureRule1 = workPart->ScRuleFactory()->CreateRuleCurveFeature(features1);

		section2->AllowSelfIntersection(true);

		std::vector<NXOpen::SelectionIntentRule *> rules2(1);
		rules2[0] = curveFeatureRule1;
		NXOpen::Point3d helpPoint2(0.0, 0.0, 0.0);
		section2->AddToSection(rules2, nullNXOpen_NXObject, nullNXOpen_NXObject, nullNXOpen_NXObject, helpPoint2, NXOpen::Section::ModeCreate, false);

		NXOpen::Point3d origin5(0.0, -0, -0.0);
		NXOpen::Vector3d vector2(1.0, 0.0, 0.0);
		NXOpen::Direction *direction2;
		direction2 = workPart->Directions()->CreateDirection(origin5, vector2, NXOpen::SmartObject::UpdateOptionWithinModeling);

		extrudeBuilder1->SetDirection(direction2);

		NXOpen::Expression *expression259;
		expression259 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression260;
		expression260 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);


		extrudeBuilder1->SetParentFeatureInternal(false);

		NXOpen::Features::Feature *feature3;
		feature3 = extrudeBuilder1->CommitFeature();

		NXOpen::Expression *expression261(extrudeBuilder1->Limits()->StartExtend()->Value());
		NXOpen::Expression *expression262(extrudeBuilder1->Limits()->EndExtend()->Value());
		extrudeBuilder1->Destroy();


		workPart->Expressions()->Delete(expression260);

		workPart->Expressions()->Delete(expression259);

		// ----------------------------------------------
		//   插入(S)->草图(H)...
		// ----------------------------------------------

		NXOpen::SketchInPlaceBuilder *sketchInPlaceBuilder2;
		sketchInPlaceBuilder2 = workPart->Sketches()->CreateSketchInPlaceBuilder2(nullNXOpen_Sketch);

		NXOpen::Point3d origin6(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal2(0.0, 0.0, 1.0);
		NXOpen::Plane *plane2;
		plane2 = workPart->Planes()->CreatePlane(origin6, normal2, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder2->SetPlaneReference(plane2);

		NXOpen::Expression *expression263;
		expression263 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression264;
		expression264 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::SketchAlongPathBuilder *sketchAlongPathBuilder2;
		sketchAlongPathBuilder2 = workPart->Sketches()->CreateSketchAlongPathBuilder(nullNXOpen_Sketch);

		sketchAlongPathBuilder2->PlaneLocation()->Expression()->SetRightHandSide("0");

		theSession->Preferences()->Sketch()->SetCreateInferredConstraints(true);

		theSession->Preferences()->Sketch()->SetContinuousAutoDimensioning(true);

		theSession->Preferences()->Sketch()->SetDimensionLabel(NXOpen::Preferences::SketchPreferences::DimensionLabelTypeExpression);

		theSession->Preferences()->Sketch()->SetTextSizeFixed(true);

		theSession->Preferences()->Sketch()->SetFixedTextSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayParenthesesOnReferenceDimensions(true);

		theSession->Preferences()->Sketch()->SetDisplayReferenceGeometry(false);

		theSession->Preferences()->Sketch()->SetConstraintSymbolSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayObjectColor(false);

		theSession->Preferences()->Sketch()->SetDisplayObjectName(true);

		NXOpen::NXObject *nXObject6;
		nXObject6 = sketchInPlaceBuilder2->Commit();

		NXOpen::Sketch *sketch2(dynamic_cast<NXOpen::Sketch *>(nXObject6));
		NXOpen::Features::Feature *feature4;
		feature4 = sketch2->Feature();

		sketch2->Activate(NXOpen::Sketch::ViewReorientTrue);

		sketchInPlaceBuilder2->Destroy();

		sketchAlongPathBuilder2->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression264);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression263);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane2->DestroyPlane();

		//  完成草图(K)

		NXOpen::Sketch *sketch3;
		sketch3 = theSession->ActiveSketch();


		theSession->ActiveSketch()->Deactivate(NXOpen::Sketch::ViewReorientTrue, NXOpen::Sketch::UpdateLevelModel);

		//    插入(S)->草图(H)...

		NXOpen::SketchInPlaceBuilder *sketchInPlaceBuilder3;
		sketchInPlaceBuilder3 = workPart->Sketches()->CreateSketchInPlaceBuilder2(nullNXOpen_Sketch);

		NXOpen::Point3d origin7(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal3(0.0, 0.0, 1.0);
		NXOpen::Plane *plane3;
		plane3 = workPart->Planes()->CreatePlane(origin7, normal3, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder3->SetPlaneReference(plane3);

		NXOpen::Expression *expression265;
		expression265 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression266;
		expression266 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::SketchAlongPathBuilder *sketchAlongPathBuilder3;
		sketchAlongPathBuilder3 = workPart->Sketches()->CreateSketchAlongPathBuilder(nullNXOpen_Sketch);

		sketchAlongPathBuilder3->PlaneLocation()->Expression()->SetRightHandSide("0");

		NXOpen::DatumAxis *datumAxis1(dynamic_cast<NXOpen::DatumAxis *>(workPart->Datums()->FindObject("DATUM_CSYS(0) Y axis")));
		NXOpen::Direction *direction3;
		direction3 = workPart->Directions()->CreateDirection(datumAxis1, NXOpen::SenseForward, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::DatumPlane *datumPlane1(dynamic_cast<NXOpen::DatumPlane *>(workPart->Datums()->FindObject("DATUM_CSYS(0) XZ plane")));
		NXOpen::Xform *xform2;
		xform2 = workPart->Xforms()->CreateXformByPlaneXDirPoint(datumPlane1, direction3, point47, NXOpen::SmartObject::UpdateOptionWithinModeling, 0.625, false, false);

		NXOpen::CartesianCoordinateSystem *cartesianCoordinateSystem1;
		cartesianCoordinateSystem1 = workPart->CoordinateSystems()->CreateCoordinateSystem(xform2, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder3->SetCsystem(cartesianCoordinateSystem1);

		NXOpen::Point3d origin8(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal4(0.0, 0.0, 1.0);
		NXOpen::Plane *plane4;
		plane4 = workPart->Planes()->CreatePlane(origin8, normal4, NXOpen::SmartObject::UpdateOptionWithinModeling);

		plane4->SetMethod(NXOpen::PlaneTypes::MethodTypeCoincident);

		std::vector<NXOpen::NXObject *> geom9(1);
		geom9[0] = datumPlane1;
		plane4->SetGeometry(geom9);

		plane4->SetFlip(false);

		plane4->SetExpression(NULL);

		plane4->SetAlternate(NXOpen::PlaneTypes::AlternateTypeOne);

		plane4->Evaluate();

		NXOpen::Point3d origin9(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal5(0.0, 0.0, 1.0);
		NXOpen::Plane *plane5;
		plane5 = workPart->Planes()->CreatePlane(origin9, normal5, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression267;
		expression267 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression268;
		expression268 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		plane5->SynchronizeToPlane(plane4);

		plane5->SetMethod(NXOpen::PlaneTypes::MethodTypeCoincident);

		std::vector<NXOpen::NXObject *> geom10(1);
		geom10[0] = datumPlane1;
		plane5->SetGeometry(geom10);

		plane5->SetAlternate(NXOpen::PlaneTypes::AlternateTypeOne);

		plane5->Evaluate();


		theSession->Preferences()->Sketch()->SetCreateInferredConstraints(true);

		theSession->Preferences()->Sketch()->SetContinuousAutoDimensioning(true);

		theSession->Preferences()->Sketch()->SetDimensionLabel(NXOpen::Preferences::SketchPreferences::DimensionLabelTypeExpression);

		theSession->Preferences()->Sketch()->SetTextSizeFixed(true);

		theSession->Preferences()->Sketch()->SetFixedTextSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayParenthesesOnReferenceDimensions(true);

		theSession->Preferences()->Sketch()->SetDisplayReferenceGeometry(false);

		theSession->Preferences()->Sketch()->SetConstraintSymbolSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayObjectColor(false);

		theSession->Preferences()->Sketch()->SetDisplayObjectName(true);

		NXOpen::NXObject *nXObject7;
		nXObject7 = sketchInPlaceBuilder3->Commit();

		NXOpen::Sketch *sketch4(dynamic_cast<NXOpen::Sketch *>(nXObject7));
		NXOpen::Features::Feature *feature5;
		feature5 = sketch4->Feature();


		sketch4->Activate(NXOpen::Sketch::ViewReorientTrue);

		sketchInPlaceBuilder3->Destroy();

		sketchAlongPathBuilder3->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression266);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression265);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane3->DestroyPlane();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression268);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression267);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane5->DestroyPlane();

		// ----------------------------------------------
		//    插入(S)->草图曲线(S)->点(T)...
		// ----------------------------------------------

		NXOpen::Expression *expression269;
		expression269 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression270;
		expression270 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression271;
		expression271 = workPart->Expressions()->CreateSystemExpressionWithUnits("p26_x=0.00000000000", unit1);

		NXOpen::Expression *expression272;
		expression272 = workPart->Expressions()->CreateSystemExpressionWithUnits("p27_y=0.00000000000", unit1);

		NXOpen::Expression *expression273;
		expression273 = workPart->Expressions()->CreateSystemExpressionWithUnits("p28_z=0.00000000000", unit1);

		NXOpen::Expression *expression274;
		expression274 = workPart->Expressions()->CreateSystemExpressionWithUnits("p29_xdelta=0.00000000000", unit1);

		NXOpen::Expression *expression275;
		expression275 = workPart->Expressions()->CreateSystemExpressionWithUnits("p30_ydelta=0.00000000000", unit1);

		NXOpen::Expression *expression276;
		expression276 = workPart->Expressions()->CreateSystemExpressionWithUnits("p31_zdelta=0.00000000000", unit1);

		NXOpen::Expression *expression277;
		expression277 = workPart->Expressions()->CreateSystemExpressionWithUnits("p32_radius=0.00000000000", unit1);

		NXOpen::Expression *expression279;
		expression279 = workPart->Expressions()->CreateSystemExpressionWithUnits("p34_zdelta=0.00000000000", unit1);

		NXOpen::Expression *expression280;
		expression280 = workPart->Expressions()->CreateSystemExpressionWithUnits("p35_radius=0.00000000000", unit1);




		NXOpen::Expression *expression283;
		expression283 = workPart->Expressions()->CreateSystemExpressionWithUnits("p38_distance=0", unit1);

		NXOpen::Expression *expression284;
		expression284 = workPart->Expressions()->CreateSystemExpressionWithUnits("p39_arclen=0", unit1);

		NXOpen::Expression *expression285;
		expression285 = workPart->Expressions()->CreateSystemExpressionWithUnits("p40_percent=0", nullNXOpen_Unit);

		stringstream s_h3_h1_h2,s_v2_d;

		s_h3_h1_h2 << h3 - h1 - h2;
		s_v2_d << v2 / 2;


		expression271->SetRightHandSide(s_h3_h1_h2.str());

		expression272->SetRightHandSide(s_v2_d.str());

		expression273->SetRightHandSide("0");

		expression274->SetRightHandSide("0");

		expression275->SetRightHandSide("0");

		expression276->SetRightHandSide("0");

		expression277->SetRightHandSide("0");

		expression279->SetRightHandSide("0");

		expression280->SetRightHandSide("0");


		expression283->SetRightHandSide("0");

		expression285->SetRightHandSide("100");

		expression284->SetRightHandSide("0");

		NXOpen::Expression *expression286;
		expression286 = workPart->Expressions()->CreateSystemExpressionWithUnits("p41_x=0.00000000000", unit1);

		NXOpen::Scalar *scalar115;
		scalar115 = workPart->Scalars()->CreateScalarExpression(expression286, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression287;
		expression287 = workPart->Expressions()->CreateSystemExpressionWithUnits("p42_y=0.00000000000", unit1);

		NXOpen::Scalar *scalar116;
		scalar116 = workPart->Scalars()->CreateScalarExpression(expression287, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression288;
		expression288 = workPart->Expressions()->CreateSystemExpressionWithUnits("p43_z=0.00000000000", unit1);

		NXOpen::Scalar *scalar117;
		scalar117 = workPart->Scalars()->CreateScalarExpression(expression288, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point50;
		point50 = workPart->Points()->CreatePoint(scalar115, scalar116, scalar117, NXOpen::SmartObject::UpdateOptionWithinModeling);

		expression271->SetRightHandSide("0.00000000000");

		expression272->SetRightHandSide("0.00000000000");

		expression273->SetRightHandSide("0.00000000000");

		expression274->SetRightHandSide("0.00000000000");

		expression275->SetRightHandSide("0.00000000000");

		expression276->SetRightHandSide("0.00000000000");

		expression277->SetRightHandSide("0.00000000000");


		expression279->SetRightHandSide("0.00000000000");

		expression280->SetRightHandSide("0.00000000000");



		expression285->SetRightHandSide("100.00000000000");

		//   Dialog Begin Point


		expression273->SetRightHandSide(s_v2_d.str());

		expression271->SetRightHandSide("0.00000000000");

		expression272->SetRightHandSide("0.00000000000");

		expression273->SetRightHandSide(s_v2_d.str());

		workPart->Points()->DeletePoint(point50);

		NXOpen::Expression *expression289;
		expression289 = workPart->Expressions()->CreateSystemExpressionWithUnits("p27_x=0.00000000000", unit1);

		NXOpen::Scalar *scalar118;
		scalar118 = workPart->Scalars()->CreateScalarExpression(expression289, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression290;
		expression290 = workPart->Expressions()->CreateSystemExpressionWithUnits("p28_y=0.00000000000", unit1);

		NXOpen::Scalar *scalar119;
		scalar119 = workPart->Scalars()->CreateScalarExpression(expression290, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression291;
		expression291 = workPart->Expressions()->CreateSystemExpressionWithUnits("p29_z="+ s_v2_d.str() , unit1);

		NXOpen::Scalar *scalar120;
		scalar120 = workPart->Scalars()->CreateScalarExpression(expression291, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point51;
		point51 = workPart->Points()->CreatePoint(scalar118, scalar119, scalar120, NXOpen::SmartObject::UpdateOptionWithinModeling);


		expression271->SetRightHandSide("0.00000000000");

		expression272->SetRightHandSide("0.00000000000");

		expression273->SetRightHandSide(s_v2_d.str());

		workPart->Points()->DeletePoint(point51);

		NXOpen::Expression *expression292;
		expression292 = workPart->Expressions()->CreateSystemExpressionWithUnits("p27_x=0.00000000000", unit1);

		NXOpen::Scalar *scalar121;
		scalar121 = workPart->Scalars()->CreateScalarExpression(expression292, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression293;
		expression293 = workPart->Expressions()->CreateSystemExpressionWithUnits("p28_y=0.00000000000", unit1);

		NXOpen::Scalar *scalar122;
		scalar122 = workPart->Scalars()->CreateScalarExpression(expression293, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression294;
		expression294 = workPart->Expressions()->CreateSystemExpressionWithUnits("p29_z="+ s_v2_d.str(), unit1);

		NXOpen::Scalar *scalar123;
		scalar123 = workPart->Scalars()->CreateScalarExpression(expression294, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point52;
		point52 = workPart->Points()->CreatePoint(scalar121, scalar122, scalar123, NXOpen::SmartObject::UpdateOptionWithinModeling);


		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression271);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression272);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression273);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression274);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression275);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression276);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression277);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}


		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression279);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression280);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}



		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression283);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression284);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression285);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression270);

		NXOpen::Scalar *scalar124;
		scalar124 = workPart->Scalars()->CreateScalarExpression(expression292, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Scalar *scalar125;
		scalar125 = workPart->Scalars()->CreateScalarExpression(expression293, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Scalar *scalar126;
		scalar126 = workPart->Scalars()->CreateScalarExpression(expression294, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point53;
		point53 = workPart->Points()->CreatePoint(scalar124, scalar125, scalar126, NXOpen::SmartObject::UpdateOptionWithinModeling);

		point52->RemoveParameters();

		NXOpen::Point3d coordinates11(0.0, 0.0, v2/2);
		point52->SetCoordinates(coordinates11);

		theSession->ActiveSketch()->AddGeometry(point52, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		theSession->ActiveSketch()->Update();

		workPart->Points()->DeletePoint(point53);

		workPart->Expressions()->Delete(expression269);


		NXOpen::Expression *expression295;
		expression295 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		workPart->Expressions()->Delete(expression295);

		// ----------------------------------------------
		//    插入(S)->草图曲线(S)->直线(L)...
		// ----------------------------------------------
		stringstream s_90_alpha_d, s_alpha_d,s_v5_d;
		s_90_alpha_d << 90- alpha / 2;
		s_alpha_d << alpha / 2;
		s_v5_d<< v5 / 2;

		NXOpen::Expression *expression296;
		expression296 = workPart->Expressions()->CreateSystemExpression(s_v5_d.str());

		NXOpen::Expression *expression297;
		expression297 = workPart->Expressions()->CreateSystemExpression(s_90_alpha_d.str());

		NXOpen::Point3d startPoint9(0.0, 0.0, v2/2);
		NXOpen::Point3d endPoint9(0.0, v5 / 2 *sin((alpha/2 )* DEGRA), v5 / 2 *cos((alpha / 2)*DEGRA)+v2/2);
		NXOpen::Line *line11;
		line11 = workPart->Curves()->CreateLine(startPoint9, endPoint9);

		theSession->ActiveSketch()->AddGeometry(line11, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		theSession->ActiveSketch()->Update();

		// ----------------------------------------------
		//   Dialog Begin Line
		// ----------------------------------------------

		stringstream gamma;
		gamma << 90 + alpha / 2;


		NXOpen::Expression *expression298;
		expression298 = workPart->Expressions()->CreateSystemExpression(s_v5_d.str());

		NXOpen::Expression *expression299;
		expression299 = workPart->Expressions()->CreateSystemExpression(gamma.str());

		NXOpen::Point3d startPoint10(0.0, 0.0, v2/2);
		NXOpen::Point3d endPoint10(0.0, -v5 / 2*sin(alpha/2 * DEGRA), v5 / 2*cos(alpha / 2 * DEGRA)+v2/2);
		NXOpen::Line *line12;
		line12 = workPart->Curves()->CreateLine(startPoint10, endPoint10);

		theSession->ActiveSketch()->AddGeometry(line12, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		theSession->ActiveSketch()->Update();

		// ----------------------------------------------
		//   插入(S)->草图曲线(S)->圆(C)...      arc1
		// ----------------------------------------------

		stringstream s_r1_m;

		s_r1_m << r1 * 2;

		NXOpen::Expression *expression300;
		expression300 = workPart->Expressions()->CreateSystemExpression(s_r1_m.str());

		NXOpen::NXMatrix *nXMatrix1;
		nXMatrix1 = theSession->ActiveSketch()->Orientation();

		NXOpen::Point3d center1(0.0, 0.0, 0.0);
		NXOpen::Arc *arc1;
		arc1 = workPart->Curves()->CreateArc(center1, nXMatrix1, r1, 0.0, (360.0 * DEGRA));

		theSession->ActiveSketch()->AddGeometry(arc1, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		theSession->ActiveSketch()->Update();

		// ----------------------------------------------
		//   插入(S)->草图曲线(S)->圆(C)...     arc3
		// ----------------------------------------------

		stringstream s_r2_m;
		s_r2_m << r2 * 2;

		NXOpen::Expression *expression302;
		expression302 = workPart->Expressions()->CreateSystemExpression(s_r2_m.str());

		NXOpen::NXMatrix *nXMatrix3;
		nXMatrix3 = theSession->ActiveSketch()->Orientation();

		NXOpen::Point3d center3(0.0, 0.0, 0.0);
		NXOpen::Arc *arc3;
		arc3 = workPart->Curves()->CreateArc(center3, nXMatrix3, r2, 0.0, (360.0 * DEGRA));

		theSession->ActiveSketch()->AddGeometry(arc3, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		theSession->ActiveSketch()->Update();

		// ----------------------------------------------
		//   Menu: 插入(S)->草图曲线(S)->圆角(F)...
		// ----------------------------------------------

		NXOpen::Point3d helpPoint1_1(0.0, -v5 / 2 * sin(alpha / 2 * DEGRA)/2, (v5 / 2 * cos(alpha / 2 * DEGRA) + v2 / 2)/2);
		NXOpen::Point3d helpPoint2_1(0.0, 0, r2);
		std::vector<NXOpen::Arc *> fillets1;
		std::vector<NXOpen::SketchConstraint *> constraints1;
		fillets1 = theSession->ActiveSketch()->Fillet(line12, arc3, helpPoint1_1, helpPoint2_1, r3, NXOpen::Sketch::TrimInputOptionTrue, NXOpen::Sketch::CreateDimensionOptionTrue, NXOpen::Sketch::AlternateSolutionOptionFalse, constraints1);

		theSession->ActiveSketch()->Update();



		NXOpen::Point3d helpPoint1_2(0.0, -11.722523328430162, 34.504145642412396);
		NXOpen::Point3d helpPoint2_2(0.0, 0, r1);
		std::vector<NXOpen::Arc *> fillets2;
		std::vector<NXOpen::SketchConstraint *> constraints2;
		fillets2 = theSession->ActiveSketch()->Fillet(line12, arc1, helpPoint1_2, helpPoint2_2, r3, NXOpen::Sketch::TrimInputOptionTrue, NXOpen::Sketch::CreateDimensionOptionTrue, NXOpen::Sketch::AlternateSolutionOptionFalse, constraints2);

		theSession->ActiveSketch()->Update();


		NXOpen::Point3d helpPoint1_3(0.0, 0, r1);
		NXOpen::Point3d helpPoint2_3(0.0, 11.722523328430162, 34.504145642412396);
		std::vector<NXOpen::Arc *> fillets3;
		std::vector<NXOpen::SketchConstraint *> constraints3;
		fillets3 = theSession->ActiveSketch()->Fillet(arc1, line11, helpPoint1_3, helpPoint2_3, r3, NXOpen::Sketch::TrimInputOptionTrue, NXOpen::Sketch::CreateDimensionOptionTrue, NXOpen::Sketch::AlternateSolutionOptionFalse, constraints3);

		theSession->ActiveSketch()->Update();



		NXOpen::Point3d helpPoint1_4(0.0, 37.490909896121302, 48.791109026497999);
		NXOpen::Point3d helpPoint2_4(0.0, 36.636320355205598, 61.982094437270739);
		std::vector<NXOpen::Arc *> fillets4;
		std::vector<NXOpen::SketchConstraint *> constraints4;
		fillets4 = theSession->ActiveSketch()->Fillet(line11, arc3, helpPoint1_4, helpPoint2_4, r3, NXOpen::Sketch::TrimInputOptionTrue, NXOpen::Sketch::CreateDimensionOptionTrue, NXOpen::Sketch::AlternateSolutionOptionFalse, constraints4);

		theSession->ActiveSketch()->Update();


		// ----------------------------------------------
		//    编辑(E)->草图曲线(K)...->快速修剪(Q)...
		// ----------------------------------------------

		NXOpen::SketchQuickTrimBuilder *sketchQuickTrimBuilder1;
		sketchQuickTrimBuilder1 = workPart->Sketches()->CreateQuickTrimBuilder();

		NXOpen::Point3d point55(0.0, 0, -r1);
		bool added5;
		added5 = sketchQuickTrimBuilder1->TrimmedCurves()->Add(arc1, workPart->ModelingViews()->WorkView(), point55);

		bool added6;
		added6 = sketchQuickTrimBuilder1->BoundaryObjects()->Add(fillets3[0]);

		bool added7;
		added7 = sketchQuickTrimBuilder1->BoundaryObjects()->Add(fillets2[0]);

		sketchQuickTrimBuilder1->SetExtendBound(false);

		NXOpen::NXObject *nXObject8;
		nXObject8 = sketchQuickTrimBuilder1->Commit();

		sketchQuickTrimBuilder1->SetExtendBound(true);

		sketchQuickTrimBuilder1->BoundaryObjects()->Clear();

		sketchQuickTrimBuilder1->Destroy();

		NXOpen::SketchQuickTrimBuilder *sketchQuickTrimBuilder2;
		sketchQuickTrimBuilder2 = workPart->Sketches()->CreateQuickTrimBuilder();

		sketchQuickTrimBuilder2->SetExtendBound(true);

		NXOpen::Point3d point56(0.0, 0, -r2);
		bool added8;
		added8 = sketchQuickTrimBuilder2->TrimmedCurves()->Add(arc3, workPart->ModelingViews()->WorkView(), point56);

		bool added9;
		added9 = sketchQuickTrimBuilder2->BoundaryObjects()->Add(fillets4[0]);

		bool added10;
		added10 = sketchQuickTrimBuilder2->BoundaryObjects()->Add(fillets1[0]);

		sketchQuickTrimBuilder2->SetExtendBound(false);

		NXOpen::NXObject *nXObject9;
		nXObject9 = sketchQuickTrimBuilder2->Commit();

		sketchQuickTrimBuilder2->SetExtendBound(true);

		sketchQuickTrimBuilder2->BoundaryObjects()->Clear();

		sketchQuickTrimBuilder2->Destroy();
		// ----------------------------------------------
		//  插入(S)->设计特征(E)->拉伸(X)...
		// ----------------------------------------------

		NXOpen::Features::ExtrudeBuilder *extrudeBuilder3;
		extrudeBuilder3 = workPart->Features()->CreateExtrudeBuilder(nullNXOpen_Features_Feature);

		NXOpen::Section *section4;
		section4 = workPart->Sections()->CreateSection(0.00095, 0.001, 0.050000000000000003);

		extrudeBuilder3->SetSection(section4);

		extrudeBuilder3->AllowSelfIntersectingSection(true);


		extrudeBuilder3->SetDistanceTolerance(0.001);

		extrudeBuilder3->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies6(1);
		targetBodies6[0] = nullNXOpen_Body;
		extrudeBuilder3->BooleanOperation()->SetTargetBodies(targetBodies6);

		extrudeBuilder3->Limits()->StartExtend()->Value()->SetRightHandSide("-34");

		extrudeBuilder3->Limits()->EndExtend()->Value()->SetRightHandSide("25");

		extrudeBuilder3->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeIntersect);

		std::vector<NXOpen::Body *> targetBodies7(1);
		targetBodies7[0] = body1;
		extrudeBuilder3->BooleanOperation()->SetTargetBodies(targetBodies7);

		extrudeBuilder3->Draft()->FrontDraftAngle()->SetRightHandSide("2");

		extrudeBuilder3->Draft()->BackDraftAngle()->SetRightHandSide("2");

		extrudeBuilder3->Offset()->StartOffset()->SetRightHandSide("0");

		extrudeBuilder3->Offset()->EndOffset()->SetRightHandSide("5");

		NXOpen::GeometricUtilities::SmartVolumeProfileBuilder *smartVolumeProfileBuilder4;
		smartVolumeProfileBuilder4 = extrudeBuilder3->SmartVolumeProfile();

		smartVolumeProfileBuilder4->SetOpenProfileSmartVolumeOption(false);

		smartVolumeProfileBuilder4->SetCloseProfileRule(NXOpen::GeometricUtilities::SmartVolumeProfileBuilder::CloseProfileRuleTypeFci);

		section4->SetDistanceTolerance(0.001);

		section4->SetChainingTolerance(0.00095);

		section4->SetAllowedEntityTypes(NXOpen::Section::AllowTypesOnlyCurves);


		std::vector<NXOpen::ICurve *> curves4(8);
		curves4[0] = line11;
		curves4[1] = arc1;

		curves4[2] = line12;
		curves4[3] = fillets3[0];
		curves4[4] = arc3;
		curves4[5] = fillets1[0];

		curves4[6] = fillets2[0];
		curves4[7] = fillets4[0];




		//NXOpen::Point3d seedPoint4(0.0, 38.225370723877418, 55.461867085637749);
		//NXOpen::RegionBoundaryRule *regionBoundaryRule4;

		CurveFeatureRule *curveFeatureRule4;
		std::vector<Features::Feature *> Rulefeaturesss(1);

		Rulefeaturesss[0] = theSession->ActiveSketch()->Feature();
		curveFeatureRule4 = workPart->ScRuleFactory()->CreateRuleCurveFeature(Rulefeaturesss);



		//regionBoundaryRule4 = workPart->ScRuleFactory()->CreateRuleRegionBoundary(theSession->ActiveSketch(), curves4, seedPoint4, 0.001);

		section4->AllowSelfIntersection(true);

		std::vector<NXOpen::SelectionIntentRule *> rules4(1);

		rules4[0] = curveFeatureRule4;
		//rules4[0] = regionBoundaryRule4;
		NXOpen::Point3d helpPoint4(0.0, 0.0, 0.0);
		section4->AddToSection(rules4, nullNXOpen_NXObject, nullNXOpen_NXObject, nullNXOpen_NXObject, helpPoint4, NXOpen::Section::ModeCreate, false);










		NXOpen::Direction *direction5;
		direction5 = workPart->Directions()->CreateDirection(theSession->ActiveSketch(), NXOpen::SenseForward, NXOpen::SmartObject::UpdateOptionWithinModeling);

		extrudeBuilder3->SetDirection(direction5);

		NXOpen::Expression *expression307;
		expression307 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		extrudeBuilder3->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeSubtract);

		std::vector<NXOpen::Body *> targetBodies8(1);
		targetBodies8[0] = body1;
		extrudeBuilder3->BooleanOperation()->SetTargetBodies(targetBodies8);


		extrudeBuilder3->SetParentFeatureInternal(false);


		NXOpen::Features::Feature *feature6;
		feature6 = extrudeBuilder3->CommitFeature();

		NXOpen::Expression *expression308(extrudeBuilder3->Limits()->StartExtend()->Value());
		NXOpen::Expression *expression309(extrudeBuilder3->Limits()->EndExtend()->Value());
		extrudeBuilder3->Destroy();


		workPart->Expressions()->Delete(expression307);

		// ----------------------------------------------
		//    插入(S)->关联复制(A)->阵列特征(A)...
		// ----------------------------------------------

		NXOpen::Features::PatternFeatureBuilder *patternFeatureBuilder1;
		patternFeatureBuilder1 = workPart->Features()->CreatePatternFeatureBuilder(nullNXOpen_Features_Feature);

		NXOpen::Expression *expression310;
		expression310 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression311;
		expression311 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin12(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal6(0.0, 0.0, 1.0);
		NXOpen::Plane *plane6;
		plane6 = workPart->Planes()->CreatePlane(origin12, normal6, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder1->PatternService()->MirrorDefinition()->SetNewPlane(plane6);

		NXOpen::Expression *expression312;
		expression312 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression313;
		expression313 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression314;
		expression314 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		patternFeatureBuilder1->PatternService()->SetPatternType(NXOpen::GeometricUtilities::PatternDefinition::PatternEnumCircular);

		patternFeatureBuilder1->PatternService()->PatternFill()->FillMargin()->SetRightHandSide("0");

		patternFeatureBuilder1->PatternService()->PatternOrientation()->SetCircularOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder1->PatternService()->PatternOrientation()->SetAlongOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumNormalToPath);

		patternFeatureBuilder1->PatternService()->PatternOrientation()->SetPolygonOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder1->PatternService()->PatternOrientation()->SetSpiralOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder1->PatternService()->PatternOrientation()->SetMirrorOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder1->PatternService()->PatternOrientation()->SetHelixOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder1->PatternService()->PatternOrientation()->AlongPathRotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->XSpacing()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->XSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->XSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->YSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->YSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->YSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->RectangularDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->SetSpaceType(NXOpen::GeometricUtilities::PatternSpacing::SpacingTypeSpan);

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->NCopies()->SetRightHandSide("3");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->PitchAngle()->SetRightHandSide("360");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->SpanAngle()->SetRightHandSide("360");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->CircularDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->SetXPathOption(NXOpen::GeometricUtilities::AlongPathPattern::PathOptionsOffset);

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->XOnPathSpacing()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->XOnPathSpacing()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->XOnPathSpacing()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->SetYDirectionOption(NXOpen::GeometricUtilities::AlongPathPattern::YDirectionOptionsSection);

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->SetYPathOption(NXOpen::GeometricUtilities::AlongPathPattern::PathOptionsOffset);

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YOnPathSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YOnPathSpacing()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YOnPathSpacing()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->AlongPathDefinition()->YSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->NumberOfTurns()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->TotalAngle()->SetRightHandSide("360");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->RadialPitch()->SetRightHandSide("50");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->PitchAlongSpiral()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->PitchAlongSpiral()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->PitchAlongSpiral()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->SpiralDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->PolygonSpacing()->NCopies()->SetRightHandSide("4");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->PolygonSpacing()->PitchDistance()->SetRightHandSide("25");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->PolygonSpacing()->SpanAngle()->SetRightHandSide("360");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->NumberOfSides()->SetRightHandSide("6");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->RadialSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->RadialSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->RadialSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder1->PatternService()->PolygonDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder1->PatternService()->HelixDefinition()->CountOfInstances()->SetRightHandSide("6");

		patternFeatureBuilder1->PatternService()->HelixDefinition()->NumberOfTurns()->SetRightHandSide("2");

		patternFeatureBuilder1->PatternService()->HelixDefinition()->AnglePitch()->SetRightHandSide("30");

		patternFeatureBuilder1->PatternService()->HelixDefinition()->DistancePitch()->SetRightHandSide("10");

		patternFeatureBuilder1->PatternService()->HelixDefinition()->HelixPitch()->SetRightHandSide("50");

		patternFeatureBuilder1->PatternService()->HelixDefinition()->HelixSpan()->SetRightHandSide("100");

		patternFeatureBuilder1->SetPatternMethod(NXOpen::Features::PatternFeatureBuilder::PatternMethodOptionsVariational);

		NXOpen::Point3d origin13(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector3(1.0, 0.0, 0.0);
		NXOpen::Direction *direction6;
		direction6 = workPart->Directions()->CreateDirection(origin13, vector3, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder1->PatternService()->CircularDefinition()->HorizontalRef()->SetHorizontalRefVector(direction6);

		NXOpen::Expression *expression315;
		expression315 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		std::vector<NXOpen::Features::Feature *> objects16(1);
		NXOpen::Features::Extrude *extrude1(dynamic_cast<NXOpen::Features::Extrude *>(feature6));
		objects16[0] = extrude1;
		bool added17;
		added17 = patternFeatureBuilder1->FeatureList()->Add(objects16);

		// 参考点 (39.275865, 20.259289, -5.500127) 从选定特征自动判断。
		NXOpen::Point3d coordinates12(5.5000000000000133, 4.8767635477113904, 53.168118845901716);
		NXOpen::Point *point59;
		point59 = workPart->Points()->CreatePoint(coordinates12);

		patternFeatureBuilder1->ReferencePointService()->SetPoint(point59);

		NXOpen::Expression *expression316;
		expression316 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin14(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector4(1.0, 0.0, 0.0);
		NXOpen::Direction *direction7;
		direction7 = workPart->Directions()->CreateDirection(origin14, vector4, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Axis *axis2;
		axis2 = workPart->Axes()->CreateAxis(nullNXOpen_Point, direction7, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder1->PatternService()->CircularDefinition()->SetRotationAxis(axis2);

		NXOpen::Expression *expression317;
		expression317 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);




		NXOpen::Point3d origin15(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector5(1.0, 0.0, 0.0);
		NXOpen::Direction *direction8;
		direction8 = workPart->Directions()->CreateDirection(origin15, vector5, NXOpen::SmartObject::UpdateOptionWithinModeling);

		axis2->SetDirection(direction8);

		NXOpen::Point *point60;
		point60 = workPart->Points()->CreatePoint(arc3, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::NXObject *nXObject12;
		NXOpen::Xform *xform3;
		xform3 = workPart->Xforms()->CreateExtractXform(arc3, NXOpen::SmartObject::UpdateOptionWithinModeling, false, &nXObject12);

		NXOpen::Arc *arc5(dynamic_cast<NXOpen::Arc *>(nXObject12));
		NXOpen::Point *point61;
		point61 = workPart->Points()->CreatePoint(arc5, NXOpen::SmartObject::UpdateOptionWithinModeling);

		point61->RemoveViewDependency();

		point61->RemoveViewDependency();

		NXOpen::Point *point62;
		point62 = axis2->Point();

		axis2->SetPoint(point61);


		patternFeatureBuilder1->SetParentFeatureInternal(false);

		NXOpen::NXObject *nXObject13;
		nXObject13 = patternFeatureBuilder1->Commit();

		NXOpen::Expression *expression318(patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->NCopies());
		NXOpen::Expression *expression319(patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->SpanDistance());
		NXOpen::Expression *expression320(patternFeatureBuilder1->PatternService()->CircularDefinition()->RadialSpacing()->PitchDistance());
		NXOpen::Expression *expression321(patternFeatureBuilder1->PatternService()->CircularDefinition()->HorizontalRef()->RotationAngle());
		NXOpen::Expression *expression322(patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->NCopies());
		NXOpen::Expression *expression323(patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->SpanAngle());
		NXOpen::Expression *expression324(patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->PitchDistance());
		NXOpen::Expression *expression325(patternFeatureBuilder1->PatternService()->CircularDefinition()->AngularSpacing()->PitchAngle());
		patternFeatureBuilder1->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression313);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression317);

		workPart->Expressions()->Delete(expression310);

		workPart->Expressions()->Delete(expression311);

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression312);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression314);

		workPart->Expressions()->Delete(expression316);

		workPart->Expressions()->Delete(expression315);


		// ----------------------------------------------
		//  插入(S)->草图(H)...
		// ----------------------------------------------

		NXOpen::SketchInPlaceBuilder *sketchInPlaceBuilder4;
		sketchInPlaceBuilder4 = workPart->Sketches()->CreateSketchInPlaceBuilder2(nullNXOpen_Sketch);

		NXOpen::Point3d origin16(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal7(0.0, 0.0, 1.0);
		NXOpen::Plane *plane7;
		plane7 = workPart->Planes()->CreatePlane(origin16, normal7, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder4->SetPlaneReference(plane7);

		NXOpen::Expression *expression326;
		expression326 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression327;
		expression327 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::SketchAlongPathBuilder *sketchAlongPathBuilder4;
		sketchAlongPathBuilder4 = workPart->Sketches()->CreateSketchAlongPathBuilder(nullNXOpen_Sketch);

		sketchAlongPathBuilder4->PlaneLocation()->Expression()->SetRightHandSide("0");

		NXOpen::Direction *direction9;
		direction9 = workPart->Directions()->CreateDirection(datumAxis1, NXOpen::SenseForward, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Xform *xform4;
		xform4 = workPart->Xforms()->CreateXformByPlaneXDirPoint(datumPlane1, direction9, point47, NXOpen::SmartObject::UpdateOptionWithinModeling, 0.625, false, false);

		NXOpen::CartesianCoordinateSystem *cartesianCoordinateSystem2;
		cartesianCoordinateSystem2 = workPart->CoordinateSystems()->CreateCoordinateSystem(xform4, NXOpen::SmartObject::UpdateOptionWithinModeling);

		sketchInPlaceBuilder4->SetCsystem(cartesianCoordinateSystem2);

		NXOpen::Point3d origin17(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal8(0.0, 0.0, 1.0);
		NXOpen::Plane *plane8;
		plane8 = workPart->Planes()->CreatePlane(origin17, normal8, NXOpen::SmartObject::UpdateOptionWithinModeling);

		plane8->SetMethod(NXOpen::PlaneTypes::MethodTypeCoincident);

		std::vector<NXOpen::NXObject *> geom11(1);
		geom11[0] = datumPlane1;
		plane8->SetGeometry(geom11);

		plane8->SetFlip(false);

		plane8->SetExpression(NULL);

		plane8->SetAlternate(NXOpen::PlaneTypes::AlternateTypeOne);

		plane8->Evaluate();

		NXOpen::Point3d origin18(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal9(0.0, 0.0, 1.0);
		NXOpen::Plane *plane9;
		plane9 = workPart->Planes()->CreatePlane(origin18, normal9, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Expression *expression328;
		expression328 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression329;
		expression329 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		plane9->SynchronizeToPlane(plane8);

		plane9->SetMethod(NXOpen::PlaneTypes::MethodTypeCoincident);

		std::vector<NXOpen::NXObject *> geom12(1);
		geom12[0] = datumPlane1;
		plane9->SetGeometry(geom12);

		plane9->SetAlternate(NXOpen::PlaneTypes::AlternateTypeOne);

		plane9->Evaluate();


		theSession->Preferences()->Sketch()->SetCreateInferredConstraints(true);

		theSession->Preferences()->Sketch()->SetContinuousAutoDimensioning(true);

		theSession->Preferences()->Sketch()->SetDimensionLabel(NXOpen::Preferences::SketchPreferences::DimensionLabelTypeExpression);

		theSession->Preferences()->Sketch()->SetTextSizeFixed(true);

		theSession->Preferences()->Sketch()->SetFixedTextSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayParenthesesOnReferenceDimensions(true);

		theSession->Preferences()->Sketch()->SetDisplayReferenceGeometry(false);

		theSession->Preferences()->Sketch()->SetConstraintSymbolSize(3.0);

		theSession->Preferences()->Sketch()->SetDisplayObjectColor(false);

		theSession->Preferences()->Sketch()->SetDisplayObjectName(true);

		NXOpen::NXObject *nXObject14;
		nXObject14 = sketchInPlaceBuilder4->Commit();

		NXOpen::Sketch *sketch5(dynamic_cast<NXOpen::Sketch *>(nXObject14));
		NXOpen::Features::Feature *feature7;
		feature7 = sketch5->Feature();


		sketch5->Activate(NXOpen::Sketch::ViewReorientTrue);

		sketchInPlaceBuilder4->Destroy();

		sketchAlongPathBuilder4->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression327);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression326);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane7->DestroyPlane();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression329);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression328);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		plane9->DestroyPlane();

		// ----------------------------------------------
		//  插入(S)->草图曲线(S)->圆(C)...
		// ----------------------------------------------

		stringstream s_d2;
		s_d2 << d2;

		NXOpen::Expression *expression330;
		expression330 = workPart->Expressions()->CreateSystemExpression(s_d2.str());

		NXOpen::NXMatrix *nXMatrix5;
		nXMatrix5 = theSession->ActiveSketch()->Orientation();

		NXOpen::Point3d center5(0.0, 0.0, 0.0);
		NXOpen::Arc *arc6;
		arc6 = workPart->Curves()->CreateArc(center5, nXMatrix5, d2/2, 0.0, (360.0 * DEGRA));

		theSession->ActiveSketch()->AddGeometry(arc6, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_24;
		geom1_24.Geometry = arc6;
		geom1_24.PointType = NXOpen::Sketch::ConstraintPointTypeArcCenter;
		geom1_24.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_24;
		NXOpen::Features::DatumCsys *datumCsys3(dynamic_cast<NXOpen::Features::DatumCsys *>(workPart->Features()->FindObject("SKETCH(9:1B)")));
		NXOpen::Point *point63(dynamic_cast<NXOpen::Point *>(datumCsys3->FindObject("POINT 1")));
		geom2_24.Geometry = point63;
		geom2_24.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		geom2_24.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint31;
		sketchGeometricConstraint31 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_24, geom2_24);

		NXOpen::Sketch::DimensionGeometry dimObject1_9;
		dimObject1_9.Geometry = arc6;
		dimObject1_9.AssocType = NXOpen::Sketch::AssocTypeNone;
		dimObject1_9.AssocValue = 0;
		dimObject1_9.HelpPoint.X = 0.0;
		dimObject1_9.HelpPoint.Y = 0.0;
		dimObject1_9.HelpPoint.Z = 0.0;
		dimObject1_9.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin9(0.0, 0.0, 4.2191829511410468);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint9;
		sketchDimensionalConstraint9 = theSession->ActiveSketch()->CreateDiameterDimension(dimObject1_9, dimOrigin9, expression330, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::Annotations::Dimension *dimension9;
		dimension9 = sketchDimensionalConstraint9->AssociatedDimension();

		theSession->ActiveSketch()->Update();

		// ----------------------------------------------
		//   插入(S)->草图曲线(S)->直线(L)...
		// ----------------------------------------------

		stringstream s_beta;
		s_beta << beta;

		NXOpen::Expression *expression331;
		expression331 = workPart->Expressions()->CreateSystemExpression(s_v5_d.str());

		NXOpen::Expression *expression332;
		expression332 = workPart->Expressions()->CreateSystemExpression(s_beta.str());

		NXOpen::Point3d startPoint11(0.0, 0.0, 0.0);
		NXOpen::Point3d endPoint11(0.0, v5 / 2 * cos(beta*DEGRA), v5/2*sin(beta*DEGRA));
		NXOpen::Line *line13;
		line13 = workPart->Curves()->CreateLine(startPoint11, endPoint11);

		theSession->ActiveSketch()->AddGeometry(line13, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry geom1_25;
		geom1_25.Geometry = line13;
		geom1_25.PointType = NXOpen::Sketch::ConstraintPointTypeStartVertex;
		geom1_25.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry geom2_25;
		geom2_25.Geometry = arc6;
		geom2_25.PointType = NXOpen::Sketch::ConstraintPointTypeArcCenter;
		geom2_25.SplineDefiningPointIndex = 0;
		NXOpen::SketchGeometricConstraint *sketchGeometricConstraint32;
		sketchGeometricConstraint32 = theSession->ActiveSketch()->CreateCoincidentConstraint(geom1_25, geom2_25);

		NXOpen::Sketch::DimensionGeometry dimObject1_10;
		dimObject1_10.Geometry = line13;
		dimObject1_10.AssocType = NXOpen::Sketch::AssocTypeStartPoint;
		dimObject1_10.AssocValue = 0;
		dimObject1_10.HelpPoint.X = 0.0;
		dimObject1_10.HelpPoint.Y = 0.0;
		dimObject1_10.HelpPoint.Z = 0.0;
		dimObject1_10.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_5;
		dimObject2_5.Geometry = line13;
		dimObject2_5.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_5.AssocValue = 0;
		dimObject2_5.HelpPoint.X = 0.0;
		dimObject2_5.HelpPoint.Y = 0.0;
		dimObject2_5.HelpPoint.Z = 0.0;
		dimObject2_5.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin10(0.0, 58.290298653777896, 19.038241143292943);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint10;
		sketchDimensionalConstraint10 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeParallelDim, dimObject1_10, dimObject2_5, dimOrigin10, expression331, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::SketchHelpedDimensionalConstraint *sketchHelpedDimensionalConstraint3(dynamic_cast<NXOpen::SketchHelpedDimensionalConstraint *>(sketchDimensionalConstraint10));
		NXOpen::Annotations::Dimension *dimension10;
		dimension10 = sketchHelpedDimensionalConstraint3->AssociatedDimension();

		NXOpen::Sketch::DimensionGeometry dimObject1_11;
		NXOpen::DatumAxis *datumAxis3(dynamic_cast<NXOpen::DatumAxis *>(workPart->Datums()->FindObject("SKETCH(9:1B) X axis")));
		dimObject1_11.Geometry = datumAxis3;
		dimObject1_11.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject1_11.AssocValue = 0;
		dimObject1_11.HelpPoint.X = 0.0;
		dimObject1_11.HelpPoint.Y = 28.574999999999999;
		dimObject1_11.HelpPoint.Z = 0.0;
		dimObject1_11.View = nullNXOpen_NXObject;
		NXOpen::Sketch::DimensionGeometry dimObject2_6;
		dimObject2_6.Geometry = line13;
		dimObject2_6.AssocType = NXOpen::Sketch::AssocTypeEndPoint;
		dimObject2_6.AssocValue = 0;
		dimObject2_6.HelpPoint.X = 0.0;
		dimObject2_6.HelpPoint.Y = 103.92304845413265;
		dimObject2_6.HelpPoint.Z = 59.999999999999957;
		dimObject2_6.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin11(0.0, 50.461524227066327, 32.598076211353295);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint11;
		sketchDimensionalConstraint11 = theSession->ActiveSketch()->CreateDimension(NXOpen::Sketch::ConstraintTypeAngularDim, dimObject1_11, dimObject2_6, dimOrigin11, expression332, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::Annotations::Dimension *dimension11;
		dimension11 = sketchDimensionalConstraint11->AssociatedDimension();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(false);

		theSession->ActiveSketch()->Update();

		theSession->Preferences()->Sketch()->SetAutoDimensionsToArcCenter(true);

		//   Dialog Begin Line
		//   插入(S)->草图曲线(S)->圆(C)...

		stringstream s_d1;
		s_d1 << d1;

		NXOpen::Expression *expression333;
		expression333 = workPart->Expressions()->CreateSystemExpression(s_d1.str());

		NXOpen::NXMatrix *nXMatrix6;
		nXMatrix6 = theSession->ActiveSketch()->Orientation();

		NXOpen::Point3d center6(0.0, d2/2*cos(beta*DEGRA), d2 / 2 * sin(beta*DEGRA));
		NXOpen::Arc *arc7;
		arc7 = workPart->Curves()->CreateArc(center6, nXMatrix6, d1/2, 0.0, (360.0 * DEGRA));

		theSession->ActiveSketch()->AddGeometry(arc7, NXOpen::Sketch::InferConstraintsOptionInferNoConstraints);

		NXOpen::Sketch::ConstraintGeometry conGeom1_1;
		conGeom1_1.Geometry = arc7;
		conGeom1_1.PointType = NXOpen::Sketch::ConstraintPointTypeArcCenter;
		conGeom1_1.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometry conGeom2_1;
		conGeom2_1.Geometry = arc6;
		conGeom2_1.PointType = NXOpen::Sketch::ConstraintPointTypeNone;
		conGeom2_1.SplineDefiningPointIndex = 0;
		NXOpen::Sketch::ConstraintGeometryHelp help1;
		help1.Type = NXOpen::Sketch::ConstraintGeometryHelpTypePoint;
		help1.Point.X = 0.0;
		help1.Point.Y = 40.988897429615264;
		help1.Point.Z = 24.003339090728176;
		help1.Parameter = 0.0;
		NXOpen::SketchHelpedGeometricConstraint *sketchHelpedGeometricConstraint1;
		sketchHelpedGeometricConstraint1 = theSession->ActiveSketch()->CreatePointOnCurveConstraint(conGeom1_1, conGeom2_1, help1);

		NXOpen::Sketch::DimensionGeometry dimObject1_12;
		dimObject1_12.Geometry = arc7;
		dimObject1_12.AssocType = NXOpen::Sketch::AssocTypeNone;
		dimObject1_12.AssocValue = 0;
		dimObject1_12.HelpPoint.X = 0.0;
		dimObject1_12.HelpPoint.Y = 0.0;
		dimObject1_12.HelpPoint.Z = 0.0;
		dimObject1_12.View = nullNXOpen_NXObject;
		NXOpen::Point3d dimOrigin12(0.0, 40.988897429615264, 28.222522041869222);
		NXOpen::SketchDimensionalConstraint *sketchDimensionalConstraint12;
		sketchDimensionalConstraint12 = theSession->ActiveSketch()->CreateDiameterDimension(dimObject1_12, dimOrigin12, expression333, NXOpen::Sketch::DimensionOptionCreateAsDriving);

		NXOpen::Annotations::Dimension *dimension12;
		dimension12 = sketchDimensionalConstraint12->AssociatedDimension();

		theSession->ActiveSketch()->Update();

		//   转换为参考


		NXOpen::ConvertToFromReferenceBuilder *convertToFromReferenceBuilder1;
		convertToFromReferenceBuilder1 = workPart->Sketches()->CreateConvertToFromReferenceBuilder();

		NXOpen::SelectNXObjectList *selectNXObjectList1;
		selectNXObjectList1 = convertToFromReferenceBuilder1->InputObjects();

		bool added18;
		added18 = selectNXObjectList1->Add(arc6);

		convertToFromReferenceBuilder1->SetOutputState(NXOpen::ConvertToFromReferenceBuilder::OutputTypeReference);

		NXOpen::NXObject *nXObject15;
		nXObject15 = convertToFromReferenceBuilder1->Commit();

		convertToFromReferenceBuilder1->Destroy();

		//    转换为参考


		NXOpen::ConvertToFromReferenceBuilder *convertToFromReferenceBuilder2;
		convertToFromReferenceBuilder2 = workPart->Sketches()->CreateConvertToFromReferenceBuilder();

		NXOpen::SelectNXObjectList *selectNXObjectList2;
		selectNXObjectList2 = convertToFromReferenceBuilder2->InputObjects();

		bool added19;
		added19 = selectNXObjectList2->Add(line13);

		convertToFromReferenceBuilder2->SetOutputState(NXOpen::ConvertToFromReferenceBuilder::OutputTypeReference);

		NXOpen::NXObject *nXObject16;
		nXObject16 = convertToFromReferenceBuilder2->Commit();

		convertToFromReferenceBuilder2->Destroy();

		// ----------------------------------------------
		//   插入(S)->设计特征(E)->拉伸(X)...
		// ----------------------------------------------

		NXOpen::Features::ExtrudeBuilder *extrudeBuilder4;
		extrudeBuilder4 = workPart->Features()->CreateExtrudeBuilder(nullNXOpen_Features_Feature);

		NXOpen::Section *section5;
		section5 = workPart->Sections()->CreateSection(0.00095, 0.001, 0.050000000000000003);

		extrudeBuilder4->SetSection(section5);

		extrudeBuilder4->AllowSelfIntersectingSection(true);



		extrudeBuilder4->SetDistanceTolerance(0.001);

		extrudeBuilder4->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies9(1);
		targetBodies9[0] = nullNXOpen_Body;
		extrudeBuilder4->BooleanOperation()->SetTargetBodies(targetBodies9);

		extrudeBuilder4->Limits()->StartExtend()->Value()->SetRightHandSide("-34");

		extrudeBuilder4->Limits()->EndExtend()->Value()->SetRightHandSide("25");

		extrudeBuilder4->BooleanOperation()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeSubtract);

		std::vector<NXOpen::Body *> targetBodies10(1);
		targetBodies10[0] = body1;
		extrudeBuilder4->BooleanOperation()->SetTargetBodies(targetBodies10);

		extrudeBuilder4->Draft()->FrontDraftAngle()->SetRightHandSide("2");

		extrudeBuilder4->Draft()->BackDraftAngle()->SetRightHandSide("2");

		extrudeBuilder4->Offset()->StartOffset()->SetRightHandSide("0");

		extrudeBuilder4->Offset()->EndOffset()->SetRightHandSide("5");

		NXOpen::GeometricUtilities::SmartVolumeProfileBuilder *smartVolumeProfileBuilder5;
		smartVolumeProfileBuilder5 = extrudeBuilder4->SmartVolumeProfile();

		smartVolumeProfileBuilder5->SetOpenProfileSmartVolumeOption(false);

		smartVolumeProfileBuilder5->SetCloseProfileRule(NXOpen::GeometricUtilities::SmartVolumeProfileBuilder::CloseProfileRuleTypeFci);

		section5->SetDistanceTolerance(0.001);

		section5->SetChainingTolerance(0.00095);

		section5->SetAllowedEntityTypes(NXOpen::Section::AllowTypesOnlyCurves);

		std::vector<NXOpen::ICurve *> curves5(1);
		curves5[0] = arc7;
		NXOpen::Point3d seedPoint5(0.0, 45.98889742961525, 24.003339090728172);
		NXOpen::RegionBoundaryRule *regionBoundaryRule5;
		regionBoundaryRule5 = workPart->ScRuleFactory()->CreateRuleRegionBoundary(theSession->ActiveSketch(), curves5, seedPoint5, 0.001);

		section5->AllowSelfIntersection(true);

		std::vector<NXOpen::SelectionIntentRule *> rules5(1);
		rules5[0] = regionBoundaryRule5;
		NXOpen::Point3d helpPoint5(0.0, 0.0, 0.0);
		section5->AddToSection(rules5, nullNXOpen_NXObject, nullNXOpen_NXObject, nullNXOpen_NXObject, helpPoint5, NXOpen::Section::ModeCreate, false);

		NXOpen::Direction *direction10;
		direction10 = workPart->Directions()->CreateDirection(theSession->ActiveSketch(), NXOpen::SenseForward, NXOpen::SmartObject::UpdateOptionWithinModeling);

		extrudeBuilder4->SetDirection(direction10);

		NXOpen::Expression *expression335;
		expression335 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);



		extrudeBuilder4->SetParentFeatureInternal(false);


		NXOpen::Features::Feature *feature8;
		feature8 = extrudeBuilder4->CommitFeature();

		NXOpen::Expression *expression336(extrudeBuilder4->Limits()->StartExtend()->Value());
		NXOpen::Expression *expression337(extrudeBuilder4->Limits()->EndExtend()->Value());
		extrudeBuilder4->Destroy();


		workPart->Expressions()->Delete(expression335);

		// ----------------------------------------------
		//  插入(S)->关联复制(A)->阵列特征(A)...
		// ----------------------------------------------

		NXOpen::Features::PatternFeatureBuilder *patternFeatureBuilder2;
		patternFeatureBuilder2 = workPart->Features()->CreatePatternFeatureBuilder(nullNXOpen_Features_Feature);

		NXOpen::Expression *expression338;
		expression338 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression339;
		expression339 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin19(0.0, 0.0, 0.0);
		NXOpen::Vector3d normal10(0.0, 0.0, 1.0);
		NXOpen::Plane *plane10;
		plane10 = workPart->Planes()->CreatePlane(origin19, normal10, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder2->PatternService()->MirrorDefinition()->SetNewPlane(plane10);

		NXOpen::Expression *expression340;
		expression340 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression341;
		expression341 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Expression *expression342;
		expression342 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		patternFeatureBuilder2->PatternService()->SetPatternType(NXOpen::GeometricUtilities::PatternDefinition::PatternEnumCircular);

		patternFeatureBuilder2->PatternService()->PatternFill()->FillMargin()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetCircularOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetAlongOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumNormalToPath);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetPolygonOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetSpiralOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetMirrorOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->SetHelixOrientationOption(NXOpen::GeometricUtilities::PatternOrientation::EnumFollowPattern);

		patternFeatureBuilder2->PatternService()->PatternOrientation()->AlongPathRotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->XSpacing()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->XSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->XSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->YSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->YSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->YSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->RectangularDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->SetSpaceType(NXOpen::GeometricUtilities::PatternSpacing::SpacingTypeSpan);

		patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->NCopies()->SetRightHandSide("3");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->PitchAngle()->SetRightHandSide("360");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->SpanAngle()->SetRightHandSide("360");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->RadialSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->RadialSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->RadialSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->CircularDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->SetXPathOption(NXOpen::GeometricUtilities::AlongPathPattern::PathOptionsOffset);

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->XOnPathSpacing()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->XOnPathSpacing()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->XOnPathSpacing()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->SetYDirectionOption(NXOpen::GeometricUtilities::AlongPathPattern::YDirectionOptionsSection);

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->SetYPathOption(NXOpen::GeometricUtilities::AlongPathPattern::PathOptionsOffset);

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YOnPathSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YOnPathSpacing()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YOnPathSpacing()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->AlongPathDefinition()->YSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->NumberOfTurns()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->TotalAngle()->SetRightHandSide("360");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->RadialPitch()->SetRightHandSide("50");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->PitchAlongSpiral()->NCopies()->SetRightHandSide("2");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->PitchAlongSpiral()->OnPathPitchDistance()->Expression()->SetRightHandSide("50");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->PitchAlongSpiral()->OnPathSpanDistance()->Expression()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->SpiralDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->PolygonSpacing()->NCopies()->SetRightHandSide("4");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->PolygonSpacing()->PitchDistance()->SetRightHandSide("25");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->PolygonSpacing()->SpanAngle()->SetRightHandSide("360");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->NumberOfSides()->SetRightHandSide("6");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->RadialSpacing()->NCopies()->SetRightHandSide("1");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->RadialSpacing()->PitchDistance()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->RadialSpacing()->SpanDistance()->SetRightHandSide("100");

		patternFeatureBuilder2->PatternService()->PolygonDefinition()->HorizontalRef()->RotationAngle()->SetRightHandSide("0");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->CountOfInstances()->SetRightHandSide("6");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->NumberOfTurns()->SetRightHandSide("2");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->AnglePitch()->SetRightHandSide("30");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->DistancePitch()->SetRightHandSide("10");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->HelixPitch()->SetRightHandSide("50");

		patternFeatureBuilder2->PatternService()->HelixDefinition()->HelixSpan()->SetRightHandSide("100");

		patternFeatureBuilder2->SetPatternMethod(NXOpen::Features::PatternFeatureBuilder::PatternMethodOptionsVariational);

		NXOpen::Point3d origin20(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector6(1.0, 0.0, 0.0);
		NXOpen::Direction *direction11;
		direction11 = workPart->Directions()->CreateDirection(origin20, vector6, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder2->PatternService()->CircularDefinition()->HorizontalRef()->SetHorizontalRefVector(direction11);

		NXOpen::Expression *expression343;
		expression343 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);


		std::vector<NXOpen::Features::Feature *> objects17(1);
		NXOpen::Features::Extrude *extrude2(dynamic_cast<NXOpen::Features::Extrude *>(feature8));
		objects17[0] = extrude2;
		bool added20;
		added20 = patternFeatureBuilder2->FeatureList()->Add(objects17);

		// 参考点 (39.275865, 20.259289, -5.500127) 从选定特征自动判断。
		NXOpen::Point3d coordinates13(5.5000000000000053, 40.988897429615257, 24.003339090728172);
		NXOpen::Point *point64;
		point64 = workPart->Points()->CreatePoint(coordinates13);

		patternFeatureBuilder2->ReferencePointService()->SetPoint(point64);

		NXOpen::Expression *expression344;
		expression344 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point3d origin21(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector7(1.0, 0.0, 0.0);
		NXOpen::Direction *direction12;
		direction12 = workPart->Directions()->CreateDirection(origin21, vector7, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Axis *axis3;
		axis3 = workPart->Axes()->CreateAxis(nullNXOpen_Point, direction12, NXOpen::SmartObject::UpdateOptionWithinModeling);

		patternFeatureBuilder2->PatternService()->CircularDefinition()->SetRotationAxis(axis3);

		NXOpen::Expression *expression345;
		expression345 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		NXOpen::Point *point65;
		point65 = workPart->Points()->CreatePoint(point47, nullNXOpen_Xform, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::NXObject *nXObject17;
		NXOpen::Xform *xform5;
		xform5 = workPart->Xforms()->CreateExtractXform(point47, NXOpen::SmartObject::UpdateOptionWithinModeling, false, &nXObject17);

		NXOpen::Point *point66(dynamic_cast<NXOpen::Point *>(nXObject17));
		NXOpen::Point *point67;
		point67 = workPart->Points()->CreatePoint(point66, nullNXOpen_Xform, NXOpen::SmartObject::UpdateOptionWithinModeling);

		NXOpen::Point *point68;
		point68 = axis3->Point();

		axis3->SetPoint(point67);


		patternFeatureBuilder2->SetParentFeatureInternal(false);

		NXOpen::NXObject *nXObject18;
		nXObject18 = patternFeatureBuilder2->Commit();

		NXOpen::Expression *expression346(patternFeatureBuilder2->PatternService()->CircularDefinition()->RadialSpacing()->NCopies());
		NXOpen::Expression *expression347(patternFeatureBuilder2->PatternService()->CircularDefinition()->RadialSpacing()->SpanDistance());
		NXOpen::Expression *expression348(patternFeatureBuilder2->PatternService()->CircularDefinition()->RadialSpacing()->PitchDistance());
		NXOpen::Expression *expression349(patternFeatureBuilder2->PatternService()->CircularDefinition()->HorizontalRef()->RotationAngle());
		NXOpen::Expression *expression350(patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->NCopies());
		NXOpen::Expression *expression351(patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->SpanAngle());
		NXOpen::Expression *expression352(patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->PitchDistance());
		NXOpen::Expression *expression353(patternFeatureBuilder2->PatternService()->CircularDefinition()->AngularSpacing()->PitchAngle());
		patternFeatureBuilder2->Destroy();

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression341);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression345);

		workPart->Expressions()->Delete(expression338);

		workPart->Expressions()->Delete(expression339);

		try
		{
			// 表达式仍然在使用中。
			workPart->Expressions()->Delete(expression340);
		}
		catch (const NXOpen::NXException &ex)
		{
			ex.AssertErrorCode(1050029);
		}

		workPart->Expressions()->Delete(expression342);

		workPart->Expressions()->Delete(expression344);

		workPart->Expressions()->Delete(expression343);





    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        cycloidgear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int cycloidgear::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == integer_zc)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_e)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_rp)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_rrp)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_r1)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_r2)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_r3)
        {

        //---------Enter your code here-----------
        }
        else if(block == double_d1)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_d2)
        {
        //---------Enter your code here-----------
        }
        else if(block == integer_alpha)
        {
        //---------Enter your code here-----------
        }
        else if(block == integer_beta)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_v1)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_v2)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_v3)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_v4)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_v5)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_h1)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_h2)
        {
        //---------Enter your code here-----------
        }
        else if(block == double_h3)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        cycloidgear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int cycloidgear::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        cycloidgear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* cycloidgear::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
