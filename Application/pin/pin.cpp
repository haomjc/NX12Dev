//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\OneDrive\NX12Dev\Application\pin.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: haomjc
//              Version: NX 12
//              Date: 12-25-2018  (Format: mm-dd-yyyy)
//              Time: 10:39 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "pin.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(pin::theSession) = NULL;
UI *(pin::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
pin::pin()
{
    try
    {
        // Initialize the NX Open C++ API environment
        pin::theSession = NXOpen::Session::GetSession();
        pin::theUI = UI::GetUI();
        theDlxFileName = "pin.dlx";
        theDialog = pin::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &pin::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &pin::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &pin::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &pin::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &pin::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
pin::~pin()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    pin *thepin = NULL;
    try
    {
        thepin = new pin();
        // The following method shows the dialog immediately
        thepin->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        pin::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(thepin != NULL)
    {
        delete thepin;
        thepin = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        pin::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int pin::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        pin::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void pin::initialize_cb()
{
    try
    {
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
        linear_length = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_length"));
        linear_diameter = dynamic_cast<NXOpen::BlockStyler::LinearDimension*>(theDialog->TopBlock()->FindBlock("linear_diameter"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        pin::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void pin::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        pin::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int pin::apply_cb()
{
    int errorCode = 0;
    try
    {    
		double linear = this->linear_length->GetProperties()->GetDouble("Value");
		double radius = this->linear_diameter->GetProperties()->GetDouble("Value");

		stringstream s_pin_linear, s_pin_diameter;
		s_pin_linear << linear;
		s_pin_diameter << radius;

		NXOpen::Session *theSession = NXOpen::Session::GetSession();
		NXOpen::Part *workPart(theSession->Parts()->Work());
		NXOpen::Part *displayPart(theSession->Parts()->Display());
	
		NXOpen::Features::Feature *nullNXOpen_Features_Feature(NULL);
		NXOpen::Features::CylinderBuilder *cylinderBuilder1;
		cylinderBuilder1 = workPart->Features()->CreateCylinderBuilder(nullNXOpen_Features_Feature);

		cylinderBuilder1->BooleanOption()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);

		std::vector<NXOpen::Body *> targetBodies1(1);
		NXOpen::Body *nullNXOpen_Body(NULL);
		targetBodies1[0] = nullNXOpen_Body;

		std::vector<NXOpen::Body *> targetBodies2(1);
		targetBodies2[0] = nullNXOpen_Body;
		cylinderBuilder1->BooleanOption()->SetTargetBodies(targetBodies2);

		NXOpen::Unit *unit1;
		unit1 = cylinderBuilder1->Height()->Units();

		NXOpen::Expression *expression1;
		expression1 = workPart->Expressions()->CreateSystemExpressionWithUnits("0", unit1);

		cylinderBuilder1->Diameter()->SetRightHandSide(s_pin_diameter.str());

		cylinderBuilder1->Height()->SetRightHandSide(s_pin_linear.str());

		NXOpen::NXObject *nXObject1;
		nXObject1 = cylinderBuilder1->Commit();

		NXOpen::Expression *expression2(cylinderBuilder1->Height());
		NXOpen::Expression *expression3(cylinderBuilder1->Diameter());
		cylinderBuilder1->Destroy();

		workPart->Expressions()->Delete(expression1);

		NXOpen::Features::ChamferBuilder *chamferBuilder1;
		chamferBuilder1 = workPart->Features()->CreateChamferBuilder(nullNXOpen_Features_Feature);

		chamferBuilder1->FirstOffsetExp()->SetRightHandSide("5");

		chamferBuilder1->SecondOffsetExp()->SetRightHandSide("5");

		chamferBuilder1->AngleExp()->SetRightHandSide("45");

		chamferBuilder1->SetOption(NXOpen::Features::ChamferBuilder::ChamferOptionSymmetricOffsets);

		chamferBuilder1->SetMethod(NXOpen::Features::ChamferBuilder::OffsetMethodEdgesAlongFaces);

		chamferBuilder1->SetFirstOffset("5");

		chamferBuilder1->SetSecondOffset("5");

		chamferBuilder1->SetAngle("45");

		chamferBuilder1->SetTolerance(0.001);

		NXOpen::ScCollector *scCollector1;
		scCollector1 = workPart->ScCollectors()->CreateCollector();

		NXOpen::Features::Cylinder *cylinder1(dynamic_cast<NXOpen::Features::Cylinder *>(nXObject1));
		//NXOpen::Edge *edge1(dynamic_cast<NXOpen::Edge *>(cylinder1->FindObject("EDGE * 1 * 3 {(-2,-3.4641016151378,24)(4,0,24)(-2,3.4641016151378,24) CYLINDER(1)}")));
		NXOpen::Edge *edge1 = NULL;
		NXOpen::Edge *edge2 = NULL;
		std::vector<Edge*>vecEdges = cylinder1->GetEdges();
		edge1 = vecEdges[0];
		edge2 = vecEdges[1];

		NXOpen::Edge *nullNXOpen_Edge(NULL);

		NXOpen::EdgeTangentRule *edgeTangentRule1;
		edgeTangentRule1 = workPart->ScRuleFactory()->CreateRuleEdgeTangent(edge1, nullNXOpen_Edge, false, 0.050000000000000003, true, false);

		std::vector<NXOpen::SelectionIntentRule *> rules1(1);
		rules1[0] = edgeTangentRule1;
		scCollector1->ReplaceRules(rules1, false);

		chamferBuilder1->SetSmartCollector(scCollector1);

		NXOpen::EdgeTangentRule *edgeTangentRule2;
		edgeTangentRule2 = workPart->ScRuleFactory()->CreateRuleEdgeTangent(edge1, nullNXOpen_Edge, false, 0.050000000000000003, true, false);

		//NXOpen::Edge *edge2(dynamic_cast<NXOpen::Edge *>(cylinder1->FindObject("EDGE * 2 * 3 {(-2,3.4641016151378,0)(4,0,0)(-2,-3.4641016151378,0) CYLINDER(1)}")));
		NXOpen::EdgeTangentRule *edgeTangentRule3;
		edgeTangentRule3 = workPart->ScRuleFactory()->CreateRuleEdgeTangent(edge2, nullNXOpen_Edge, false, 0.050000000000000003, true, false);

		std::vector<NXOpen::SelectionIntentRule *> rules2(2);
		rules2[0] = edgeTangentRule2;
		rules2[1] = edgeTangentRule3;
		scCollector1->ReplaceRules(rules2, false);

		chamferBuilder1->SetSmartCollector(scCollector1);

		chamferBuilder1->FirstOffsetExp()->SetRightHandSide("0.5");

		chamferBuilder1->SecondOffsetExp()->SetRightHandSide("0.5");

		NXOpen::Features::Feature *feature1;
		feature1 = chamferBuilder1->CommitFeature();

		NXOpen::Expression *expression4(chamferBuilder1->FirstOffsetExp());
		chamferBuilder1->Destroy();




        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        pin::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int pin::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == linear_length)
        {
        //---------Enter your code here-----------
        }
        else if(block == linear_diameter)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        pin::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int pin::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        pin::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* pin::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
